	<<Important Note :>> <This example is a modified version of the click to dial example from the {{{https://sailfin.dev.java.net/}sailfin project}} 
	and is originally available at {{{http://wiki.glassfish.java.net/Wiki.jsp?page=SipClickToDialExample2}http://wiki.glassfish.java.net/Wiki.jsp?page=SipClickToDialExample2}}.
	It is has been modified to fit the new JSR 289 application selection process and slimmed down to its minimum. 
	The purpose here is to demonstrate interoperability between containers and show backward compatibility with JSR 116.>

Click To Call

* Service Description

	This simple example shows how SIP Servlets can be used along with HTTP servlets as a converged application 
	to place calls from a web page. This example consists of the following steps:
   
   [[1]]Alice and Bob each register a SIP Softphone
   
   [[2]]Alice clicks on the "Call" link to place a call to Bob
   
   [[3]]Alice's phone rings
   
   [[4]]When Alice picks up her phone, Bob's phone rings
   
   [[5]]When Bob answers his phone, the call is connected
   
   [[6]]When one of them hangs up, the other one is also disconnected 	
	 
* How to activate it

** From the binary

	You can find the war file corresponding to this example
 	{{{http://download.java.net/maven/2/org/mobicents/servlet/sip/example/click-to-call-servlet/1.0-SNAPSHOT/click-to-call-servlet-1.0-SNAPSHOT.war}here}}.\
 	Drop the downloaded war file into your <<<tomcat_home/webapps>>> directory or <<<jboss_home/server/default/deploy>>> directory  
 	
 	Get the corresponding {{{/darfiles/click2call-dar.properties}dar configuration file}}.\
 	Drop it in your <<<tomcat_home/conf/dars>>> directory or <<<jboss_home/server/default/conf/dars>>> directory.\
	To use this dar file for this service, specify in the Service xml tag, 
	darConfigurationFileLocation attribute of the <<<tomcat_home/conf/server.xml>>> file or <<<jboss_home/server/default/deploy/jboss-web.deployer/server.xml>>>, the following :\
	<<<conf/dars/click2call-dar.properties.properties>>>

	You can now run your container (Tomcat or Jboss).

** From the source

	Please check out the speed dial example located under this 
	{{{https://sip-servlets.dev.java.net/source/browse/sip-servlets/trunk/sip-servlets-examples/click-to-call}location}} 
	from the svn repository.
	Follow the instructions in the README.txt to build and run the example.
	
	The DAR file for this example can be found in the sip servlets impl project under the 
	{{{https://sip-servlets.dev.java.net/source/browse/sip-servlets/trunk/sip-servlets-impl/docs}docs directory}} 
	Use this as a DAR file (Service tag/darConfigurationFileLocation attribute in the tomcat's server.xml):
	file:///E:/workspaces/sip-servlets/sip-servlets-impl/docs/dar-click2dial.properties  

* How to play with it

	Starts Two sip phones.
	
	Open up a browser to http://localhost:8080/click2call/.
	If you have no registered SIp clients you will be asked to register at least two.\
	Configure your SIP clients to use the sip servlets server as a register and proxy. (ip address : 127.0.0.1, port: 5080)\
	By default it will accept any password, see below for instructions on how to enable
	security and authentication.\ 
	After the registration you will see a table where each cell will initiate a call between the corresponding clients.
	
	You can also navigate to http://localhost:8080/click2call/simplecall.html, which is
	a simplified version that doesn't require registered clients.\
	You will see the index page where you can enter two SIP URIs. Enter the URIs
	of the two SIP phones you just started and click "Submit".\
	The SIP phones don't have to be registered.
	
	After you pick up both phones the RTP session starts.

** To enable security in JBoss AS

	To enable security for JBoss Application Server, basically you have to create a security 
	domain suitable for digest authentication and then configure your Sip Servlets application
	to use this security domain.\
	Here are the steps to make a simple configuration with static users, passwords and roles:

	[[1]] In server/default/conf/login-config.xml add a new security policy with hashed passwords, like this:\
    	<application-policy name = "sip-servlets">\
       		<authentication>\
          		<login-module code="org.jboss.security.auth.spi.UsersRolesLoginModule" flag = "required">\
           			<module-option name="usersProperties">props/sip-servlets-users.properties</module-option>\
           			<module-option name="rolesProperties">props/sip-servlets-roles.properties</module-option>\
	   				<module-option name="hashAlgorithm">MD5</module-option>\
           			<module-option name="hashEncoding">rfc2617</module-option>\
           			<module-option name="hashUserPassword">false</module-option>\
           			<module-option name="hashStorePassword">true</module-option>\
           			<module-option name="passwordIsA1Hash">true</module-option>\
           			<module-option name="storeDigestCallback">org.jboss.security.auth.spi.RFC2617Digest</module-option>\
          		</login-module>\
       		</authentication>\
    	</application-policy>\

	[[2]] In the file props/sip-servlets-users.properties put this:\
	# A sample users.properties file, this line creates user "admin" with password "admin" for "sip-servlets-realm"\
	admin=9640e13fedc736bdafa6b9007d965c56

	The cryptic string here is the A1 value of the digest authentication algorithm and can be generated with the following command:
	<<<java -cp ../server/default/lib/jbosssx.jar org.jboss.security.auth.spi.RFC2617Digest username "My Realm" password RFC2617 A1 hash: 9b47ec6f03603dd49863e7d58c4c49ea>>>

	[[3]] In the file props/sip-servlets-roles.properties put this:\
	# A sample roles.properties file for use with some roles\
	admin=caller,role1,role2,..

	Each line in this file assigns roles to the users defined in sip-servlets-users.properties

	[[4]] In jboss-web.xml in your application put this:\
	<jboss-web>\
   		<!-- Uncomment the security-domain to enable security. You will
      	need to edit the htmladaptor login configuration to setup the
      	login modules used to authentication users. -->\
      	<security-domain>java:/jaas/sip-servlets</security-domain>\
	</jboss-web>\

	[[5]] In sip.xml in your application add some security constraint and authentication type, for example:\
	<security-constraint>\
	   <display-name>REGISTER Method Security Constraint</display-name>\
	      <resource-collection>\
	          <resource-name>SimpleSipServlet</resource-name>\
	          <description>Require authenticated REGSITER requests</description>\
	          <servlet-name>SimpleSipServlet</servlet-name>\
	          <sip-method>REGISTER</sip-method>\
	     </resource-collection>\
	     <auth-constraint>\
	           <role-name>caller</role-name>\
	     </auth-constraint>\
	 </security-constraint>\
	 
	 <login-config>\
         	<auth-method>DIGEST</auth-method>\
         	<realm-name>sip-servlets-realm</realm-name>\
   	 </login-config>\


** To enable security in Tomcat

	You have to specify some security realm for the servlet container or it's parents, and add some 
	contraints to the application. There are the steps: \

	[[1]] Open <tomcat_home>/conf/server.xml and uncomment the following line:\
	<Realm className="org.apache.catalina.realm.MemoryRealm" />

	[[2]] Open <tomcat_root>/conf/tomcat-users.xml and add the following <user> sub-element:\
	<user name="user" password="password" roles="caller" />

	[[3]] In sip.xml in your application add some security constraint and authentication type, for example:\
	<security-constraint>\
	   <display-name>REGISTER Method Security Constraint</display-name>\
	      <resource-collection>\
	          <resource-name>SimpleSipServlet</resource-name>\
	          <description>Require authenticated REGSITER requests</description>\
	          <servlet-name>SimpleSipServlet</servlet-name>\
	          <sip-method>REGISTER</sip-method>\
	     </resource-collection>\
	     <auth-constraint>\
	           <role-name>caller</role-name>\
	     </auth-constraint>\
	 </security-constraint>\
	 
	 <login-config>\ 
         	<auth-method>DIGEST</auth-method>\ 
         	<realm-name>sip-servlets-realm</realm-name>\ 
   	 </login-config>\
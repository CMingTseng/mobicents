<?xml version="1.0" encoding="UTF-8"?>
<project name="mobicents Common_Ant_Targets_for_SLEE_Resource_Adaptors">

	<!--
		
		Common Ant Targets for your SLEE Resource Adaptors
		Author: Eduardo Martins
		Portugal Telecom Inovacao (www.ptinovacao.pt)
		Contributed to Mobicents
		
		To use these targets your SLEE RAs
		there are some issues:
		
			1. You need to define, in the ant build file that will
			   import this one, the properties:			 
			       
			     º ra.name - this ra name will be used to
                   to identify ra files, name jars and temp dirs;

			     º ra.entity - this ra entity name to be created;
                   
			     º ra.id - this ra id for deploy, 
			       example: xmppra#org.mobicents#1.0;
			     
			     º ra.classpath - the classpath needed to compile all sources;			     			     
			       
		    2. About RA xml descriptors:
		       
				 º event descriptor must be named "event-jar.xml" and must be in ratype/events/xml dir
				 
				 º ratype descriptor must be named "resource-adaptor-type-jar.xml" and must be in ratype/xml dir

				 º ratype deployable unit descriptor must be named "deployable-unit.xml" and must be in ratype/xml dir
				 		         
				 º ra descriptor must be named "resource-adaptor-jar.xml" and must be in ra/xml dir

				 º ra deployable unit descriptor must be named "deployable-unit.xml" and must be in ra/xml dir
		         
		    3. Dir "ratype/events/classes","ratype/classes" and "ra/classes" will be used to compile sources in
		       "ratype/events/src", "ratype/src" and "ra/src"
		    
   		    4. Events jar will be created in ratype/events/jars and will be named ra.name + "-event.jar"
   		    
		    5. RA Type jar will be created in ratype/jars and will be named ra.name + "-ratype.jar"

		    6. RA jar will be created in ra/jars and will be named ra.name + "-ra.jar"
		    		    		    		       
		    7. RA Type deployable unit jar will be created in ratype/jars and will be named ra.name + "-ratype-DU.jar"
		    
   		    8. RA deployable unit jar will be created in ra/jars and will be named ra.name + "-ra-DU.jar"
		    
		    9. You can add libs to the ratype and ra DUs, all you need to do is to set filesets
		       with id "ra.libs.ratype" and "ra.libs.ra"
		       	       
		    10. If you want to compile sources in debug mode just define property compile.as.debug with value "true" BEFORE importing this file.		    	  
		    
		    11. You can create new ra entities with properties set in a file. Just set "ra.entity.properties" to point at the config file, before importing this file.
		   		   
	-->

	<!-- DEFAULT PROPERTIES -->

	<property name="compile.as.debug" value="false" />

	<property name="stage.dir" value="stage" />

	<!-- Needed by release packaging script -->
	
	<import file="${ant.file.mobicents Common_Ant_Targets_for_SLEE_Resource_Adaptors}/../mobicents-ant-common-properties.xml"/>
	<!-- CLEANERS -->

	<target name="clean-events">
		<delete dir="ratype/events/classes" />
		<delete file="ratype/events/jars/${ra.name}-event.jar" />
	</target>

	<target name="clean-ratype">
		<delete dir="ratype/classes" />
		<delete file="ratype/jars/${ra.name}-ratype.jar" />
		<delete file="ratype/jars/${ra.name}-ratype-DU.jar" />
	</target>

	<target name="clean-ra">
		<delete dir="ra/classes" />
		<delete file="ra/jars/${ra.name}-ra.jar" />
		<delete file="ra/jars/${ra.name}-ra-DU.jar" />
	</target>

	<target name="clean-release">
		<delete dir="${stage.dir}" />
	</target>
	<target name="clean" depends="clean-events,clean-ratype,clean-ra,clean-release" />

	<!-- BUILDERS -->
	<target name="compile-event-src" if="events.src.present">
		<!-- compile sources -->
		<javac debug="${compile.as.debug}" destdir="ratype/events/classes" srcdir="ratype/events/src">
			<classpath refid="ra.classpath" />
		</javac>
		<!-- and copy other files that are not classes -->
		<copy todir="ratype/events/classes">
			<fileset dir="ratype/events/src">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="build-event-jar">
		<!-- create dirs -->
		<mkdir dir="ratype/events/classes" />
		<mkdir dir="ratype/events/jars" />
		<!-- compile sources if required -->
		<available file="ratype/events/src" type="dir" property="events.src.present" />
		<antcall target="compile-event-src" />
		<!-- copy descriptor -->
		<copy file="ratype/events/xml/event-jar.xml" tofile="ratype/events/classes/META-INF/event-jar.xml" />
		<!-- create event jar -->
		<echo>Creating RA Event jar.</echo>
		<jar destfile="ratype/events/jars/${ra.name}-event.jar">
			<fileset dir="ratype/events/classes" />
		</jar>
	</target>

	<target name="build-ratype-jar" depends="build-event-jar">
		<!-- create dirs -->
		<mkdir dir="ratype/classes/jar" />
		<mkdir dir="ratype/jars" />
		<!-- compile sources -->
		<javac debug="${compile.as.debug}" destdir="ratype/classes/jar" srcdir="ratype/src">
			<classpath refid="ra.classpath" />
		</javac>
		<!-- copy descriptor -->
		<copy file="ratype/xml/resource-adaptor-type-jar.xml" tofile="ratype/classes/jar/META-INF/resource-adaptor-type-jar.xml" />
		<!-- copy other files that are not classes -->
		<copy todir="ratype/classes/jar">
			<fileset dir="ratype/src">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<!-- create ratype jar -->
		<echo>Creating RA Type jar.</echo>
		<jar destfile="ratype/jars/${ra.name}-ratype.jar">
			<fileset dir="ratype/classes/jar" />
		</jar>
	</target>

	<target name="copy-ratype-DU-libs" if="ra.libs.ratype">
		<echo>Found RA Type libs fileset, adding to Ra Type DU.</echo>
		<copy todir="ratype/classes/DU/library">
			<fileset refid="ra.libs.ratype" />
		</copy>
	</target>

	<target name="build-ratype-DU" depends="build-ratype-jar">
		<!-- create dir -->
		<mkdir dir="ratype/classes/DU" />
		<!-- copy descriptor -->
		<copy file="ratype/xml/deployable-unit.xml" tofile="ratype/classes/DU/META-INF/deployable-unit.xml" />
		<!-- copy ratype jar -->
		<copy todir="ratype/classes/DU">
			<fileset includes="${ra.name}-ratype.jar" dir="ratype/jars" />
			<fileset includes="${ra.name}-event.jar" dir="ratype/events/jars" />
		</copy>
		<!-- copy libs if requested -->
		<condition property="ra.libs.ratype">
			<isreference refid="ra.libs.ratype" />
		</condition>
		<antcall target="copy-ratype-DU-libs" />
		<!-- create DU jar -->
		<echo>Creating RA Type DU jar.</echo>
		<jar destfile="ratype/jars/${ra.name}-ratype-DU.jar">
			<fileset dir="ratype/classes/DU" />
		</jar>
	</target>

	<target name="build-ra-jar">
		<!-- create dirs -->
		<mkdir dir="ra/classes/jar" />
		<mkdir dir="ra/jars" />
		<!-- compile sources -->
		<javac debug="${compile.as.debug}" destdir="ra/classes/jar" srcdir="ra/src">
			<classpath refid="ra.classpath" />
		</javac>
		<!-- copy descriptor -->
		<copy file="ra/xml/resource-adaptor-jar.xml" tofile="ra/classes/jar/META-INF/resource-adaptor-jar.xml" />
		<!-- copy other files that are not classes -->
		<copy todir="ra/classes/jar">
			<fileset dir="ra/src">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<!-- create ratype jar -->
		<echo>Creating RA jar.</echo>
		<jar destfile="ra/jars/${ra.name}-ra.jar">
			<fileset dir="ra/classes/jar" />
		</jar>
	</target>

	<target name="copy-ra-DU-libs" if="ra.libs.ra">
		<echo>Found RA libs fileset, adding to RA DU.</echo>
		<copy todir="ra/classes/DU/library">
			<fileset refid="ra.libs.ra" />
		</copy>
	</target>

	<target name="build-ra-DU" depends="build-ra-jar">
		<!-- create dir -->
		<mkdir dir="ra/classes/DU" />
		<!-- copy descriptor -->
		<copy file="ra/xml/deployable-unit.xml" tofile="ra/classes/DU/META-INF/deployable-unit.xml" />
		<!-- copy ra jar -->
		<copy todir="ra/classes/DU">
			<fileset includes="${ra.name}-ra.jar" dir="ra/jars" />
		</copy>
		<!-- copy libs if requested -->
		<condition property="ra.libs.ra">
			<isreference refid="ra.libs.ra" />
		</condition>
		<antcall target="copy-ra-DU-libs" />
		<!-- create DU jar -->
		<echo>Creating RA DU jar.</echo>
		<jar destfile="ra/jars/${ra.name}-ra-DU.jar">
			<fileset dir="ra/classes/DU" />
		</jar>
	</target>

	<target name="build-DUs" depends="build-ratype-DU,build-ra-DU" />
	<!-- (UN)DEPLOYERS -->

	<target name="create-deploy-urls">
		<path id="ra.url.to.deploy.ra">
			<pathelement location="ra/jars/${ra.name}-ra-DU.jar" />
		</path>
		<path id="ra.url.to.deploy.ratype">
			<pathelement location="ratype/jars/${ra.name}-ratype-DU.jar" />
		</path>
		<property name="ra.url.to.deploy.ra" refid="ra.url.to.deploy.ra" />
		<property name="ra.url.to.deploy.ratype" refid="ra.url.to.deploy.ratype" />
	</target>

	<target name="ra-install" depends="create-deploy-urls,init-common">
		<echo>Installing ${ra.entity}.</echo>
		<slee-management jnpport="${jnpPort}" host="${jnpHost}">
			<install url="${file_url}${ra.url.to.deploy.ratype}" />
			<install url="${file_url}${ra.url.to.deploy.ra}" />
		</slee-management>
	</target>



	<target name="ra-activate-with-properties" depends="create-deploy-urls,init-common" if="ra.entity.properties.filename">

		<path id="ra.entity.properties.path">
			<pathelement location="${ra.entity.properties.filename}" />
		</path>

		<!-- Lets leave pathconvert - it cant hurt, windows swalows it, and besides we still need to define property to add URI identifier "file:/"-->
		<!-- However net.java.URI class requires / not \ .... -->
		<pathconvert property="ra.props" targetos="unix" refid="ra.entity.properties.path">
		</pathconvert>

		<property name="ra.entity.properties.url" value="${file_url}${ra.props}" />

		<echo>Activating ${ra.entity} with properties: file=${ra.entity.properties.filename} fileURL=${ra.entity.properties.url}</echo>

		<slee-management jnpport="${jnpPort}" host="${jnpHost}">
			<createraentity resourceadaptorid="${ra.id}" entityname="${ra.entity}" properties="${ra.entity.properties.url}" />
			<activateraentity entityname="${ra.entity}" />
			<bindralinkname entityname="${ra.entity}" linkname="${ra.entity}" />
		</slee-management>

	</target>

	<target name="ra-activate-without-properties" depends="create-deploy-urls,init-common" unless="ra.entity.properties.filename">

		<echo>Activating ${ra.entity} without properties file.</echo>

		<slee-management jnpport="${jnpPort}" host="${jnpHost}">
			<createraentity resourceadaptorid="${ra.id}" entityname="${ra.entity}" />
			<activateraentity entityname="${ra.entity}" />
			<bindralinkname entityname="${ra.entity}" linkname="${ra.entity}" />
		</slee-management>
	</target>

	<target name="ra-activate" depends="ra-activate-without-properties,ra-activate-with-properties" />
	<target name="ra-deploy" depends="ra-install,ra-activate" />

	<target name="ra-uninstall" depends="create-deploy-urls,init-common">
		<echo>Uninstalling ${ra.entity}.</echo>
		<slee-management jnpport="${jnpPort}" host="${jnpHost}">
			<uninstall url="${file_url}${ra.url.to.deploy.ra}" />
			<uninstall url="${file_url}${ra.url.to.deploy.ratype}" />
		</slee-management>
	</target>

	<target name="ra-deactivate" depends="create-deploy-urls,init-common">
		<echo>Deactivating ${ra.entity}.</echo>
		<slee-management jnpport="${jnpPort}"  host="${jnpHost}">
			<unbindralinkname linkname="${ra.entity}" />
			<deactivateraentity entityname="${ra.entity}" />
			<removeraentity entityname="${ra.entity}" />
		</slee-management>
	</target>

	<target name="ra-undeploy" depends="ra-deactivate,ra-uninstall" />

	<target name="build-and-deploy-ra" depends="build-DUs,ra-deploy" />

	<target name="package-for-release" depends="build-DUs,package-for-release-do-dir,package-for-release-makeprops-with-file,pacakge-for-release-generic-notmain,pacakge-for-release-generic-main">


		<!--ant target="package-for-release-makeprops-with-file" /-->
	</target>

	<target name="package-for-release-do-dir">

		<mkdir dir="${stage.dir}" />
		<!-- lets take all jars, in case library path is set wrong inside one of them -->
		<copy overwrite="true" file="ratype/jars/${ra.name}-ratype-DU.jar" todir="${stage.dir}" />
		<copy overwrite="true" file="ratype/jars/${ra.name}-ratype.jar" todir="${stage.dir}" />
		<copy overwrite="true" file="ratype/events/jars/${ra.name}-event.jar" todir="${stage.dir}" />
		<copy overwrite="true" file="ra/jars/${ra.name}-ra-DU.jar" todir="${stage.dir}" />
		<copy overwrite="true" file="ra/jars/${ra.name}-ra.jar" todir="${stage.dir}" />
		<copy overwrite="true" file="version.properties" todir="${stage.dir}" />

		<copy overwrite="true" failonerror="false" todir="${stage.dir}">
			<fileset dir="scripts">
				<include name="*.bsh" />
			</fileset>
		</copy>
		<copy overwrite="true" failonerror="false" file="${ra.entity.properties.filename}" todir="${stage.dir}" />
		<!-- 
					LETS PUT SOME PROPS IN version.properties file, this will be used by common package deploy ant script 
					This way we can have common part that just would have to be extended
				-->

		<propertyfile file="${stage.dir}/version.properties">
			<entry key="ra.id" type="string" value="${ra.id}" />
			<entry key="ratype-DU" type="string" value="${ra.name}-ratype-DU.jar" />
			<entry key="ra-DU" type="string" value="${ra.name}-ra-DU.jar" />
			<entry key="ra.entity" type="string" value="${ra.entity}" />
		</propertyfile>


		<!-- NOW LETS COPY LOCAL PACKAGE_BUILD.xml - if its present , it will be main file, which shoudl import generic_pbuild.xml -->
		<copy overwrite="true" failonerror="false" tofile="${stage.dir}/build.xml" file="package_build.xml" />

		<available file="package_build.xml" property="generic_pbuild.not.main" />

	</target>

	<target name="pacakge-for-release-generic-notmain" if="generic_pbuild.not.main">
		<copy overwrite="true" failonerror="true" tofile="${stage.dir}/generic_pbuild.xml" file="${mobicents.home}/xml/ant/package_build.xml" />
	</target>

	<target name="pacakge-for-release-generic-main" unless="generic_pbuild.not.main">
		<copy overwrite="true" failonerror="true" tofile="${stage.dir}/build.xml" file="${mobicents.home}/xml/ant/package_build.xml" />
	</target>
	<target name="package-for-release-makeprops-with-file" if="ra.entity.properties.filename">
		<propertyfile file="${stage.dir}/version.properties">
			<entry key="ra.props" type="string" value="${ra.entity.properties.filename}" />
		</propertyfile>
	</target>



</project>

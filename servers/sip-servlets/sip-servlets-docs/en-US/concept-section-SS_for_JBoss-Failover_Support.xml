<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<!-- chapter id nickname: ssfjfs --><section id="ssfjfs-SS_for_JBoss-Failover_Support">
  <title>MSS for JBoss: Transparent Failover</title>
  <para>Just as with a Mobicents JAIN SLEE cluster, a Mobicents SIP Servlets Server for JBoss cluster does not employ any standby nodes. Typically, therefore, proxies and registrars must share the user location table by using a database cluster.</para>
  <para>The Mobicents SIP load balancer, which is a SIP Call ID-aware load balancer, is used as the intermediary. The SIP load balancer forwards stateful transaction requests to cluster nodes based on its provisioning algorithm. The SIP load balancer acts as an entry-point to the cluster and distributes the incoming requests between nodes. It is always advised to use a SIP load balancer or an IP load balancer in a cluster configuration. </para>
  <formalpara>
    <title>Testing a cluster</title>
    <para>This choice of implementation has many benefits:</para>
  </formalpara>
  <itemizedlist>
    <listitem>
      <para>There is no need for standby nodes, because the remaining nodes in a degraded cluster automatically and transparently (to the user) take on the load of the failed node. This can be done because both the SIP load balancer and SIP Servlet-enabled JBoss Application Servers support mid-call failover.</para>
    </listitem>
    <listitem>
      <para>There is no need to ensure that requests are directed to the correct node, because in a SIP Servlets-enabled JBoss Application Server (or Mobicents JAIN SLEE server) cluster, any node can serve any request to any User Agent (UA).</para>
    </listitem>
    <listitem>
      <para>All hardware is in use, reducing costs.</para>
    </listitem>
    <listitem>
      <para>Maintenance is easier, due to all nodes having nearly-identical configurations.</para>
    </listitem>
  </itemizedlist>
<!--<remark>These are the remaining steps, which I'm listing from README-network.txt:
  run sh prepare-jboss-server-for-clustering-failover-network.sh uas (or proxy or b2bua if you want to test something else) from this directory on both machines
run sh start-lb-network.sh from this directory
run sh start-jboss-server-all.sh from this directory on both machines
run sh clustering-failover-test-network.sh uas (or proxy or b2bua if you want to test something else) from this directory
When the ACK has been received kill the first node, the second node still handles the BYE and sends the OK to it :-)</remark>
  </step>
 </procedure>
 <remark>modify the JBOSS_HOME variable in prepare-jboss-server-for-clustering-failover.sh script to map your own
run sh prepare-jboss-server-for-clustering-failover.sh uas (or proxy, b2bua or uac  if you want to test something else) from this directory
run sh start-lb.sh from this directory
run sh start-jboss-server-port-1.sh from this directory
When server is fully started
run sh start-jboss-server-port-2.sh from this directory
When server is fully started
run sh clustering-failover-test.sh uas (or proxy, b2bua, b2bua-remote-send-bye, uac if you want to test something else) from this directory
When the ACK has been received kill the first node, the second node still handles the BYE and sends the OK to it :-)

Beware in case you test uac, because the shootist application that is used is compiled 2 times.
First time with a parameter saying that the application sends the INVITE when it starts (this one is deployed on jboss server port 1) and
the second time with the parameter saying that the application doesn't send the INVITE when it starts (this one is deployed on jboss server port 2)
The second time is used only for failover when the first node will crash to get the subsequent requests.
So you need to first start the jboss server port 2, then start the jboss server port 1 but before it is fully started (When you see SIP Load Balancer Found ! printed)
you need to run sh clustering-failover-test.sh uac so that it listen for the incoming INVITE from the application     </remark>
 <remark>We provide an example to run the Mobicents Sip Servlets cluster (comprised of 2 nodes), the load balancer and client application on different machines.

Please checkout our clustering and mid-call failover example and follow the README-network.txt instructions.
Cluster on the same machine

We provide an example to run the Mobicents Sip Servlets cluster (comprised of 2 nodes), the load balancer and client application on the same machine for ease of testing purposes.

Please checkout our clustering and mid-call failover example and follow the README.txt instructions.

Here is the modifications needed to run two application servers running at the same time on the same machine. (Those steps are done in the above example as part of the prepare-jboss-server-for-clustering-failover.sh script)

As we need two application servers running at the same time, we must avoid any conflict. For instance we will need JBoss Tomcat to bind its socket on two different ports otherwise a network conflict will occur. We will leverage the service binding manager this chapter of the JBoss AS documentation.

The first step is to copy the all configuration of JBoss into two separate configurations that we name ports-01 and ports-02 :

cd JBOSS_HOME/server
cp -r all ports-01
cp -r all ports-02

Edit the file JBOSS_HOME/server/ports-01/conf/jboss-service.xml and uncomment the service binding manager :

<![CDATA[<mbean code="org.jboss.services.binding.ServiceBindingManager"
name="jboss.system:service=ServiceBindingManager" >
<attribute name="ServerName">ports-01</attribute >
<attribute name="StoreURL">${jboss.home.url}/docs/examples/binding-manager/sample-bindings.xml</attribute >
<attribute name="StoreFactoryClassName">org.jboss.services.binding.XMLServicesStoreFactory</attribute >
</mbean >]]>

Edit the file JBOSS_HOME/server/ports-02/conf/jboss-service.xml , uncomment the service binding manager and change the value ports-01 into ports-02:

<![CDATA[<mbean code="org.jboss.services.binding.ServiceBindingManager"
name="jboss.system:service=ServiceBindingManager" >
<attribute name="ServerName">node-02</attribute >
<attribute name="StoreURL">${jboss.home.url}/docs/examples/binding-manager/sample-bindings.xml</attribute >
<attribute name="StoreFactoryClassName">org.jboss.services.binding.XMLServicesStoreFactory</attribute >
</mbean >]]>
Limitations

Mobicents Sip Servlets doesn't currently support mid call failover for converged applications only pure sip applications (Uas, Uac, B2BUA, Proxy).
</remark>-->  <section id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover--Installing_Configuring_and_Running">
    <title>MSS for JBoss Cluster: Installing, Configuring and Running</title>
    <para>There are a number of options you can specify for MSS clustering. By default most of them are configured in the &quot;all&quot; server configuration, which is ready to use. In this chapter we will cover the most common configuration options you might need.</para>
    <section id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover-Downloading">
      <title>Downloading</title>
      <para>&nbsp;</para>
    </section>
    <section id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover-Installing">
      <title>Installing</title>
      <para>&nbsp;</para>
    </section>
    <section id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover-Configuring">
      <title>Configuring</title>
      <para>&nbsp;</para>
    </section>
    <section id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover-Running">
      <title>Running</title>
      <para>&nbsp;</para>
    </section>
    <section id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover-Using">
      <title>Using</title>
      <para>&nbsp;</para>
    </section>
<!-- <section
  id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover-Stopping">
  <title>Stopping</title>
  <para>&nbsp;</para>
 </section> -->    <section id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover-Testing">
      <title>Testing</title>
      <para>&nbsp;</para>
    </section>
    <section id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover-Uninstalling">
      <title>Uninstalling</title>
      <para>&nbsp;</para>
    </section>
  </section>
</section>

/**
 * Start time:16:00:31 2009-01-25<br>
 * Project: mobicents-jainslee-server-core<br>
 * 
 * @author <a href="mailto:baranowb@gmail.com">baranowb - Bartosz Baranowski
 *         </a>
 * @author <a href="mailto:brainslog@gmail.com"> Alexandre Mendonca </a>
 */
package org.mobicents.slee.container.component;

import java.util.Set;

import javax.slee.ComponentID;
import javax.slee.SbbID;

import org.mobicents.slee.container.component.deployment.jaxb.descriptors.SbbDescriptorImpl;

/**
 * Start time:16:00:31 2009-01-25<br>
 * Project: mobicents-jainslee-server-core<br>
 * 
 * @author <a href="mailto:baranowb@gmail.com">baranowb - Bartosz Baranowski
 *         </a>
 * @author <a href="mailto:brainslog@gmail.com"> Alexandre Mendonca </a>
 */
public class SbbComponent extends SleeComponent {

	/**
	 * the sbb descriptor
	 */
	private final SbbDescriptorImpl descriptor;
		
	/**
	 * the sbb abstract class
	 */ 
	private Class abstractSbbClass;
	
	/**
	 * the concrete sbb class, generated by SLEE
	 */ 
	private Class concreteSbbClass;
	
	/**
	 * the sbb local interface
	 */ 
	private Class sbbLocalInterfaceClass;

	/**
	 * the concrete sbb local interface class, generated by SLEE 
	 */
	private Class sbbLocalInterfaceConcreteClass;
	
	/**
	 * the sbb own activity context interface 
	 */
	private Class activityContextInterface;

	/**
	 * the concrete sbb own activity context interface class, generated by SLEE
	 */ 
	private Class activityContextInterfaceConcreteClass;
	
	/**
	 * the sbb usage parameters interface
	 */
	private Class usageParametersInterface;
	
	/**
	 * 
	 * @param descriptor
	 */
	public SbbComponent(SbbDescriptorImpl descriptor) {
		this.descriptor = descriptor;
	}

	/**
	 * Retrieves the sbb descriptor
	 * @return
	 */
	public SbbDescriptorImpl getDescriptor() {
		return descriptor;
	}

	/**
	 * Retrieves the sbb id
	 * @return
	 */
	public SbbID getSbbID() {
		return descriptor.getSbbID();
	}

	/**
	 * Retrieves the sbb abstract class
	 * @return
	 */
	public Class getAbstractSbbClass() {
		return abstractSbbClass;
	}

	/**
	 * Retrieves the concrete sbb class, generated by SLEE
	 * @return
	 */
	public Class getConcreteSbbClass() {
		return concreteSbbClass;
	}

	/**
	 * This must never return null, if no custom interface is defined, this has to return generic javax.slee.SbbLocalObject
	 * FIXME emmartins: this should return null, since in runtime it will avoid some instanceof for sure 
	 * @return
	 */
	public Class getSbbLocalInterfaceClass() {
		return sbbLocalInterfaceClass;
	}

	/**
	 * Retrieves the concrete sbb local interface class, generated by SLEE
	 * @return
	 */
	public Class getSbbLocalInterfaceConcreteClass() {
		return sbbLocalInterfaceConcreteClass;
	}

	/**
	 * Retrieves the sbb own activity context interface
	 * @return
	 */
	public Class getActivityContextInterface() {
		return activityContextInterface;
	}

	/**
	 * Retrieves the concrete sbb own activity context interface class, generated by SLEE
	 * @return
	 */
	public Class getActivityContextInterfaceConcreteClass() {
		return activityContextInterfaceConcreteClass;
	}

	/**
	 * Sets the sbb abstract class
	 * @param abstractSbbClass
	 */
	public void setAbstractSbbClass(Class abstractSbbClass) {
		this.abstractSbbClass = abstractSbbClass;
	}

	/**
	 * Sets the concrete sbb class, generated by SLEE
	 * @param concreteSbbClass
	 */
	public void setConcreteSbbClass(Class concreteSbbClass) {
		this.concreteSbbClass = concreteSbbClass;
	}

	/**
	 * Sets the sbb local interface
	 * @param sbbLocalInterfaceClass
	 */
	public void setSbbLocalInterfaceClass(Class sbbLocalInterfaceClass) {
		this.sbbLocalInterfaceClass = sbbLocalInterfaceClass;
	}

	/**
	 * Sets the concrete sbb local interface class, generated by SLEE
	 * @param sbbLocalInterfaceConcreteClass
	 */
	public void setSbbLocalInterfaceConcreteClass(
			Class sbbLocalInterfaceConcreteClass) {
		this.sbbLocalInterfaceConcreteClass = sbbLocalInterfaceConcreteClass;
	}

	/**
	 * Sets the sbb own activity context interface
	 * @param activityContextInterface
	 */
	public void setActivityContextInterface(Class activityContextInterface) {
		this.activityContextInterface = activityContextInterface;
	}

	/**
	 * Sets the concrete sbb own activity context interface class, generated by SLEE
	 * @param activityContextInterfaceConcreteClass
	 */
	public void setActivityContextInterfaceConcreteClass(
			Class activityContextInterfaceConcreteClass) {
		this.activityContextInterfaceConcreteClass = activityContextInterfaceConcreteClass;
	}

	@Override
	public boolean isSlee11() {
		return this.descriptor.isSlee11();
	}

	/**
	 * Retrieves the sbb usage parameters interface
	 * @return
	 */
	public Class getUsageParametersInterface() {
		return usageParametersInterface;
	}

	/**
	 * Sets the sbb usage parameters interface
	 * @param usageParametersInterface
	 */
	public void setUsageParametersInterface(Class usageParametersInterface) {
		this.usageParametersInterface = usageParametersInterface;
	}
	
	@Override
	public Set<ComponentID> getDependenciesSet() {
		return descriptor.getDependenciesSet();
	}
	
	@Override
	public ComponentID getComponentID() {
		return getSbbID();
	}
}

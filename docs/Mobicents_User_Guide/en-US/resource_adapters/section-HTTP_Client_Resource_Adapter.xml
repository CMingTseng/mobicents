<?xml version='1.0'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<section
	id="section-HTTP_Client_Resource_Adapter">
	<title>The HTTP Client Resource Adapter</title>
	<para></para>
	<section
		id="section-Installing_the_HTTP_Client_Resource_Adapter">
		<title>Installing the HTTP Client Resource Adapter</title>
		<para>The HTTP Client resource adapter can be installed by referring to <xref
				linkend="section-Deploying_and_Undeploying_Resource_Adapters"/>.</para>
		<para>Remember to replace <filename><replaceable>&lt;resource_adapter&gt;</replaceable>
			</filename> with the name of the directory in <filename><replaceable>&lt;topmost_mobicents_directory&gt;</replaceable>/resources</filename> corresponding to the HTTP Client resource adapter (currently this directory is named <filename><replaceable>http-client-ra</replaceable>
			</filename>, but this could change in the future).
		</para>
	</section>
	<section
		id="section-Understanding_the_HTTP_Client_Resource_Adapter">
		<title>Understanding the HTTP Client Resource Adapter</title>
		<para>The Hypertext Transfer Protocol (HTTP) is probably the most significant protocol used on the Internet today. Web services, network-enabled appliances and the growth of network computing continue to expand the role of the HTTP protocol beyond user-driven web browsers, while increasing the number of applications that require HTTP support. Applications developed using the Service Logic Execution Environment fall into this category. The Jakarta Commons <literal>HttpClient</literal> component provides an efficient, up-to-date, and feature-rich package implementing the client side of the most recent HTTP standards and recommendations. The HTTP Client resource adapter provides the client-side HTTP standard within the SLEE execution environment using the popular Apache Commons HTTP Client library.</para>
		<para>A Service Building Block (SBB) can use the HTTP Client resource adapter to make a request and get the response either synchronously or asynchronously.</para>
		<figure>
			<title>The Class Diagram for the HTTP Client Resource Adapter</title>
			<mediaobject
				id="mediaobj-orig-ras-HTTPClient-HTTPClientRA.png">
				<imageobject>
					<imagedata
						align="center"
						width="700"
						fileref="images/orig-ras-HTTPClient-HTTPClientRA.png"
						format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
		<variablelist
			id="varlist-HTTP_Client_Resource_Adapter_Methods">
			<title>HTTP Client Resource Adapter Methods</title>
			<varlistentry>
				<term>HttpClientResourceAdaptorSbbInterface</term>
				<listitem>
					<para>Provides the SBB with the interface to interact with the HTTP Client resource adapter. <function>HttpClientResourceAdaptorSbbInterface</function> is a wrapper over <literal>org.apache.commons.httpclient.HttpClient</literal> and exposes the most commonly-used methods of <literal>HttpClient</literal>.</para>
					<formalpara>
						<title>
							<function>createHttpMethod(String method, String uri)</function>
						</title>
						<para>
							<literal>HttpClientResourceAdaptorSbbInterface</literal> is used by the SBB to generate the GET, POST, HEAD (etc.) requests (HttpMethod) by calling this method. The URI can be any external URI.</para>
					</formalpara>
					<formalpara>
						<title>
							<function>public void executeMethod(HttpMethod method)</function>
						</title>
						<para>Calling this method will send the request synchronously and the calling application can then process the <function>HttpMethod</function> to get the response.</para>
					</formalpara>
					<formalpara>
						<title>
							<function>public HttpClientActivity createHttpClientActivity()</function>
						</title>
						<para>Creates an instance of <literal>HttpClientActivity</literal> for a service that wants to send the request asynchronously. By default the value for <literal>endOnReceivingResponse</literal> is set to false, and the service has to explicitly end activity.</para>
					</formalpara>
					<formalpara>
						<title>
							<function>public HttpClientActivity createHttpClientActivity(boolean endOn>>>ReceivingResponse)</function>
						</title>
						<para>Same method as above, with the only difference being that the service can pass <literal>endOnReceivingResponse</literal> as true, which means the activity ends as soon as the resource adapter executes the method and emits a <literal>ResponseEvent</literal>.</para>
					</formalpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Methods Inherited from <literal>HttpClient</literal>
				</term>
				<listitem>
					<formalpara>
						<title>public HttpClientParams getParams()</title>
						<para>The HTTP protocol parameters associated with this <literal> HttpClient</literal>.</para>
					</formalpara>
					<formalpara>
						<title>public HttpClientParams getState()</title>
						<para>The HTTP state associated with the <literal>HttpClient</literal>.</para>
					</formalpara>
					<formalpara>
						<title>public void setParams(HttpClientParams params)</title>
						<para>The HTTP protocol parameters for this <literal>HttpClient</literal>.</para>
					</formalpara>
					<formalpara>
						<title>public void setState(HttpState state)</title>
						<para>Assigns the HTTP state for the <literal>HttpClient</literal>.</para>
					</formalpara>
					<formalpara>
						<title>HttpClientActivity</title>
						<para>The HTTP Client resource adapter can be used in a synchronous or asynchronous way. <literal>HttpClientActivity</literal> is useful only when the HTTP Client resource adapter is used to send the Request asynchronously.</para>
					</formalpara>
					<formalpara>
						<title>public String getSessionId()</title>
						<para>Gets the unique Session ID.</para>
					</formalpara>
					<formalpara>
						<title>public void endActivity();</title>
						<para>To end the <literal>HttpClientActivity</literal>. If <literal>endOnReceivingResponse</literal> is set to true and if the SBB tries to forcefully end activity by calling <function>endActivity()</function>, it should throw an exception. <function>endActivity()</function> should only be allowed when <literal>endOnReceivingResponse</literal> is set to false.</para>
					</formalpara>
					<formalpara>
						<title>public boolean getEndOnReceivingResponse()</title>
						<para>Returns true or false depending on the value passed when the request is sent asynchronously.</para>
					</formalpara>
					<formalpara>
						<title>public void executeMethod(HttpMethod httpMethod)</title>
						<para>The service that wants to send the request asynchronously first has to create an instance of <literal>HttpMethod</literal> by calling <function>createHttpMethod()</function> of <literal>HttpClientResourceAdaptorSbbInterface</literal> The service also creates an activity, attaches itself to this activity, and then calls <function>executeMethod</function>, passing the instance of <literal>HttpMethod</literal>.</para>
					</formalpara>
					<formalpara>
						<title>ResponseEvent</title>
						<para>
							<literal>ResponseEvent</literal> is fired by the HTTP Client resource adapter as soon as <function>HttpClient.executeMethod()</function> returns. The response can be a proper response or an exception depending on the environment and application logic.</para>
					</formalpara>
					<formalpara>
						<title>public Response getResponse()</title>
						<para>The interested SBB receives this event and can act on a response.</para>
					</formalpara>
					<formalpara>
						<title>public Exception getException()</title>
						<para>There may be exception due to a network failure or application logic. Interested SBBs can get the exact Exception using this method.</para>
					</formalpara>
					<formalpara>
						<title>Response</title>
						<para>This is the wrapper over the response part of <function>org.apache.commons.httpclient.HttpMethod</function>.</para>
					</formalpara>
					<formalpara>
						<title>public byte[] getResponseBody()</title>
						<para>Returns the response body of the HTTP method, if any, as an array of bytes.</para>
					</formalpara>
					<formalpara>
						<title>public String getResponseBodyAsString()</title>
						<para>The response body of the HTTP method, if any, as a String.</para>
					</formalpara>
					<formalpara>
						<title>public int getStatusCode()</title>
						<para>The status code associated with the latest response.</para>
					</formalpara>
					<formalpara>
						<title>public Header[] getResponseHeaders()</title>
						<para>The response headers from the most recent execution of this request.</para>
					</formalpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Example</term>
				<listitem>
					<para>This is simple example of the code. To look at fully-working example, look at the httpclientra-example at <ulink
							url="https://mobicents-examples.dev.java.net/source/browse/mobicents-examples/httpclientra-example/"/>.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>The Synchronous Way to Send a Request</term>
				<listitem>
					<para>
						<programlisting>//get the resource adapter Sbb Interface
HttpClientResourceAdaptorSbbInterface raSbbInterface = ;

//create HttpMethod by passing the link
HttpMethod httpMethod = raSbbInterface.createHttpMethod("GET", "http://www.mobicents.org-a.googlepages.com/index.html"));

//send the request and get a response
Response response = raSbbInterface.executeMethod(httpMethod);

//get ResponseBody
String responseBody = response.getResponseBodyAsString();</programlisting>
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>The Asynchronous Way to Send a Request</term>
				<listitem>
					<para>
						<programlisting>//get the resource adapter sbb Interface and aci factory
HttpClientResourceAdaptorSbbInterface raSbbInterface = ;
HttpClientActivityContextInterfaceFactory httpClientAci = ;


//create HttpMethod by passing the link
HttpMethod httpMethod = raSbbInterface.createHttpMethod("GET", "http://www.mobicents.org-a.googlepages.com/index.html"));

//create HttpClientActivity
HttpClientActivity clientActivity = raSbbInterface.createHttpClientActivity(true);

// get the aci for the activity and attach an sbb local object
ActivityContextInterface clientAci = httpClientAci.getActivityContextInterface(clientActivity);
clientAci.attach(sbbContext.getSbbLocalObject());


//send a request by calling executeMethod
clientActivity.executeMethod(httpMethod);</programlisting>
					</para>
					<para>The response arrives asynchronously</para>
					<programlisting>public void onResponseEvent(ResponseEvent event, ActivityContextInterface aci) {

//Get the Response from Event
Response response = event.getResponse();

//get ResponseBody
String responseBody = response.getResponseBodyAsString();</programlisting>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>The HTTP Servlet resource adapter and HTTP Client resource adapter compliment each other in creating a complete SLEE Application capable of receiving requests as well as initiating them.</para>
		<para>TBD: eventually remove this: If you have any suggestions/feedback or find a bug please discuss at <![CDATA[http://forums.java.net/jive/thread.jspa?messageID=228634&#228634]]></para>
		<!--  -->
	</section>
</section>

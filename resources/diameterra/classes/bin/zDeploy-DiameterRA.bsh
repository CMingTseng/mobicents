/** 
 * A BeanShell script service that deploys diameter services in Mobicents
 */

import java.io.File;
import javax.management.ObjectName;
import javax.management.MBeanServer;
import javax.slee.management.DeployableUnitID;
import org.jboss.mx.util.MBeanProxyExt;
import org.jboss.system.ServiceMBeanSupport;
import org.jboss.util.StringPropertyReplacer;
import javax.slee.management.DeploymentMBean;
import javax.slee.management.ServiceManagementMBean;
import org.mobicents.slee.container.management.jmx.ResourceAdaptorMBean;
import org.mobicents.slee.container.management.jmx.SleeManagementMBeanImplMBean;
import org.mobicents.slee.container.management.ComponentKey;
import org.mobicents.slee.container.management.ResourceAdaptorIDImpl;
import org.mobicents.slee.container.management.ServiceIDImpl;

private String sleeManagementMBeanName = "slee:service=SleeManagement";

String diameterRATypeURL = "${jboss.server.home.url}/deploy-mobicents/diameter-ra-type.jar";
String diameterRAURL = "${jboss.server.home.url}/deploy-mobicents/diameter-local-ra.jar";

String diameterRAName = "DiameterRA";
ResourceAdaptorIDImpl raID = new ResourceAdaptorIDImpl("DiameterRA", "org.mobicents", "0.1");

DeployableUnitID diameterRATypeDID = null;
DeployableUnitID diameterRADID = null;


/**
 * Install and activate components in the correct order
 */
void start()
{

  try {
   
   ctx.log.info("Starting deployment of DiameterRA...");

   diameterRATypeDID = sleeDeploymentMBean.install(StringPropertyReplacer.replaceProperties(diameterRATypeURL)); 
   diameterRADID = sleeDeploymentMBean.install(StringPropertyReplacer.replaceProperties(diameterRAURL)); 

   ctx.log.info("Starting deployment of DiameterRA...#2");
   ctx.log.info("Starting deployment of DiameterRA...resourceAdaptorMBean: " + resourceAdaptorMBean);

   resourceAdaptorMBean.createResourceAdaptorEntity(raID, diameterRAName, null);

   ctx.log.info("Starting deployment of diameterra...#3");

   resourceAdaptorMBean.activateResourceAdaptorEntity(diameterRAName);

   ctx.log.info("Starting deployment of diameterra...#4");

   resourceAdaptorMBean.createEntityLink(diameterRAName, diameterRAName);
   

   ctx.log.info("Finished deployment of diameterra! SUCCESS!!!");
   
  } catch (Exception e) {
    ctx.log.info("Exception while starting deployment of diameter services!", e);
  }
}

/**
 * Deactivate and uninstall components in the reverse order of start()
 */
void stop()
{
  try {
   
   ctx.log.info("Undeploying diameterra...");

   resourceAdaptorMBean.removeEntityLink(diameterRAName);
   ctx.log.info("Undeploying diameterra... #2");

   resourceAdaptorMBean.deactivateResourceAdaptorEntity(diameterRAName);
   ctx.log.info("Undeploying diameterra... #3");

   resourceAdaptorMBean.removeResourceAdaptorEntity(diameterRAName);
   ctx.log.info("Undeploying diameterra... #4");

   sleeDeploymentMBean.uninstall(diameterRADID); 
   ctx.log.info("Undeploying diameterra... #5");

   sleeDeploymentMBean.uninstall(diameterRATypeDID); 
   ctx.log.info("Undeploying diameterra... #6");

   ctx.log.info("UNDEPLOYED diameterra!");

  } catch (Exception e) {
    ctx.log.info("Exception while undeploying DiameterRA!", e);
  }
}



/*************************************************************
 * The rest of the script should be rarely modified.
 *************************************************************/


void create()
{
     ctx.log.debug("Creating  services deployer...");
     
     server = global.ctx.getServer();

     ObjectName sleeMgmt = new ObjectName(sleeManagementMBeanName);

     sleeManagementMBean = (SleeManagementMBeanImplMBean)
      	MBeanProxyExt.create(SleeManagementMBeanImplMBean.class,
   	         	sleeMgmt, server);

      sleeDeploymentMBean = (DeploymentMBean)
      	 MBeanProxyExt.create(DeploymentMBean.class,
      	         	sleeManagementMBean.getDeploymentMBean(), server);
      
      resourceAdaptorMBean  = (ResourceAdaptorMBean)
         MBeanProxyExt.create(ResourceAdaptorMBean.class,
                 sleeManagementMBean.getResourceAdaptorMBean(), server);

     ctx.log.debug("Creating diameter services deployer...- resourceAdaptorMBean " + resourceAdaptorMBean);
      
      serviceManagementMBean = (ServiceManagementMBean)
         MBeanProxyExt.create(ServiceManagementMBean.class,
                 sleeManagementMBean.getServiceManagementMBean(), server);

     ctx.log.info("Created successfully diameter services deployer!");
}

void destroy()
{
}


   /**
    * Returns the deployed SLEE jars.
    *
    */
   public Iterator getDeployedApplications()
   {
      return deployments.values().iterator();
   }

void setCtx(ServiceMBeanSupport wrapper)
{
   global.ctx = wrapper;
   System.out.println("setCtx: "+ctx);
}


/**
 * script variables
 */

ServiceMBeanSupport ctx = null;

/** reference to the standard SLEE deployment MBean */
private DeploymentMBean sleeDeploymentMBean;

/** reference to the SLEE Resource Adaptor MBean */
private ResourceAdaptorMBean  resourceAdaptorMBean;

/** A map of current deployments. */
private ArrayList deployments = new ArrayList();

/** reference to the Mobicents SLEE Management MBean */
private SleeManagementMBeanImplMBean sleeManagementMBean;

private ServiceManagementMBean serviceManagementMBean;

MBeanServer server;


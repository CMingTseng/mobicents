<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd" []>
<section>
  <title>Mobicents Diameter Base</title>
  <para>The Base RA  provides the Base application layer to SLEE, and base factories to resource adaptors in other applications. Therefore Base is a dependency for any other Diameter resource adaptor.</para>
  <para>The  Base RA is responsible for managing the connection between peers and provides basic authentication, accounting, and session management. Diameter Base can be extended to function with other applications because its factories provide methods for creating  raw messages and AVPs.  In order for the application to be compliant with the specification, state machines should be implemented at some level within the implementation.</para>
  <para>Diameter Base provides a number of message commands that can be used within the application.  </para>
  <table frame="all" pgwide="1">
    <title>Diameter Messages</title>
    <tgroup cols="4" colsep="1">
      <colspec colname="c1"/>
      <colspec colname="c2"/>
      <colspec colname="c3"/>
      <colspec colname="c4"/>
      <thead>
        <row>
          <entry>Command Name</entry>
          <entry>Class</entry>
          <entry>Abbreviation</entry>
          <entry>Code</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>Abort-Session-Request</entry>
          <entry>Session Management</entry>
          <entry>ASR</entry>
          <entry>274</entry>
        </row>
        <row>
          <entry>Abort-Session-Answer</entry>
          <entry>Session Management</entry>
          <entry>ASA</entry>
          <entry>274</entry>
        </row>
        <row>
          <entry>Accounting-Request</entry>
          <entry>Accounting </entry>
          <entry>ACR</entry>
          <entry>271</entry>
        </row>
        <row>
          <entry>Accounting-Answer</entry>
          <entry>Accounting </entry>
          <entry>ACA</entry>
          <entry>271</entry>
        </row>
        <row>
          <entry>Capabilities-Exchange-Request</entry>
          <entry>Peer Management</entry>
          <entry>CER</entry>
          <entry>257</entry>
        </row>
        <row>
          <entry>Capabilities-Exchange-Answer</entry>
          <entry>Peer Management</entry>
          <entry>CEA</entry>
          <entry>257</entry>
        </row>
        <row>
          <entry>Device-Watchdog-Request</entry>
          <entry>Peer Management</entry>
          <entry>DWR</entry>
          <entry>280</entry>
        </row>
        <row>
          <entry>Device-Watchdog-Answer</entry>
          <entry>Peer Management</entry>
          <entry>DWA</entry>
          <entry>280</entry>
        </row>
        <row>
          <entry>Disconnect-Peer-Request</entry>
          <entry>Peer Management</entry>
          <entry>DPR</entry>
          <entry>282</entry>
        </row>
        <row>
          <entry>Disconnect-Peer-Answer</entry>
          <entry>Peer Management</entry>
          <entry>DPA</entry>
          <entry>282</entry>
        </row>
        <row>
          <entry>Re-Auth-Request</entry>
          <entry>Authentication</entry>
          <entry>RAR</entry>
          <entry>258</entry>
        </row>
        <row>
          <entry>Re-Auth-Answer</entry>
          <entry>Authentication</entry>
          <entry>RAA</entry>
          <entry>258</entry>
        </row>
        <row>
          <entry>Session-Termination-Request</entry>
          <entry>Session Management</entry>
          <entry>STR</entry>
          <entry>275</entry>
        </row>
        <row>
          <entry>Session-Termination-Answer</entry>
          <entry>Session Management</entry>
          <entry>STA</entry>
          <entry>275</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
  <section>
    <title>Configuration</title>
    <para>Base RA entity supports four configuration properties that must be correctly configured before  the RA can fucntion correctly.      Properties are grouped in pairs, and each property contains a comma separated list of values (of type long).</para>
    <para>The following property pairs are available for the Base RA:</para>
    <para><itemizedlist>
        <listitem>
          <para><literal>authVendorIds</literal> and <literal>authAppIds</literal></para>
        </listitem>
        <listitem>
          <para><literal>acctVendorIds</literal> and <literal>acctAppIds</literal></para>
        </listitem>
      </itemizedlist></para>
    <para>The configuration property pairs can be configured using the following methods:</para>
    <itemizedlist>
      <listitem>
        <para>Using Java XML Mapping (JXM) operations, available through the Management Console.</para>
      </listitem>
      <listitem>
        <para>Manually declaring the property pairs in the  <filename>resource-adaptor-jar.xml</filename> file within the <filename>base-ra-<replaceable>[version]</replaceable>-DU.jar</filename>, <filename>base-ra-<replaceable>[version]</replaceable>.jar</filename>, or <filename>META-INF</filename> files.</para>
      </listitem>
    </itemizedlist>
    <para>Regardless of the configuration method used, the length of the property pairs must be equal.  For example, <literal>acctVendorIds.split(&quot;,).length == acctAppIds.split(&quot;,&quot;).length</literal>.  The application vendor ID and application ID are matched based on index of occurance.  For example, <literal>ApplicationId(acctVendorIds[index],acctAppIds[index])</literal>.  If no vendor is specified, the value must be set to <literal>0</literal>.</para>
    <example>
      <title>Configuring </title>
      <para>The following XML sample demonstrates how to configure an authentication application and two accounting applications in the <filename>resource-adaptor-jar.xml</filename>.  Note that each configuration property pair contains an equal value pair length.</para>
      <programlisting role="XML">&lt;config-property&gt;
    &lt;config-property-name&gt;authVendorIds&lt;/config-property-name&gt;
    &lt;config-property-type&gt;java.lang.String&lt;/config-property-type&gt;
    &lt;config-property-value&gt;0&lt;/config-property-value&gt;
&lt;/config-property&gt;
&lt;config-property&gt;
    &lt;config-property-name&gt;authAppIds&lt;/config-property-name&gt;
    &lt;config-property-type&gt;java.lang.String&lt;/config-property-type&gt;
    &lt;config-property-value&gt;4&lt;/config-property-value&gt;
&lt;/config-property&gt;
&lt;config-property&gt;
    &lt;config-property-name&gt;acctVendorIds&lt;/config-property-name&gt;
    &lt;config-property-type&gt;java.lang.String&lt;/config-property-type&gt;
    &lt;config-property-value&gt;193,14&lt;/config-property-value&gt;
&lt;/config-property&gt;
&lt;config-property&gt;
    &lt;config-property-name&gt;acctAppIds&lt;/config-property-name&gt;
    &lt;config-property-type&gt;java.lang.String&lt;/config-property-type&gt;
    &lt;config-property-value&gt;19302,15&lt;/config-property-value&gt;
&lt;/config-property&gt;</programlisting>
    </example>
  </section>
  <section>
    <title>Resource Adapter Type</title>
    <para>The resource adapter  provides the following types:</para>
    <itemizedlist>
      <listitem>
        <para>Activities</para>
      </listitem>
      <listitem>
        <para>Provider</para>
      </listitem>
      <listitem>
        <para>Message Factory</para>
      </listitem>
    </itemizedlist>
    <formalpara>
      <title>Activities</title>
      <para>The following activities are available, with the API definition listed for reference.  The API defines methods to easily create and send answers and requests for a certain activity, in addition to retrieving session-specific data.  </para>
    </formalpara>
    <para>The lifecycle of an activity depends on the type of received request and the application interaction.  In the case of a subscription activity, the activity  timeout is taken into consideration because the subscription may be time-based.</para>
    <variablelist>
      <title>Diameter Base Activities</title>
      <varlistentry>
        <term>AccountingClientSessionActivity</term>
        <listitem>
          <para>Client accounting activity, which is created for each ACR request.  The activity ends when an answer is received, or the request times out.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <programlisting role="JAVA">package net.java.slee.resource.diameter.base;

import java.io.IOException;

import net.java.slee.resource.diameter.base.events.AccountingRequest;

public interface AccountingClientSessionActivity extends
                AccountingSessionActivity {

        /**
         * Send Account Request to Server
         * @param request
         * @throws IOException 
         */
         void   sendAccountRequest(AccountingRequest request) throws IOException;        
}
</programlisting>
    <variablelist>
      <varlistentry>
        <term>AuthClientSessionActivity</term>
        <listitem>
          <para>Client authorization activity, which is created for each RAR request.  The activity ends when an answer is received, or the request times out.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <programlisting role="JAVA">package net.java.slee.resource.diameter.base;

import java.io.IOException;

import net.java.slee.resource.diameter.base.events.AbortSessionAnswer;
import net.java.slee.resource.diameter.base.events.DiameterMessage;
import net.java.slee.resource.diameter.base.events.ReAuthAnswer;
import net.java.slee.resource.diameter.base.events.SessionTerminationRequest;

public interface AuthClientSessionActivity extends AuthSessionActivity{

        /**
         * Send abort session answer to server
         *
         * @param answer
         * @throws IOException
         */
        void sendAbortSessionAnswer(AbortSessionAnswer answer) throws IOException;

        /**
         * Send authentication session request to server FIXME: baranowb; whats
         * this?
         *
         * @param request
         * @throws IOException
         */
        void sendAuthRequest(DiameterMessage request) throws IOException;

        /**
         * Send re-authentication session answer to server
         *
         * @param answer
         * @throws IOException
         */
        void sendReAuthAnswer(ReAuthAnswer answer) throws IOException;

        /**
         * Send session termination request to server
         *
         * @param request
         * @throws IOException
         */
        void sendSessionTerminationRequest(SessionTerminationRequest request) throws IOException;
       
}

</programlisting>
    <variablelist>
      <varlistentry>
        <term>AccountingServerSessionActivity</term>
        <listitem>
          <para>Server accounting activity, which is created for eash ACR request.  The activity ends when  an answer is sent, or the request times out.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <programlisting role="JAVA">package net.java.slee.resource.diameter.base;

import java.io.IOException;

import net.java.slee.resource.diameter.base.events.AccountingAnswer;

public interface AccountingServerSessionActivity extends
                AccountingSessionActivity {

        /**
         * Sends generated answer back to client
         * @param answer
         * @throws IOException
         */
        void sendAccountAnswer(AccountingAnswer answer) throws IOException;

        
}</programlisting>
    <variablelist>
      <varlistentry>
        <term>AuthServerSessionActivity</term>
        <listitem>
          <para>Server authorization activity, which is created for each RAR request. The activity ends when  an answer is sent, or the request times out.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <programlisting role="JAVA">package net.java.slee.resource.diameter.base;

import java.io.IOException;

import net.java.slee.resource.diameter.base.events.AbortSessionRequest;
import net.java.slee.resource.diameter.base.events.DiameterMessage;
import net.java.slee.resource.diameter.base.events.ReAuthRequest;
import net.java.slee.resource.diameter.base.events.SessionTerminationAnswer;

public interface AuthServerSessionActivity extends AuthSessionActivity {

        /**
         * Send session abort session request to client
         * 
         * @param request
         * @throws IOException 
         */
        void sendAbortSessionRequest(AbortSessionRequest request) throws IOException;

        /**
         * Send authenticate answer to client
         * 
         * @param answer
         * @throws IOException 
         */
        void sendAuthAnswer(DiameterMessage answer) throws IOException;

        /**
         * Send re-authenticate request to client
         * 
         * @param request
         * @throws IOException 
         */
        void sendReAuthRequest(ReAuthRequest request) throws IOException;

        /**
         * Send session termination answer to client
         * 
         * @param request
         * @throws IOException 
         */
        void sendSessionTerminationAnswer(SessionTerminationAnswer request) throws IOException;

}</programlisting>
    <formalpara>
      <title>Provider</title>
      <para>Provider defines the basic features that must be supported by all other providers.   Service Building Blocks (SBBs)  create activities on demand and retrieve AVP and message factories.   The connection information is retrieved from the connected peers.</para>
    </formalpara>
<!--JLM - I was going to include the API directly in the documentation, but the API is over 300 lines which would break the publish, or look really bad.  If you want to include the API, then you may want to break up the program listing into logical chunks.  -->    <para>The API for the DiameterProvider is more than 100 lines, and therefore can not be  included directly for reference.  To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/base/ratype/src/main/java/net/java/slee/resource/diameter/base/DiameterProvider.java">DiameterProvider.java in the source code</ulink>.</para>
    <formalpara>
      <title>Message Factory</title>
      <para>The Message Factory creates events  that can be executed within the JAIN SLEE Server.  Depending on the situation, Message Factory completes some AVPs for the session using the information made available to it.</para>
    </formalpara>
    <para>The API for the DiameterMessageFactory is more than 300 lines, and therefore can not be  included directly for reference.  To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/base/ratype/src/main/java/net/java/slee/resource/diameter/base/DiameterMessageFactory.java">DiameterMessageFactory.java in the source code</ulink>.</para>
  </section>
  <section>
    <title>API Usage Examples</title>
    <para>The following examples demonstrate basic usage examples for the Resource Adapter (RA) API.  </para>
    <example>
      <title>Send ACR</title>
      <para>The following code demonstrates how to configure a Send ACR.</para>
      <programlisting role="JAVA">AccountingClientSessionActivity activity = 
 provider.createAccountingActivity();

List&lt;DiameterAvp&gt; avps = new ArrayList&lt;DiameterAvp&gt;();

avps.add(avpFactory.createAvp(Avp.SESSION_ID,
 activity.getSessionId().getBytes()));

DiameterAvp avpVendorId = avpFactory.createAvp(Avp.VENDOR_ID, 193);

DiameterAvp avpAcctApplicationId = avpFactory.createAvp(Avp.
 ACCT_APPLICATION_ID, 19302);

avps.add(avpFactory.createAvp(Avp.VENDOR_SPECIFIC_APPLICATION_ID, 
 new DiameterAvp[] { avpVendorId, avpAcctApplicationId }));

avps.add(avpFactory.createAvp(Avp.ORIGIN_HOST,
 &quot;aaa://127.0.0.1:1812&quot;.getBytes()));

avps.add(avpFactory.createAvp(Avp.ORIGIN_REALM,
 &quot;mobicents.org&quot;.getBytes()));

avps.add(avpFactory.createAvp(Avp.DESTINATION_HOST,
 &quot;aaa://127.0.0.1:21812&quot;.getBytes()));
            
avps.add(avpFactory.createAvp(Avp.DESTINATION_REALM,
 &quot;mobicents.org&quot;.getBytes()));

// Subscription ID
DiameterAvp subscriptionIdType = avpFactory.createAvp(193, 555, 0);
 DiameterAvp subscriptionIdData = avpFactory.createAvp(193, 554, 
 &quot;00001000&quot;);
            
avps.add(avpFactory.createAvp(193, 553, new DiameterAvp[] {
 subscriptionIdType, subscriptionIdData }));

// Requested Service Unit
DiameterAvp unitType = avpFactory.createAvp(193, 611, 2);

DiameterAvp valueDigits = avpFactory.createAvp(193, 617, 10L);

DiameterAvp unitValue = avpFactory.createAvp(193, 612, 
 new DiameterAvp[] { valueDigits });
            
avps.add(avpFactory.createAvp(193, 606, new DiameterAvp[] { unitType, unitValue }));

// Record Number and Type
avps.add(avpFactory.createAvp(Avp.ACC_RECORD_NUMBER, 0));

avps.add(avpFactory.createAvp(Avp.ACC_RECORD_TYPE, 1));

// Requested action
avps.add(avpFactory.createAvp(193, 615, 0));

// Service Parameter Type
DiameterAvp serviceParameterType = avpFactory.createAvp(193, 608, 0);

DiameterAvp serviceParameterValue = avpFactory.createAvp(193, 609, &quot;510&quot;);

avps.add(avpFactory.createAvp(193, 607, new DiameterAvp[] {
 serviceParameterType, serviceParameterValue }));

// Service Parameter Type
DiameterAvp serviceParameterType2 = avpFactory.createAvp(193, 608, 14);

DiameterAvp serviceParameterValue2 = avpFactory.createAvp(193, 609, &quot;20&quot;);

avps.add(avpFactory.createAvp(193, 607, new DiameterAvp[] {
 serviceParameterType2, serviceParameterValue2 }));

DiameterAvp[] avpArray = new DiameterAvp[avps.size()];

avpArray = avps.toArray(avpArray);
   if (logger.isInfoEnabled())
       logger.info(&quot;Creating Custom Message...&quot;);

   AccountingRequest ms = messageFactory.createAccountingRequest
    (avpArray);
   if (logger.isInfoEnabled()) {
       logger.info(&quot;Created Custom Message[&quot; + ms + &quot;]&quot;);
       logger.info(&quot;Sending Custom Message...&quot;);
       }
           
//setters examples
ms.setUserName(&quot;sip:xxx@overrideusername.com&quot;);
           
activity.sendAccountRequest(ms);
   if (logger.isInfoEnabled())
       logger.info(&quot;Sent Custom Message[&quot; + ms + &quot;]&quot;);</programlisting>
    </example>
    <example>
      <title>Receive ACR</title>
      <para>The following code demonstrates how to configure a Receive ACR.</para>
      <programlisting role="JAVA">public void onAccountingRequest(net.java.slee.resource.
 diameter.base.events.AccountingRequest acr, 
 ActivityContextInterface aci) {
   long start = System.currentTimeMillis();
    if (logger.isInfoEnabled())
        logger.info(&quot;Accounting-Request received. [&quot; + acr + &quot;]&quot;);
        if (aci.getActivity() instanceof 
         AccountingServerSessionActivityImpl) {
            AccountingServerSessionActivityImpl assa = 
             (AccountingServerSessionActivityImpl) aci.getActivity();

            AccountingAnswer ans = assa.createAccountAnswer(acr,
             ResultCode.SUCCESS);
               if (logger.isInfoEnabled())
                   logger.info(&quot;Sending Accounting-Answer [&quot; + ans + &quot;]&quot;);

            assa.sendAccountAnswer(ans);
               if (logger.isInfoEnabled())
        logger.info(&quot;Accounting-Answer sent.&quot;);
    }
}</programlisting>
    </example>
  </section>
  <section>
    <title>Examples</title>
    <para>The sample application provided for Diameter Base is a simple application that interacts with the Ericsson Diameter Software Development Kit (SDK).  The application provides both client and server interaction.  The following use cases are provided as part of the example:</para>
    <itemizedlist>
      <listitem>
        <para>Application acting as a client</para>
      </listitem>
      <listitem>
        <para>Application acting as a server</para>
      </listitem>
      <listitem>
        <para>Application acting as a relay or proxy.</para>
      </listitem>
    </itemizedlist>
    <formalpara>
      <title>Application acting as a client</title>
      <para>In this example, the application acts as a Diameter Accounting Client, which issues a Debit or Refund request to the Ericsson Diameter Server (EDS).  If the message is correctly built, the server will send an answer back to the application stating that the operation was executed correctly.  If the message is incorrectly built, the EDS sends an error message back to the application.</para>
    </formalpara>
    <para>The message flow for the client application is described in <xref linkend="figure-Client_Application_Message_Flow"/></para>
    <figure id="figure-Client_Application_Message_Flow">
      <title>Client Application Message Flow</title>
      <mediaobject>
        <imageobject>
          <imagedata format="JPG" fileref="images/dia-BaseExamples-dia-AppActingAsClient.jpg"/>
        </imageobject>
      </mediaobject>
    </figure>
    <formalpara>
      <title>Application acting as a server</title>
      <para>In this example, the Ericsson SDK acts as the client and the application Service Building Block (SBB) acts as the server. When the request is received from the client, the SBB checks a pre-loaded set of user data and verifies the user exists, and that there is sufficient credit to complete the debit request.  </para>
    </formalpara>
    <para>If both requirements are met, the SBB sends a response with a  2001 (SUCCESS) Credit-Control-Answer message.  If one or all conditions are not met, the appropriate error code  is returned:</para>
    <itemizedlist>
      <listitem>
        <para>No user name match: 5421 (USER_NOT_FOUND)</para>
      </listitem>
      <listitem>
        <para>Not enough credit to complete the transaction: 4241 (INSUFFICIENT_BALANCE).</para>
      </listitem>
    </itemizedlist>
    <para>The message flow for the server application is described in <xref linkend="figure-Server_Application_Message_Flow"/></para>
    <figure id="figure-Server_Application_Message_Flow">
      <title>Server Application Message Flow</title>
      <mediaobject>
        <imageobject>
          <imagedata format="JPG" fileref="images/dia-BaseExamples-dia-AppActingAsServer.jpg"/>
        </imageobject>
      </mediaobject>
    </figure>
    <formalpara>
      <title>Application acting as a relay or proxy</title>
      <para>In this example, the application plays the role of a proxy or relay, and handles request and answer message proxying.  Both the Ericsson Client and Server SDK are used in this example.  The example requires the most configuration of all examples:</para>
    </formalpara>
    <itemizedlist>
      <listitem>
        <para>Ericsson client SDK is connected as a client to Mobicents Diameter through the Diameter Base RA.</para>
      </listitem>
      <listitem>
        <para>Ericsson server SDK is connected as a server to Mobicents Diameter through the Diameter SBB.</para>
      </listitem>
      <listitem>
        <para>Diameter SBB is configured as a proxy.</para>
      </listitem>
    </itemizedlist>
    <para>The Ericsson Client SDK is used to establish the connection to the Ericsson Server SDK behind the Diameter SBB.  In the example, requests received by the SBB are forwarded to the Server SDK, and answers are routed back to the Client SDK.</para>
    <section>
      <title>Configuration</title>
      <para>To configure the examples, changest must be made to the <filename>example.properties</filename> file in the <filename>/du/main/resources</filename> directory.</para>
    </section>
  </section>
</section>

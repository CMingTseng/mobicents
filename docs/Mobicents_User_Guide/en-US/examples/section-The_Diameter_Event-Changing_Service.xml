<?xml version='1.0'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<section
	id="section-The_Diameter_Event-Changing_Service">
	<title>The Diameter Event-Changing Service</title>
	<para>The Diameter Event-Changing Service is based on the Location Service, which performs call-charging at a fixed rate. Upon the initiation of a call, a debit of €10.00 occurs. In the cases of a call being rejected or the caller disconnecting (hanging up) before an answer is received, the caller's account is refunded.</para>
	<para>Note that an MSS for JBoss installation is required to run this example; it will not work with MSS for Tomcat.</para>
	<para>Provided here is a step-by-step description of the procedure as performed by the application and container:</para>
	<procedure
		id="procedure-Diameter_Event-Changing_Service_Step-By-Step">
		<title>Diameter Event-Changing Service Step-By-Step</title>
		<step>
			<!--* Alice makes a call to sip:receiver@sip-servlets.com. The INVITE is received by the servlet container which sends the debit request to the Charging Server and invokes the location service-->
			<para>A user, Alice, makes a call to <literal>sip:receiver@sip-servlets.com</literal>. The <literal>INVITE</literal> is received by the servlet container, which sends a request to debit Alice's account to the Charging Server. The servlet container then invokes the location service.</para>
		</step>
		<step>
			  <!--* The location service determines, using non-SIP means, where the callee (receiver) is registered with two locations, identified by, say, two SIP URIs (sip:receiver@127.0.0.1:5090 and sip:receiver@127.0.0.1:6090).-->
			<para>the Location Service determines, without using the SIP protocol itself, where the callee&#8212;or receiver&#8212;is registered. The callee may be registered at two locations identified by two SIP URIs: <literal>sip:receiver@127.0.0.1:5090</literal> and <literal>sip:receiver@127.0.0.1:6090</literal>.</para>
		</step>
		<step>
			<!--* The service proxies to those two destinations in parallel, without record-routing, and without the supervised mode.-->
			<para>The Location Service proxies to those two destinations simultaneously, without record-routing and without using supervised mode.</para>
		</step>
		<step>
			<!--* Once one of the destinations return 200 (OK), the other branch is cancelled by the container.-->
			<para>One of the destinations returns <literal>200 (OK)</literal>, and so the container cancels the other.</para>
		</step>
		<step>
			<!--* The 200 is forwarded upstream to Alice and the call setup is completed as per usual.-->
			<para>The <literal>200 (OK)</literal> is forwarded upstream to Alice and the call setup is carried out as usual.</para>
		</step>
		<step>
			<!--* If none of the destinations accepts the call, a Diameter Accounting-Request for refund is sent to the Diameter Charging Server in order to credit the 10.0 euros debited.-->
			<para>If neither or none of the registered destinations accepts the call, a Diameter Accounting-Request for refund is sent to the Diameter Charging Server in order to debit the already-credited €10.00</para>
		</step>
	</procedure>

	<!-- Diameter Event-Changing Service -->
	<section
		id="section-binary-Diameter_Event-Changing_Service--Installing_Configuring_and_Running">
		<title>Diameter Event-Changing Service: Installing, Configuring and Running</title>
		<para>Preparing your MSS for JBoss server to run the Diameter Event-Changing example requires downloading a WAR archive, a DAR archive, the Ericsson Charging Emulator, setting an attribute in JBoss's <filename>server.xml</filename> configuration file, and then running JBoss AS. Detailed instructions follow.</para>
		<formalpara
			id="formalpara-binary-Diameter_Event-Changing_Service-Pre-Install_Requirements_and_Prerequisites">
			<title>Pre-Install Requirements and Prerequisites</title>
			<para></para>
		</formalpara>
		<!-- <variablelist
			id="variablelist-binary-Diameter_Event-Changing_Service-Hardware_Requirements">
			<title>Hardware Requirements</title>
			<varlistentry>
				<term>Sufficient Disk Space</term>
				<listitem>
					<para></para>
				</listitem>
			</varlistentry>
		</variablelist> -->
		<variablelist
			id="variablelist-binary-Diameter_Event-Changing_Service-Software_Prerequisites">
			<title>Software Prerequisites</title>
			<varlistentry>
				<term>One MSS for JBoss Installation</term>
				<listitem>
					<para>Before proceeding, you should follow the instructions for installing, configuring, running and testing MSS for JBoss from the binary distribution.</para>
					<important
						id="important-Install_MSS_for_JBoss_0.7_or_Later">
						<title>Install MSS for JBoss 0.7 or Later!</title>
						<para>Only MSS for JBoss version 0.7 or later bundles the Diameter JBoss Service (the Diameter SAR, or Servlet ARchive), which is required to run the Diameter Event-Changing service.</para>
					</important>
					<itemizedlist>
						<listitem>
							<xref
								linkend="section-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running"/>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
		</variablelist>
		<formalpara
			id="formalpara-binary-Diameter_Event-Changing_Service-Downloading">
			<title>Downloading</title>
			<para></para>
		</formalpara>
		<procedure>
			<step>
				<para>First, download the Web Application Archive (<acronym>WAR</acronym>) file corresponding to this example, the current version of which is named <filename>diameter-event-charging-1.0.war</filename>, from <ulink
						url="http://repository.jboss.org/maven2/org/mobicents/servlet/sip/example/diameter-event-charging/1.0/"/>.</para>
			</step>
			<step>
				<para>Secondly, download the corresponding Disk ARchive (<acronym>DAR</acronym>) configuration file here: <filename></filename>, from <ulink
						url="http://www.mobicents.org/diametereventcharging-dar.properties"/>.</para>
			</step>
			<step>
				<para>Finally, you will need to download the Ericsson Charging Emulator, version 1.0, from <ulink
						url="http://www.ericsson.com/mobilityworld/developerszonedown/downloads/tools/charging_solutions/ChargingSDK-1_0_D31E.zip"/>.</para>
			</step>
		</procedure>
		<formalpara
			id="formalpara-binary-Diameter_Event-Changing_Service-Installing">
			<title>Installing</title>
			<para></para>
		</formalpara>
		<procedure>
			<step>
				<para>Place the <filename>diameter-event-charging-1.0.war</filename> WAR archive into the <filename>jboss_home/server/&lt;profile&gt;/deploy</filename> directory, where <filename>&lt;deploy&gt;</filename> is your Configuration Profile, whether <quote>default</quote> or <quote>all</quote> (the latter if you are using MSS for JBoss's clustering capabilities).</para>
			</step>
			<step>
				<para>Place the <filename>diametereventcharging-dar.properties</filename> DAR file in your <filename><envar>$JBOSS_HOME</envar>/server/&lt;profile&gt;/conf/dars</filename> directory.</para>
			</step>
			<step>
				<para>Finally, open the terminal, move into the directory to which you downloaded the Ericsson Charging SDK (for the sake of this example, we will call this directory <filename>charging_sdk</filename>), and then unzip the downloaded zip file (you can use Java's <command>jar <option>-xvf</option>
					</command> command for this:</para>
				<screen>~]$ cd charging_sdk
charging_sdk]$ jar -xvf ChargingSDK-1_0_D31E.zip</screen>
				<para>Alternatively, you can use Linux's <command>unzip</command> command to do the dirty work:</para>
				<screen>charging_sdk]$ unzip ChargingSDK-1_0_D31E.zip</screen>
			</step>
		</procedure>
		<formalpara
			id="formalpara-binary-Diameter_Event-Changing_Service-Configuring">
			<title>Configuring</title>
			<para>To configure the server for the Event-Changing example, simply open the <filename>server.xml</filename> configuration file in your server's <filename><envar>$JBOSS_HOME</envar>/server/&lt;profile&gt;/deploy/jboss-web.deployer/</filename> directory, and edit the value of the <literal>darConfigurationFileLocation</literal> attribute of the <literal>Service</literal> element so that it is <quote><literal>conf/dars/mobicents-dar.properties</literal>
				</quote>. For example:</para>
		</formalpara>
		<example
			id="example-Editing_the_darConfigurationFileLocation_Attribute_of_the_Service_Tag">
			<title>Editing the <literal>darConfigurationFileLocation</literal> Attribute of the Service Tag</title>
			<programlisting
				id="proglist-Editing_the_darConfigurationFileLocation_Attribute_of_the_Service_Tag"
				linenumbering="numbered"
				role="XML">...

&lt;Service name=&quot;jboss.web&quot; 
      className=&quot;org.mobicents.servlet.sip.startup.SipStandardService&quot; 
  		sipApplicationDispatcherClassName=&quot;org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl&quot;
  		sipApplicationRouterClassName=&quot;org.mobicents.servlet.sip.router.DefaultApplicationRouter&quot;
  		darConfigurationFileLocation=&quot;conf/dars/mobicents-dar.properties&quot;&gt;

...<![CDATA[
]]></programlisting>
		</example>
		<!--<para>Your server is now set up to run the Event-Changing example.</para>-->
		<formalpara
			id="formalpara-binary-Diameter_Event-Changing_Service-Running">
			<title>Running</title>
			<para></para>
		</formalpara>
		<procedure
			id="procedure-Diameter_Event-Changing_Service">
			<title>Diameter Event-Changing Service</title>
			<step>
				<para>First, you should run your MSS for JBoss server. For instructions on doing so, refer to <xref
						linkend="section-binary-SIP_Servlets_Server_with_JBoss-Running"/>.</para>
			</step>
			<step>
				<para>Then, run the Ericsson Charging Emulator. Open a terminal, change the working directory to the location of the unzipped Charging Emulator files (in <filename>ChargingSDK-1_0_D31E</filename> or a similarly-named directory), and run it with the <command>java -jar <filename>PPSDiamEmul.jar</filename>
					</command> command:</para>
				<screen>~]$ java -jar PPSDiamEmul.jar</screen>
			</step>
		</procedure>
		
		<formalpara
			id="formalpara-binary-Diameter_Event-Changing_Service-Using">
			<title>Using</title>
			<para>Using the Event-Changing service means, firstly, inserting some parameters into the Charging Emulator, and then, by using two SIP (soft)phones, calling one with the other. The following sequential instructions show you how.</para>
		</formalpara>
		<tip
			id="tip-SIP_(Soft)Phone?_Which?">
			<title>SIP (Soft)Phone? Which?</title>
			<para>The Mobicents team recommends one of the following SIP phones, and has found that they work well: the 3CX Phone, teh SJ Phone or the WengoPhone.</para>
		</tip>
		<procedure
			id="procedure-Using_the_Diameter_Event-Changing_Service">
			<title>Using the Diameter Event-Changing Service</title>
			<step>
				<title>Configure the Ericsson SDK Charging Emulator</title>
				<para>Once you have started the Charging Emulator, you should configure it exactly as portrayed in the screenshot.</para>
				<mediaobject
					id="mediaobject-ex-DiameterEventChanging-ss-ChargingEmulatorConfig.png">
					<imageobject>
						<imagedata
							align="center"
							fileref="images/ex-DiameterEventChanging-ss-ChargingEmulatorConfig.png"
							format="PNG" />
					</imageobject>
					<caption>
						<para>Configuring the Charging Emulator</para>
					</caption>
				</mediaobject>
				<orderedlist>
					<listitem>
						<para>Set the <literal>Peer Id</literal> to: <userinput>aaa://127.0.0.1:21812</userinput>
						</para>
					</listitem>
					<listitem>
						<para>Set the <literal>Realm</literal> to: <userinput>mobicents.org</userinput>
						</para>
					</listitem>
					<listitem>
						<para>Set the <literal>Host IP</literal> to: <userinput>127.0.0.1</userinput>
						</para>
					</listitem>
				</orderedlist>
			</step>
			<step>
				<para>Start two SIP (soft)phones. You should set the first phone up with the following parameters: <userinput>sip:receiver@sip-servlets</userinput> on IP address <userinput>127.0.0.1</userinput> on port <userinput>5090</userinput>. The other phone can be set up any way you like.</para>
			</step>
			<step>
				<para>Before making a call, open the <menuchoice><guimenu>Config</guimenu>
						<guimenuitem>Options</guimenuitem>
					</menuchoice> dialog window, as shown in the image.</para>
				<mediaobject
					id="mediaobj-ex-DiameterEventChanging-ss-ChargingAccountConfig.png">
					<imageobject>
						<imagedata
							align="center"
							fileref="images/ex-DiameterEventChanging-ss-ChargingAccountConfig.png"
							format="PNG" />
					</imageobject>
					<caption>
						<para>Configuring Accounts in the Charging Emulator</para>
					</caption>
				</mediaobject>
				<!--<para>You can see the user balance in the emulator: in the menu Config > Account > Click on "00001000-Klas Svensson" and watch the balance. Stretch the window down to see the history.</para>-->
				<para>In the <guilabel>Account Configuration</guilabel> window of the Charging Emulator, you can see the user's balances. Select a user to watch the balance. You can also stretch the window lengthwise to view the user's transaction history.</para>
			</step>
			<step>
				<para>Time to call! From the second, <quote>any-configuration</quote> phone, make a call to <literal>sip:receiver@sip-servlets.com</literal>. Upon doing so, the other phone should ring or signal that it is being contacted	.</para>
			</step>
			<step>
			<!--<para>You should see there is one first request, right after the invite and before the other party accept/reject the call, sent to the Charging Emulator, that's when the debit is made. In case the call is rejected, or the caller gives up, there's a new Diameter Request sent which will be the refund of the unused value. In case the call is accepted, nothing else will happen, related to Diameter.</para>-->
				<para>You should be able to see a request&#8212;immediately following the invite and before the other party (i.e. you) accepts or rejects the call&#8212;sent to the Charging Emulator. That is when the debit of the user's account is made. In the case that the call is rejected, or the caller gives up, a second, new Diameter request is sent to refund the initial amount charged by the call. On the other hand, if the call is accepted, nothing else related to Diameter happens, and no second request takes place.</para>
				<para>Please not that this is not the truly-correct way to do charging, as Diameter provides other means, such as unit reservation. However, for the purpose of a demonstration it is sufficient to show the debit and follow-up credit working. Also, this is a fixed-price call, regardless of the duration. Charging can, of course, be configured so that it is time-based.</para>
			</step>
		</procedure>
		<!--<formalpara
			id="formalpara-binary-Diameter_Event-Changing_Service-Stopping">
			<title>Stopping</title>
			<para></para>
		</formalpara>
		<formalpara
			id="formalpara-binary-Diameter_Event-Changing_Service-Testing">
			<title>Testing</title>
			<para></para>
		</formalpara>
		<formalpara
			id="formalpara-binary-Diameter_Event-Changing_Service-Uninstalling">
			<title>Uninstalling</title>
			<para></para>
		</formalpara>-->
	</section>
</section>

package javax.slee.facilities;

import javax.slee.ComponentID;
import javax.slee.UnrecognizedComponentException;

/**
 * The Alarm Facility is used by SBBs (and other components as determined by
 * the SLEE vendor) to generate alarm notifications intended for consumption by
 * management clients external to the SLEE.  For example, a management client
 * such as a network management console or a management policy engine may
 * monitor and act upon alarm notifications generated by the SLEE.  Management
 * clients register interest in receiving alarm notifictions using the
 * SLEE's {@link javax.slee.management.AlarmMBean} object.
 * <p>
 * The Alarm Facility is non-transactional.  The effects of operations invoked on this
 * facility occur immediately regardless of the state or outcome of any enclosing
 * transaction.
 * <p>
 * <dl>
 *   <dt><b>SBB JNDI Location:</b>:
 *   <dd><code>java:comp/env/slee/facilities/alarm</code>
 * </dl>
 *
 * @see javax.slee.management.AlarmMBean
 * @see javax.slee.management.AlarmNotification
 */
public interface AlarmFacility {
    /**
     * Emit an alarm notification containing the specified alarm message.
     * <p>
     * This method is a non-transactional method.
     * @param alarmSource the identifer of the component that is emitting the alarm.
     * @param alarmLevel the level of the alarm.
     * @param alarmType a string denoting the type of the alarm.  Refer to the
     *        SLEE specification for recommended formatting of alarm type strings.
     * @param message the alarm message.
     * @param timeStamp the time (in ms since January 1, 1970 UTC) that the alarm was generated.
     * @throws NullPointerException if any parameter is <code>null</code>.
     * @throws IllegalArgumentException if <code>alarmLevel == </code>{@link Level#OFF}.
     * @throws UnrecognizedComponentException if <code>alarmSource</code> is not a recognizable
     *        <code>ComponentID</code> object for the SLEE or it does not correspond
     *        with a component installed in the SLEE.
     * @throws FacilityException if the alarm could not be generated due to a system-level failure.
     */
    public void createAlarm(ComponentID alarmSource, Level alarmLevel, String alarmType, String message, long timeStamp)
        throws NullPointerException, IllegalArgumentException, UnrecognizedComponentException, FacilityException;

    /**
     * Emit an alarm notification containing the specified alarm message and cause throwable.
     * <p>
     * This method is a non-transactional method.
     * @param alarmSource the identifer of the component that is emitting the alarm.
     * @param alarmLevel the level of the alarm.
     * @param alarmType a string denoting the type of the alarm.  Refer to the
     *        SLEE specification for recommended formatting of alarm type strings.
     * @param message the alarm message.
     * @param cause the reason (if any) this alarm was generated.
     * @param timeStamp the time (in ms since January 1, 1970 UTC) that the alarm was generated.
     * @throws NullPointerException if any parameter is <code>null</code>.
     * @throws IllegalArgumentException if <code>alarmLevel == </code>{@link Level#OFF}.
     * @throws UnrecognizedComponentException if <code>alarmSource</code> is not a recognizable
     *        <code>ComponentID</code> object for the SLEE or it does not correspond
     *        with a component installed in the SLEE.
     * @throws FacilityException if the alarm could not be generated due to a system-level failure.
     */
    public void createAlarm(ComponentID alarmSource, Level alarmLevel, String alarmType, String message, Throwable cause, long timeStamp)
        throws NullPointerException, IllegalArgumentException, UnrecognizedComponentException, FacilityException;
}

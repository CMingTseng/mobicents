<?xml version='1.0'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<section
	id="section-HTTP_Servlet_Resource_Adapter">
	<title>HTTP Servlet Resource Adapter</title>
	<para></para>
	<section
		id="section-Installing_the_HTTP_Servlet_Resource_Adapter">
		<title>Installing the HTTP Servlet Resource Adapter</title>
		<para>The HTTP Servlet resource adapter can be installed by referring to <xref
				linkend="section-Deploying_and_Undeploying_Resource_Adapters"/>.</para>
		<para>Remember to replace <filename><replaceable>&lt;resource_adapter&gt;</replaceable>
			</filename> with the name of the directory in <filename><replaceable>&lt;topmost_mobicents_directory&gt;</replaceable>/resources</filename> corresponding to the HTTP Servlet resource adapter (currently this directory is named <filename><replaceable>http-servlet-ra</replaceable>
			</filename>, but this could change in the future).
		</para>
	</section>
	<section
		id="section-Understanding_the_HTTP_Servlet_Resource_Adapter">
		<title>Understanding the HTTP Servlet Resource Adapter</title>
		<figure
			id="figure-ras-HTTPServlet-HTTPServletRAType.png">
			<title>The Class Diagram for the HTTP Servlet Resource Adapter</title>
			<mediaobject
				id="mediaobj-ras-HTTPServlet-HTTPServletRAType.png">
				<imageobject>
					<imagedata
						align="center"
						fileref="images/ras-HTTPServlet-HTTPServletRAType.png"
						format="PNG" />
				</imageobject>
				<caption>
					<para>HttpSessionActivity is the only activity involved in the HTTP Servlet resource adapter</para>
				</caption>
			</mediaobject>
		</figure>
		<para>
			<literal>HttpSessionActivity</literal> represents the <literal>HttpSession</literal> created from the incoming <literal>javax.servlet.http.HttpServletRequest</literal> received by <literal>HttpServletRaServlet</literal>, which in turn passes it on to HttpServletResourceEntryPoint.</para>
		<para>
			<literal>HttpServletResourceEntryPoint</literal> is the link between the servlet and HttpServletResourceAdaptor. <literal>HttpServletResourceAdaptor</literal> fires the appropriate event like <literal>GET</literal>, <literal>POST</literal>, <literal>PUT</literal>, <literal>DELETE</literal>, etc., depending on the method of <literal>HttpServletRequest</literal>, and the service interested in these events will receive it as initial event. The service will use the HttpServletRequestEvent passed as an argument to an <varname>on<replaceable>something</replaceable>
			</varname> event method to get an <literal>HttpServletResponse</literal> object. A service can add content to the response, modify headers etc. Calling the <function>flushBuffer()</function> function on an <literal>HttpServletResponse</literal> will flush the buffer and the response will be committed.</para>
		<para>The service can explicitly end the <literal>HttpSessionActivity</literal> by calling the <function>invalidate()</function> function on HttpSession. Calling <function>invalidate()</function> will invoke the <function>sessionDestroyed()</function> method of <literal>HttpServletRaSessionListener</literal> by the web container. Within the <function>sessionDestroyed()</function> method, the resource adapter's <function>endHttpSessionActivity()</function> is called to end the activity. If <literal>HttpSession</literal> times out, then it is the responsibility of the container to invoke the <function>sessionDestroyed()</function> function and the above steps in order to end activity.</para>
		<para>
			<literal>HttpServletResourceAdaptor</literal> uses the <function>request.getPathInfo()</function> function to form the web address used to fire the Event:</para>
		<programlisting><![CDATA[//PathInfo can be an empty string and the creation of Address will throw exception
//for empty String hence hardcoding prefix /mobicents
String pathInfo = "/mobicents" + request.getPathInfo();

Address address = new Address(AddressPlan.URI, pathInfo);
sleeEndpoint.fireEvent(ah, event, eventID, address);]]></programlisting>
		<para>SBBs which are interested in events emmitted by <literal>HttpServletResourceAdaptor</literal> should use <programlisting><![CDATA[<initial-event-select variable="Address" />]]></programlisting> for calculating the convergence name, this way we can make sure that URL's submitted to HttpServletResourceAdaptor are mapped to convergence names</para>
		<para>For example:</para>
		<itemizedlist>
			<listitem>
				<para>The URL <literal>URL http://localhost:8080/mobicents/x/y</literal> maps to the convergence name <literal>/mobicents/x/y</literal>.</para>
			</listitem>
			<listitem>
				<para>URL <literal>http://localhost:8080/mobicents/sum/dum</literal> maps to the convergence name <literal>/mobicents/sum/dum</literal>.</para>
			</listitem>
		</itemizedlist>
		<formalpara>
			<title>A Service Building Block Example</title>
			<para>An SBB can be inetersted in any of the HTTP Methods <literal>OPTIONS</literal>, <literal>GET</literal>, <literal>HEAD</literal>, <literal>POST</literal>, <literal>PUT</literal>, <literal>DELETE</literal>, <literal>TRACE</literal>, and for each <literal>HttpMethod</literal>, the resource adapter fires a corresponding event.</para>
		</formalpara>
		<para>The following code is an example of Service Building Block code:</para>
		<programlisting
			linenumbering="numbered"
			role="JAVA">
public void onPost(HttpServletRequestEvent event, ActivityContextInterface aci) {
	try {

		HttpServletResponse response = event.getResponse();
		PrintWriter w = response.getWriter();
		w.print(&quot;onPost OK! Served by SBB = &quot; + getSbbId());
		w.flush();
		response.flushBuffer();
		log
				.info(&quot;HttpServletRAExampleSbb: POST Request received and OK! response sent.&quot;);
	} catch (IOException e) {
		e.printStackTrace();
	}

}

public void onGet(HttpServletRequestEvent event,
		ActivityContextInterface aci) {
	.....
	.....

}

public void onHead(HttpServletRequestEvent event,
		ActivityContextInterface aci) {
	// The HEAD method is identical to GET except that the server MUST NOT
	// return a message-body in the response.
	log.info(&quot;HttpServletRAExampleSbb: HEAD Request received.&quot;);

}

public void onPut(HttpServletRequestEvent event,
		ActivityContextInterface aci) {
	...........

}

public void onDelete(HttpServletRequestEvent event,
		ActivityContextInterface aci) {
	   .............

}

public void onOptions(HttpServletRequestEvent event,
		ActivityContextInterface aci) {
		   .............
}

public void onTrace(HttpServletRequestEvent event,
		ActivityContextInterface aci) {
		   ..............
}</programlisting>
		<example
			id="example-sbb-jar.xml">
			<title>A sample sbb-jar.xml configuration file</title>
<programlisting
				id="proglist-sbb-jar.xml"
				linenumbering="numbered"
				role="XML">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;

&lt;sbb-jar&gt;
    &lt;sbb&gt;
        &lt;description/&gt;
        &lt;sbb-name&gt;HttpServletRAExampleSBB&lt;/sbb-name&gt;
        &lt;sbb-vendor&gt;org.mobicents&lt;/sbb-vendor&gt;
        &lt;sbb-version&gt;1.0&lt;/sbb-version&gt;        
        &lt;sbb-classes&gt;
            &lt;sbb-abstract-class&gt;
                &lt;sbb-abstract-class-name&gt;org.mobicents.slee.service.httpservletra.example.HttpServletRAExampleSbb&lt;/sbb-abstract-class-name&gt;       
                &lt;/sbb-abstract-class&gt;
        &lt;/sbb-classes&gt;
       
        &lt;event initial-event=&quot;True&quot; event-direction=&quot;Receive&quot;&gt;
            &lt;event-name&gt;Post&lt;/event-name&gt;
            &lt;event-type-ref&gt;
                &lt;event-type-name&gt;net.java.slee.resource.http.events.incoming.POST&lt;/event-type-name&gt;
                &lt;event-type-vendor&gt;net.java.slee&lt;/event-type-vendor&gt;
                &lt;event-type-version&gt;1.0&lt;/event-type-version&gt;
            &lt;/event-type-ref&gt;
            &lt;initial-event-select variable=&quot;Address&quot; /&gt;
        &lt;/event&gt;
        
        
        &lt;event initial-event=&quot;True&quot; event-direction=&quot;Receive&quot;&gt;
            &lt;event-name&gt;Get&lt;/event-name&gt;
            ..................
        &lt;/event&gt;

    .....
       ....
     &lt;event-name&gt;Head&lt;/event-name&gt;
    ...
    &lt;event-name&gt;Put&lt;/event-name&gt;
    .....
     ....
 
        &lt;resource-adaptor-type-binding&gt;
            &lt;resource-adaptor-type-ref&gt;
                &lt;resource-adaptor-type-name&gt;HttpServletResourceAdaptorType&lt;/resource-adaptor-type-name&gt;
                &lt;resource-adaptor-type-vendor&gt;org.mobicents&lt;/resource-adaptor-type-vendor&gt;
                &lt;resource-adaptor-type-version&gt;1.0&lt;/resource-adaptor-type-version&gt;
            &lt;/resource-adaptor-type-ref&gt;
            &lt;activity-context-interface-factory-name&gt;
                slee/resources/http-servlet-ra/http-servlet-ra-acif
            &lt;/activity-context-interface-factory-name&gt;
            &lt;resource-adaptor-entity-binding&gt;
                &lt;resource-adaptor-object-name&gt;slee/resources/http-servlet-ra/org.mobicents/1.0.00/http-servlet-ra/factoryprovider&lt;/resource-adaptor-object-name&gt;
                &lt;resource-adaptor-entity-link&gt;HttpServletRA&lt;/resource-adaptor-entity-link&gt;
            &lt;/resource-adaptor-entity-binding&gt;
        &lt;/resource-adaptor-type-binding&gt;
              
    &lt;/sbb&gt;
&lt;/sbb-jar&gt;</programlisting>
</example>
		<para>In order to deploy the HTTP Servlet resource adapter, execute 'ant build-and-deploy-ra' from mobicents/ra/http-servlet-ra folder. Make sure to set the MOBICENTS_HOME and JBOSS_HOME.</para>
		<para>TBD: is this correct? Format and ensure the correctness of these last 2-3 paragraphs</para>
		<para>To execute the test-case, follow the steps in mobicents/ra/http-servlet-ra/tests/build.xml</para>
		<para>There is a working example httpservletra-example to demonstarte the usage of http-servlet-ra. Follow the link to download example https://mobicents-examples.dev.java.net/source/browse/mobicents-examples/httpservletra-example/ and read instructions README.txt to deploy the example</para>
		<para>Note: Http Servlet RA is only for processing incoming HttpServletRequest and sending back the HttpServletResponse. If there is a need to create the Request from within the service make use of Http Client RA.</para>
	</section>
</section>

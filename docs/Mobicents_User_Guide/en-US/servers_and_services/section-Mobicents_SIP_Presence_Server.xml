<?xml version='1.0'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<section
	id="section-Mobicents_SIP_Presence_Server">
	<title>Mobicents SIP Presence Server</title>
	<section
		id="section-Introduction_to_the_SIP_Presence_Server">
		<title>Introduction to the SIP Presence Server</title>
		<para>The Mobicents SIP Presence Server is a free and open source implementation of a SIP Presence Server, as defined by the Internet Engineering Task Force (IETF), the Open Mobile Alliance (OMA), the 3rd Generation Partnership Project (3GPP) and the European Telecommunications Standards Institute (ETSI).</para>
		<para>The SIP Presence Server is an entity that accepts, stores and distributes SIP Presence Information.</para>
	</section>
	<section
		id="section-Configuring_Installing_and_Testing_the_SIP_Presence_Server">
		<title>Configuring, Installing and Testing the SIP Presence Server</title>
		<formalpara>
			<title>Requirements</title>
			<para>The Mobicents SIP Presence Server depends on the Mobicents Converged Application Server and the Mobicents SIP resource adapter, which should be deloyed before starting the SIP Presence Server.</para>
		</formalpara>
		<formalpara>
			<title>Configuration</title>
			<para>The Mobicents SIP Presence Server can be customized in the following aspects before being built.</para>
		</formalpara>
		
		<formalpara>
			<title>Customizing the Presence Server</title>
			<para></para>
		</formalpara>
		<variablelist>
			<varlistentry>
				<term>The Presence Server's Notifiers PresRules AUID</term>
				<listitem>
					<para>The id of the application usage to be used by the Presence Server to retreive the presence rules of a notifier from the XML Document Management Server. You can change the default value (the OMA Presence Rules) by using the <literal>${presence.server.notifier.presrules.auid}</literal> property in the root <filename>pom.xml</filename> before building the server(s).</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>The Presence Server's Notifiers PresRules Document Name</term>
				<listitem>
					<para>The name of the document to be used by the Presence Server to retreive the presence rules of a notifier from the XML Document Management Server. You can change the default value (pres-rules) by using the ${presence.server.notifier.presrules.documentName} property in the root <filename>pom.xml</filename> of this directory before building the server(s).</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>Note that you do not need to touch or configure anything in order to deploy the server.</para>
		<formalpara>
			<title>Installing the Mobicents SIP Presence Server</title>
			<para>TBD (Fix this with proper instructions): Currently, the Mobicents SIP Presence Server can only be installed as integrated with the Mobicents XML Document Management Server, i.e. in an all-in-one SIP Presence Server architecture<footnote
					id="footnote-integrated_presence_server"><para>This limitation is due to the current lack of an external XDM Client SBB component.</para>
				</footnote>.</para>
		</formalpara>
		<important
			id="important-Installing_the_Presence_Server_Also_Installs_the_XDM_Server">
			<title>Installing the SIP Presence Server Also Installs the XDM Server</title>
			<para>You should also make sure that all the install requirements of the Mobicents XDM Server are met before attempting to install the Mobicents SIP Presence Server. See <xref
					linkend="fpara-XDM_Requirements"/>.</para>
		</important>
		
		<!--install-->
		<formalpara>
			<title>Installing the Mobicents XML Document Management Server</title>
			<para>How you install the XDM Server depends on whether you are using the Mobicents binary distribution, or running the source distribution.</para>
		</formalpara>
		<itemizedlist>
			<listitem>
				<formalpara>
					<title>Installing the XDM Server using the Mobicents Binary Distribution</title>
					<para>TBD: (Fix this with proper instructions): Using the binary release, you can install the XDM Server by doing an ant deploy on the <filename>servers/sip-presence/integrated</filename> directory.</para>
				</formalpara>
			</listitem>
			<listitem>
				<formalpara>
					<title>Installing the XDM Server after Building Mobicents from Source</title>
					<para>TBD: (Fix this with proper instructions): From the source code repository, you can install the XDM Server by doing a mvn install on the <filename>/trunk/servers/sip-presence/integrated</filename> directory.</para>
				</formalpara>
			</listitem>
		</itemizedlist>
		
		<!--uninstall-->
		<formalpara>
			<title>Uninstalling the Mobicents XML Document Management Server</title>
			<para>How you uninstall the XDM Server depends on whether you are using the Mobicents binary distribution, or running the source distribution.</para>
		</formalpara>
		<itemizedlist>
			<listitem>
				<formalpara>
					<title>Uninstalling the XDM Server using the Mobicents Binary Distribution</title>
					<para>TBD: (Fix this with proper instructions): Using the binary release, you can uninstall the XDM Server by doing an ant undeploy on the <filename>servers/sip-presence/integrated</filename> directory.</para>
				</formalpara>
			</listitem>
			<listitem>
				<formalpara>
					<title>Uninstalling the XDM Server after Building Mobicents from Source</title>
					<para>TBD: (Fix this with proper instructions): From the source code repository, you can uninstall the XDM Server by doing a mvn clean on the <filename>/trunk/servers/sip-presence/integrated</filename> directory.</para>
				</formalpara>
			</listitem>
		</itemizedlist>
		
		<formalpara>
			<title>Testing the Mobicents SIP Presence Server</title>
			<para>A test framework for the Mobicents SIP Presence Server is forthcoming but not available yet.</para>
		</formalpara>
	</section>
	<section
		id="section-Functional_Architecture_of_the_SIP_Presence_Server">
		<title>Functional Architecture of the SIP Presence Server</title>
		<formalpara>
			<title>Functional Architecture of the Mobicents SIP Presence Server</title>
			<para></para>
		</formalpara>
		<figure
			id="figure-sas-SIPPresenceServer-dia-PSFunctionalArchitecture.jpg">
			<title>The Mobicents SIP Presence Server</title>
			<mediaobject
				id="mediaobj-sas-SIPPresenceServer-dia-PSFunctionalArchitecture.jpg">
				<imageobject>
					<imagedata
						align="center"
						fileref="images/sas-SIPPresenceServer-dia-PSFunctionalArchitecture.jpg"
						format="JPG" />
				</imageobject>
				<caption>
					<para>Functional Diagram of the Mobicents SIP Presence Server</para>
				</caption>
			</mediaobject>
		</figure>
		<para>The SIP Presence Server comprises the following functional elements:</para>
		<variablelist
			id="varlist-The_Functional_Elements_Which_Compose_the_Presence_Server">
			<title>The Functional Elements Which Compose the SIP Presence Server</title>
			<varlistentry>
				<term>Presence Publication Control</term>
				<listitem>
					<para>This functional element manages the publication of presence events, which includes not only the handling of new publications, but also the refreshing, modification or removal of, already-published information.</para>
					<para>Because the presence resource, which is also called a <quote>presentity</quote>, can have multiple publications simultaneously, such as some state published by a user agent or device, and some location data published by a Presence Network Agent (on behalf of the presentity), this element is also responsible for composing all of the different publications for the same resource.</para>
					<para>In some presence networks, it may be of interest to allow resources to have a static presence state, which is stored in the XDM Server. In cases like these, Presence Publication Control may need to interface with the XDM Server to retrieve and subscribe to (learn about changes to) that information, and use it when composing the final presence information document.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Presence Subscription Control</term>
				<listitem>
					<para>This functional element handles subscriptions to presence events or to the list of subscribers (watchers), for any specific resource. It is, of course, responsible for emitting notifications related to those subscriptions.</para>
					<para>Presence authorization rules, which define if a subscription is allowed or rejected and, if allowed, define which transformations to the original presence events are needed, are stored on the XDM Server by the user. Thus, Presence Subscription Control needs to retrieve and subscribe to (learn about changes to) that information.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>XDM Client Control</term>
				<listitem>
					<para>This last element is responsible for interfacing with the XDM Server that manages the user's XML documents, and is related to the main functions of the presence server. It's capable not only of retrieving a document (or part of one), but also of subscribing to either updates of a single, specific document, or to a full collection of documents of a specific type or application.</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<formalpara>
			<title>Implementation Architecture of the Mobicents SIP Presence Server</title>
			<para></para>
		</formalpara>
		<figure
			id="figure-sas-SIPPresenceServer-dia-PSImplementation.jpg">
			<title>Implementation Architecture of the Mobicents SIP Presence Server</title>
			<mediaobject
				id="mediaobj-sas-SIPPresenceServer-dia-PSImplementation.jpg">
				<imageobject>
					<imagedata
						align="center"
						width="700"
						fileref="images/sas-SIPPresenceServer-dia-PSImplementation.jpg"
						format="JPG" />
				</imageobject>
				<caption>
					<para>The Mobicents SIP Presence Server</para>
				</caption>
			</mediaobject>
		</figure>
		<para>The implementation of the Mobicents SIP Presence Server comprises the following functional elements:</para>
		<variablelist
			id="varlist-The_Two_Services_Which_Compose_the_Presence_Server">
			<title>The Two Services Which Compose the SIP Presence Server</title>
			<varlistentry>
				<term>Presence Publication Control Service</term>
				<listitem>
					<para>This JAIN SLEE service includes the root Service Building Block (SBB), <literal>PresencePublicationControlSbb</literal>, which is the implementation of the abstract SIP event <literal>PublicationControlSbb</literal>. It handles publications on the "presence" event package.</para>
					<para>The <literal>PresencePublicationControlSbb</literal> provides the following capabilities:</para>
					<itemizedlist>
						<listitem>
							<para>It provides the logic to authorize a publication; however, it only authorizes <literal>PUBLISH</literal> requests when the request URI matches the PIDF document <quote>entity</quote> attribute.</para>
						</listitem>
						<listitem>
							<para>It provides JAXB unmarshellers to validate and parse the PIDF document for the abstract <literal>PublicationControlSbb</literal>.</para>
						</listitem>
						<listitem>
							<para>It demands that notifying subscribers occur through a child relation to the root SBB of the Presence Subscription Control Service.</para>
						</listitem>
						<listitem>
							<para>Finally, it also provides an <literal>SbbLocalObject</literal> interface that can be used, in JAIN SLEE child relations, to obtain the composed presence information for a specific resource.</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Presence Subscription Control Service.</term>
				<listitem>
					<para>This JAIN SLEE service includes the root SBB <literal>PresenceSubscriptionControlSbb</literal>, which is the implementation of the abstract SIP Event <literal>SubscriptionControlSbb</literal>. It handles subscriptions on the "presence" event package.</para>
					<para>The standout SBB logic item is the usage of presence-rules documents, obtained through the XDM Client SBB child relation, in order to authorize subscriptions and transform the content notified (TBD: feature not used yet). It also defines a child relation to the root SBB of <literal>PresencePublicationService</literal> to retrieve the composed PIDF document for the subscription's notifier.</para>
					<para>The SBB also provides an <literal>SbbLocalObject</literal> interface that can be used, in JAIN SLEE child relations, to make the presence event known to the subscribers of a specific resource.</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>The implementation architecture of the SIP Presence Server also contains client-side components:</para>
		<variablelist>
			<varlistentry>
				<term>Presence Client SBB (TBD: not yet available)</term>
				<listitem>
					<para>The <literal>PresenceClientSBB</literal> is the interface to a JAIN SLEE SBB intended to be used as a client for the Mobicents SIP Presence Server (and other servers compliant with same standards), in JAIN SLEE child relations.</para>
					<para>Two implementations of this interface are provided: the <literal>InternalPresenceClientSBB</literal> that is used with applications running in the Mobicents SIP Presence Server JAIN SLEE container, and the <literal>ExternalPresenceClientSBB</literal>, used with applications running in a different JAIN SLEE container than the Mobicents SIP Presence Server.</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>TBD: This documentation is originally from http://groups.google.com/group/mobicents-public/web/mobicents-sip-presence-server by Eduardo Martins, JBoss R&amp;D.</para>
	</section>
	<section
		id="section-Resources_and_Further_Information_about_the_SIP_Presence_Server">
		<title>Resources and Further Information about the SIP Presence Server</title>
		<para>For further information on the Mobicents SIP Presence Server, see the following list of additional resources:</para>
		<itemizedlist
			id="itemlist-Further_Information_on_the_Mobicents_SIP_Presence_Server">
			<listitem>
				<para>How to Manage the Mobicents SIP Presence Server</para>
			</listitem>
			<listitem>
				<para>Integrating the Mobicents SIP Presence Server into Your JAIN SLEE Applications: Code Snippets for Internal Presence Client SBB Usage.</para>
			</listitem>
			<listitem>
				<para>Integrating the Mobicents SIP Presence Server into Your JAIN SLEE Applications: Code Snippets for External Presence Client SBB Usage.</para>
			</listitem>
			<listitem>
				<para>
					<ulink
						url="http://groups.google.com/group/mobicents-public/web/mobicents-sip-event-components">Mobicents Sip Event Publication and Subscription Control Components</ulink>
				</para>
			</listitem>
		</itemizedlist>
	</section>
</section>


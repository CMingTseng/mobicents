<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "SIP_Servlets_Server_User_Guide.ent">
<!-- NOTES ON CHANGING ENTITY FILES
Important: take care when changing entities for directories
* Linux path separators must be: "/"
* Windows path separators must be: "\"
* Entities which represent directories MUST HAVE a final path separator:
	my/path/  <- (final separator)
If this final separator is missing, then the documentation will be wrong. --><!-- Common entities: same across all books except for BOOKID --><!ENTITY PRODUCT "JBoss Communications Platform">
<!ENTITY BOOKID "SIP_Servlets_Server_User_Guide">
<!ENTITY YEAR "2009">
<!ENTITY HOLDER "Red Hat Inc">
<!-- Shared: Configuring the JBOSS_HOME Environment Variable --><!ENTITY MOB_JBOSS_HOME_LIN "mobicents-all-1.2.1.GA-jboss-4.2.3.GA/jboss/">
<!ENTITY JBCP_JBOSS_HOME_LIN "jboss-eap-4.3/jboss-as/">
<!-- SIP Servlet Server Installation Guide --><!ENTITY SSS_MSS4J_VERSION "1.0.0">
<!ENTITY SSS_MSS4J_SIZE "135 MB">
<!ENTITY SSS_MSS4J_ZIP "mss-1.0.0-jboss-4.2.3.GA-0904211307.zip">
<!ENTITY SSS_MSS4T_VERSION "0.5">
<!ENTITY SSS_MSS4T_SIZE "20 MB">
<!ENTITY SSS_MSS4T_ZIP "mss-1.0.0.GA-apache-tomcat-6.0.14-0904211257.zip">
]>
<book lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><bookinfo id="sssug-SIP_Servlets_Server_User_Guide" lang="en-US">
	<!--  chapter id nickname: sssug  --><title>SIP Servlets Server User Guide</title>
	<subtitle>The Guide to the SIP Servlets v1.1-Certified Server</subtitle>
	<productname>Mobicents Platform</productname>
	<productnumber>1.2.1</productnumber>
	<edition>2.0</edition>
	<pubsnumber>1</pubsnumber>
	<abstract>
		<para><application condition="mob">The Mobicents Platform</application> is the first and only open source <acronym>VoIP</acronym> platform certified for <acronym>JAIN SLEE</acronym> 1.0 and <acronym>SIP</acronym> Servlets 1.1 compliance. <application condition="mob">Mobicents</application> serves as a high-performance core for Service Delivery Platforms (<acronym>SDP</acronym>s) and <acronym>IP</acronym> Multimedia Subsystems (<acronym>IMS</acronym>s) by leveraging <acronym>J2EE</acronym> to enable the convergence of data and video in Next-Generation
Intelligent Network (<acronym>NGIN</acronym>) applications.</para>
			<para>The <application condition="mob">Mobicents Platform</application> enables the composition of predefined Service Building Blocks (<acronym>SBB</acronym>s) such as Call-Control, Billing, User-Provisioning, Administration
and Presence-Sensing. Out-of-the-box monitoring and management of <application condition="mob">Mobicents</application> components is achieved through <acronym>JMX</acronym> Consoles. <acronym>JSLEE</acronym> allows popular protocol stacks such as <acronym>SIP</acronym> to be plugged in as Resource Adapters (<acronym>RA</acronym>s), and Service Building Blocks—which share many similarities with <acronym>EJB</acronym>s—allow the easy accommodation and integration of enterprise
applications with end points such as the Web, Customer Relationship
Management (<acronym>CRM</acronym>) systems and Service-Oriented Architectures (<acronym>SOA</acronym>s). The <application condition="mob">Mobicents Platform</application> is the natural choice for telecommunication Operations Support
Systems (OSSs) and Network Management Systems (NMSs).</para>
				<para>In addition to the telecommunication industry, the <application condition="mob">Mobicents Platform</application> is suitable for a variety of problem domains demanding an
Event-Driven Architecture (<acronym>EDA</acronym>) for high-volume, low-latency signaling, such as financial
trading, online gaming, (<acronym>RFID</acronym>) sensor network integration, and distributed control.</para></abstract>
					<corpauthor>
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="Common_Content/images/title_logo.svg" format="SVG"/>
							</imageobject>
							<textobject>
								<phrase>Logo</phrase>
							</textobject>
						</inlinemediaobject>
					</corpauthor>
					<copyright>
						<year>2009</year>
						<holder>Red Hat Inc</holder>
					</copyright>
					<!-- ORIGINAL:
	<xi:include
		href="Common_Content/Legal_Notice.xml"
		xmlns:xi="http://www.w3.org/2001/XInclude" /> --><!-- FOR JDOCBOOK: --><!-- <xi:include
		xmlns:xi="http://www.w3.org/2001/XInclude"
		href="Common_Content/Legal_Notice.xml">
		<xi:fallback
			xmlns:xi="http://www.w3.org/2001/XInclude">
			<xi:include
				href="fallback_content/Legal_Notice.xml"
				xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>
		</xi:fallback>
	</xi:include> --><authorgroup lang="en-US">
	<author>
		<firstname>Jared</firstname>
		<surname>Morgan</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv>Engineering Content Services</orgdiv>
		</affiliation>
		<email>jmorgan@redhat.com</email>
	</author>
	<author>
		<firstname>Douglas</firstname>
		<surname>Silas</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv>Engineering Content Services</orgdiv>
		</affiliation>
		<email condition="mobicents">dhensley@redhat.com</email>
	</author>
	<author>
		<firstname>Ivelin</firstname>
		<surname>Ivanov</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">ivelin.atanasoff.ivanov@gmail.com</email>
	</author>
	<author>
		<firstname>Vladimir</firstname>
		<surname>Ralev</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">vladimir.ralev@gmail.com</email>
	</author>
	<author>
		<firstname>Eduardo</firstname>
		<surname>Martins</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">emmartins@gmail.com</email>
	</author>
	<author>
		<firstname>Jean</firstname>
		<surname>Deruelle</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">jean.deruelle@gmail.com</email>
	</author>
	<author>
		<firstname>Oleg</firstname>
		<surname>Kulikov</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">oleg.kulikoff@gmail.com</email>
	</author>
	<author>
		<firstname>Amit</firstname>
		<surname>Bhayani</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">amit.bhayani@gmail.com</email>
	</author>
	<author>
		<firstname>Luis</firstname>
		<surname>Barreiro</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">lbbbarreiro@gmail.com</email>
	</author>
	<author>
		<firstname>Alexandre</firstname>
		<surname>Mendonça</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">brainslog@gmail.com</email>
	</author>
	<author>
		<firstname>Bartosz</firstname>
		<surname>Baranowski</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">baranowb@gmail.com</email>
	</author>
	<author>
		<firstname>Pavel</firstname>
		<surname>Šlégr</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">pavel.slegr@gmail.com</email>
	</author>
</authorgroup>
				</bookinfo>
	<preface lang="en-US">
	<title>Preface</title>
	<para>
		 
	</para>
	<section lang="en-US" xml:base="Common_Content/Conventions.xml">
	<title>Document Conventions</title>
	<para>
		This manual uses several conventions to highlight certain words and phrases and draw attention to specific pieces of information.
	</para>
	<para>
		In PDF and paper editions, this manual uses typefaces drawn from the <ulink url="https://fedorahosted.org/liberation-fonts/">Liberation Fonts</ulink> set. The Liberation Fonts set is also used in HTML editions if the set is installed on your system. If not, alternative but equivalent typefaces are displayed. Note: Red Hat Enterprise Linux 5 and later includes the Liberation Fonts set by default.
	</para>
	<section>
		<title>Typographic Conventions</title>
		<para>
			Four typographic conventions are used to call attention to specific words and phrases. These conventions, and the circumstances they apply to, are as follows.
		</para>
		<para>
			<literal>Mono-spaced Bold</literal>
		</para>
		<para>
			Used to highlight system input, including shell commands, file names and paths. Also used to highlight key caps and key-combinations. For example:
		</para>
		<blockquote>
			<para>
				To see the contents of the file <filename>my_next_bestselling_novel</filename> in your current working directory, enter the <command>cat my_next_bestselling_novel</command> command at the shell prompt and press <keycap>Enter</keycap> to execute the command.
			</para>
		</blockquote>
		<para>
			The above includes a file name, a shell command and a key cap, all presented in Mono-spaced Bold and all distinguishable thanks to context.
		</para>
		<para>
			Key-combinations can be distinguished from key caps by the hyphen connecting each part of a key-combination. For example:
		</para>
		<blockquote>
			<para>
				Press <keycap>Enter</keycap> to execute the command.
			</para>
			<para>
				Press <keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap><keycap>F1</keycap></keycombo> to switch to the first virtual terminal. Press <keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap><keycap>F7</keycap></keycombo> to return to your X-Windows session.
			</para>
		</blockquote>
		<para>
			The first sentence highlights the particular key cap to press. The second highlights two sets of three key caps, each set pressed simultaneously.
		</para>
		<para>
			If source code is discussed, class names, methods, functions, variable names and returned values mentioned within a paragraph will be presented as above, in <literal>Mono-spaced Bold</literal>. For example:
		</para>
		<blockquote>
			<para>
				File-related classes include <classname>filesystem</classname> for file systems, <classname>file</classname> for files, and <classname>dir</classname> for directories. Each class has its own associated set of permissions.
			</para>
		</blockquote>
		<para>
			<application>Proportional Bold</application>
		</para>
		<para>
			This denotes words or phrases encountered on a system, including application names; dialogue box text; labelled buttons; check-box and radio button labels; menu titles and sub-menu titles. For example:
		</para>
		<blockquote>
			<para>
				Choose <guimenu>System &gt; Preferences &gt; Mouse</guimenu> from the main menu bar to launch <application>Mouse Preferences</application>. In the <guilabel>Buttons</guilabel> tab, click the <guilabel>Left-handed mouse</guilabel> check box and click <guibutton>Close</guibutton> to switch the primary mouse button from the left to the right (making the mouse suitable for use in the left hand).
			</para>
			<para>
				To insert a special character into a <application>gedit</application> file, choose <guimenu>Applications &gt; Accessories &gt; Character Map</guimenu> from the main menu bar. Next, choose <guimenu>Search &gt; Find…</guimenu> from the <application>Character Map</application> menu bar, type the name of the character in the <guilabel>Search</guilabel> field and click <guibutton>Next</guibutton>. The character you sought will be highlighted in the <guilabel>Character Table</guilabel>. Double-click this highlighted character to place it in the <guilabel>Text to copy</guilabel> field and then click the <guibutton>Copy</guibutton> button. Now switch back to your document and choose <guimenu>Edit &gt; Paste</guimenu> from the <application>gedit</application> menu bar.
			</para>
		</blockquote>
		<para>
			The above text includes application names; system-wide menu names and items; application-specific menu names; and buttons and text found within a GUI interface, all presented in Proportional Bold and all distinguishable by context.
		</para>
		<para>
			Note the <guimenu>&gt;</guimenu> shorthand used to indicate traversal through a menu and its sub-menus. This is to avoid the difficult-to-follow 'Select <guimenuitem>Mouse</guimenuitem> from the <guimenu>Preferences</guimenu> sub-menu in the <guimenu>System</guimenu> menu of the main menu bar' approach.
		</para>
		<para>
			<command><replaceable>Mono-spaced Bold Italic</replaceable></command> or <application><replaceable>Proportional Bold Italic</replaceable></application>
		</para>
		<para>
			Whether Mono-spaced Bold or Proportional Bold, the addition of Italics indicates replaceable or variable text. Italics denotes text you do not input literally or displayed text that changes depending on circumstance. For example:
		</para>
		<blockquote>
			<para>
				To connect to a remote machine using ssh, type <command>ssh <replaceable>username</replaceable>@<replaceable>domain.name</replaceable></command> at a shell prompt. If the remote machine is <filename>example.com</filename> and your username on that machine is john, type <command>ssh john@example.com</command>.
			</para>
			<para>
				The <command>mount -o remount <replaceable>file-system</replaceable></command> command remounts the named file system. For example, to remount the <filename>/home</filename> file system, the command is <command>mount -o remount /home</command>.
			</para>
			<para>
				To see the version of a currently installed package, use the <command>rpm -q <replaceable>package</replaceable></command> command. It will return a result as follows: <command><replaceable>package-version-release</replaceable></command>.
			</para>
		</blockquote>
		<para>
			Note the words in bold italics above — username, domain.name, file-system, package, version and release. Each word is a placeholder, either for text you enter when issuing a command or for text displayed by the system.
		</para>
		<para>
			Aside from standard usage for presenting the title of a work, italics denotes the first use of a new and important term. For example:
		</para>
		<blockquote>
			<para>
				When the Apache HTTP Server accepts requests, it dispatches child processes or threads to handle them. This group of child processes or threads is known as a <firstterm>server-pool</firstterm>. Under Apache HTTP Server 2.0, the responsibility for creating and maintaining these server-pools has been abstracted to a group of modules called <firstterm>Multi-Processing Modules</firstterm> (<firstterm>MPMs</firstterm>). Unlike other modules, only one module from the MPM group can be loaded by the Apache HTTP Server.
			</para>
		</blockquote>
	</section>
	
	<section>
		<title>Pull-quote Conventions</title>
		<para>
			Two, commonly multi-line, data types are set off visually from the surrounding text.
		</para>
		<para>
			Output sent to a terminal is set in <computeroutput>Mono-spaced Roman</computeroutput> and presented thus:
		</para>
		
<screen>
books        Desktop   documentation  drafts  mss    photos   stuff  svn
books_tests  Desktop1  downloads      images  notes  scripts  svgs
</screen>
		<para>
			Source-code listings are also set in <computeroutput>Mono-spaced Roman</computeroutput> but are presented and highlighted as follows:
		</para>
		
<programlisting language="java">
package org.jboss.book.jca.ex1;

import javax.naming.InitialContext;

public class ExClient
{
   public static void main(String args[]) 
       throws Exception
   {
      InitialContext iniCtx = new InitialContext();
      Object         ref    = iniCtx.lookup("EchoBean");
      EchoHome       home   = (EchoHome) ref;
      Echo           echo   = home.create();

      System.out.println("Created Echo");

      System.out.println("Echo.echo('Hello') = " + echo.echo("Hello"));
   }
   
}
</programlisting>
	</section>
	
	<section>
		<title>Notes and Warnings</title>
		<para>
			Finally, we use three visual styles to draw attention to information that might otherwise be overlooked.
		</para>
		<note>
			<title>Note</title>
			<para>
				A note is a tip or shortcut or alternative approach to the task at hand. Ignoring a note should have no negative consequences, but you might miss out on a trick that makes your life easier.
			</para>
		</note>
		<important>
			<title>Important</title>
			<para>
				Important boxes detail things that are easily missed: configuration changes that only apply to the current session, or services that need restarting before an update will apply. Ignoring Important boxes won't cause data loss but may cause irritation and frustration.
			</para>
		</important>
		<warning>
			<title>Warning</title>
			<para>
				A Warning should not be ignored. Ignoring warnings will most likely cause data loss.
			</para>
		</warning>
	</section>

</section>
	<!-- <xi:include
		href="Feedback.xml"
		xmlns:xi="http://www.w3.org/2001/XInclude">
		<xi:fallback
			xmlns:xi="http://www.w3.org/2001/XInclude">
			<xi:include
				href="Common_Content/Feedback.xml"
				xmlns:xi="http://www.w3.org/2001/XInclude" />
		</xi:fallback>
	</xi:include> -->
</preface>
	<chapter id="ittsss-Introduction_to_the_SIP_Servlets_Server" lang="en-US">
	<!--  chapter id nickname: ittsss  --><title>Introduction to the SIP Servlets Server</title>
	<para>
		<application condition="mob">Mobicents</application> SIP (Session Initiation Protocol) Servlets deliver a consistent, open platform on which to develop and deploy portable and distributed SIP and Java Enterprise Edition services. The <application condition="mob">Mobicents</application> SIP Servlets Server is a <emphasis>certified</emphasis> implementation of the SIP Servlet v1.1 (JSR 289) specification that can run on top of either the JBoss Application Server or the Tomcat Servlet Container.
	</para>
	<para>
		<application condition="mob">Mobicents</application> SIP Servlets for JBoss (MSS for JBoss) strives to develop interoperability standards between SIP Servlets and the Java Service Logic Execution Environment (JSLEE) so that applications can exploit the strengths of both. The JAIN-SIP Reference Implementation is leveraged as the SIP stack, and the <application condition="mob">Mobicents</application> JAIN SLEE Server is used as the SLEE implementation.
	</para>
	<itemizedlist id="ittsss-Principal_and_new_features_of_SIP_Servlets">
		<title>Features of the Mobicents SIP Servlets Server</title>
		<listitem>
			<para>
				the first <emphasis>certified</emphasis> SIP Servlet v1.1 (JSR 289) implementation
			</para>
		</listitem>
		<listitem>
			<para>
				a current call rate of 100 calls per second over a 24-hour duration: 8,640,000 total calls
			</para>
		</listitem>
		<listitem>
			<para>
				load balancing, cluster and failover support
			</para>
		</listitem>
		<listitem>
			<para>
				merged SIP and HTTP session management
			</para>
		</listitem>
		<listitem>
			<para>
				a browser-based Management Console
			</para>
		</listitem>
		<listitem>
			<para>
				a bundled JSLEE/SIP interoperability demonstration application for MSS for JBoss
			</para>
		</listitem>
		<listitem>
			<para>
				Mobicents Media Server
			</para>
		</listitem>
		<listitem>
			<para>
				extensions such as SUBSCRIBE/NOTIFY, among others
			</para>
		</listitem>
	</itemizedlist>
	<section id="ittsss-High-Availability-SIP_Servlets_Server_Load_Balancing_Clustering_and_Failover">
		<title>High-Availability: SIP Servlets Server Load Balancing, Clustering and Failover</title>
		<para>
			Telecommunications applications demand High-Availability (HA), fault tolerance, scalability and performance. Providing highly-available end-user applications that are tolerant of faults is commonly achieved through the use of clustering technologies.
		</para>
		<para>
			Clustering is a complex subject that is often used to collectively address a variety of techniques aimed at improving the high-availability and scalability of services and applications. Such techniques include distributed state replication, load balancing, and failover capabilities. The usage of any one of these techniques improves either reliability or performance, but for the sake of the other. It requires careful analysis of real-world scenarios to arrive at an architecture which represents the optimal balance of performance and reliability.
		</para>
		<para>
			Based on experience with production deployments and extensive feedback from the Open Source community, Mobicents HA has undergone several iterations of refinement. In its current incarnation, the architecture can be described as a "star topology" with symmetric application servers and a smart, lightweight load-balancing element with built-in failover logic. The amount of state replication is kept to a minimum for maximum scalability with sufficiently-high reliability.
		</para>
		<mediaobject id="ittsss-sas-MSSSIPLoadBalancer-dia-StarNetworkTopology">
			<imageobject>
				<imagedata align="center" fileref="images/mss-MSSSIPLoadBalancer-dia-StarNetworkTopology.jpg" format="JPG" scalefit="1" width="550"/>
			</imageobject>
			<textobject>
				<para>
					A cluster of Mobicents SIP Servlets Servers, showing the star network topology.
				</para>
			</textobject>
		</mediaobject>
		<formalpara id="ittsss-Clustering_Terms_and_Definitions_for_SIP_Servlets">
			<title>Clustering Terms and Definitions for Mobicents SIP Servlets</title>
			<para>
				For purposes of clarity, the SIP Servlets High-Availability sections use terms—such as <emphasis>cluster</emphasis>—with meanings specific to the context of Mobicents SIP Servlets. Therefore, the following definitions are provided to clarify more precisely what is meant by the terms <emphasis>cluster</emphasis>, <emphasis>node</emphasis>, <emphasis>SIP Servlets Server</emphasis> and so on, in the subsequent sections, and in the context of Mobicents High-Availability.
			</para>
		</formalpara>
		<important id="ittsss-Distinguishing_Between_a_Cluster_and_Clustering_Capabilities">
			<title>Distinguishing Between a Cluster and Clustering Capabilities</title>
			<para>
				The crux of possible confusion is this: any heterogeneous group of SIP Servlets Servers behind a SIP load balancer is, by definition, a <emphasis>cluster</emphasis>. Those SIP Servlets Servers can be either MSS for JBoss servers or MSS for Tomcat servers. However, a homogeneous group of MSS for JBoss servers served by a SIP load balancer, in addition to being a cluster, also possesses JBoss-specific <emphasis>clustering capabilities</emphasis>. Those clustering capabilities include, principally, state replication and the ability to fail over. Therefore, when specific <emphasis>clustering capabilities</emphasis> are spoken of, they are always referring to the context of a homogeneous cluster of MSS for JBoss server nodes served by a load balancer.
			</para>
		</important>
		<variablelist id="ittsss-Glossary_of_Cluster-Related_Terms">
			<title>Glossary of Cluster-Related Terms</title>
			<varlistentry>
				<term>SIP Servlets Server</term>
				<listitem>
					<para>
						A Mobicents <emphasis>SIP Servlets Server</emphasis> refers to either a SIP Servlets-enabled JBoss Application Server (MSS for JBoss) or a SIP Servlets-enabled Tomcat Servlet Container (MSS for Tomcat). Anywhere the term SIP Servlets Server is used, you are free to substitute the JBoss or the Tomcat variety depending on the one you are interested in.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>node</term>
				<listitem>
					<para>
						A <emphasis>node</emphasis> is simply a SIP Servlets Server in a <emphasis>cluster</emphasis>. In this document, a node can be either an MSS for JBoss server or an MSS for Tomcat server.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>cluster</term>
				<listitem>
					<para>
						A <emphasis>cluster</emphasis>, as used in this document, refers simply to a group of one or more <emphasis>nodes</emphasis>, i.e. <emphasis>SIP Servlets Servers</emphasis>, behind a SIP load balancer. The minimum number of nodes in a cluster is one. The case of a <emphasis>cluster</emphasis> with one node almost always occurs in a <emphasis>degraded cluster</emphasis>: one in which other nodes, for some reason, have become unavailable.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>SIP load balancer</term>
				<listitem>
					<para>
						The <application>Mobicents SIP load balancer</application> is not a full-fledged SIP Servlets Server itself. Rather, it is a simple <emphasis>proxy server</emphasis> whose primary purpose is to intelligently route SIP requests and replies between healthy and available SIP Servlets Servers residing in a <emphasis>cluster</emphasis> on a Local Area Network (LAN), and User Agents (UAs) accessing a SIP service or application from a Wide Area Network (WAN). The SIP load balancer therefore acts as a kind of gateway between a Wide Area Network with User Agents, and a Local Area Network wherein the SIP Servlets Server <emphasis>cluster nodes</emphasis> reside.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
	
	<section id="wwtssmc-Working_with_the_SIP_Servlets_Management_Console" lang="en-US">
	<!--  chapter id nickname: wwtssmc  --><title>Working with the SIP Servlets Management Console</title>
	<para>
		Once installed, the MSS for JBoss or MSS for Tomcat instance can be accessed and configured using the SIP Servlets Management Console. The management console is available at <ulink url="http://localhost:8080/sip-servlets-management/"/>.
	</para>
	<mediaobject id="wwtssmc-mss-MSSSManagementConsole-ss-ManagementConsole">
		<imageobject>
			<imagedata align="center" fileref="images/mss-MSSSManagementConsole-ss-ManagementConsole.png" format="PNG" scalefit="1" width="440"/>
		</imageobject>
		<caption>
		<para>
			The SIP Servlets Management Console
		</para>
		</caption>
	</mediaobject>
	<para>
		Information on how to use the SIP Servlets Management Console is available from the <guilabel>Help</guilabel> link on the top main menu bar. Clicking <guilabel>Help</guilabel> displays a <guilabel>Default Application Router Help</guilabel> pop-up which can be repositioned and resized by dragging.
	</para>
	<mediaobject id="wwtssmc-mss-MSSSManagementConsole-ss-Help">
		<imageobject>
			<imagedata align="center" fileref="images/mss-MSSSManagementConsole-ss-Help.png" format="PNG" scalefit="1" width="440"/>
		</imageobject>
		<caption>
		<para>
			SIP Servlets Management Console: Default Application Router Help
		</para>
		</caption>
	</mediaobject>
	<para>
		Recent versions of the SIP Servlets Management Console feature a <guilabel>Server Settings</guilabel> tab, in which concurrency and congestion control settings can be tuned.
	</para>
	<mediaobject id="wwtssmc-mss-MSSSManagementConsole-ss-ServerSettings-2">
		<imageobject>
			<imagedata align="center" fileref="images/mss-MSSSManagementConsole-ss-ServerSettings.png" format="PNG" scalefit="1" width="440"/>
		</imageobject>
		<caption>
		<para>
			Tunable SIP Servlets Server Settings
		</para>
		</caption>
	</mediaobject>
	<para>
		For more information on concurrency and congestion control tuning, refer to <xref linkend="sscacc-Configuring_the_Concurrency_and_Congestion_Control_Settings"/>.
	</para>
</section>
</chapter>
	<chapter id="sssicar-SIP_Servlets_Server-Installing_Configuring_and_Running" lang="en-US">
	<!--  chapter id nickname: sssicar  --><title>SIP Servlets Server-Installing, Configuring and Running</title>
	<section id="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running" lang="en-US">
	<!--  chapter id nickname: bssswjicar  --><title>SIP Servlet-Enabled JBoss Application Server: Installing, Configuring and Running</title>
	<para>
		The <productname condition="mob">Mobicents</productname>
		 SIP Servlets Server can run on either the JBoss Application Server or the Tomcat Servlet Container. This section details how to install the SIP Servlets Server on top of the JBoss Application Server. For installation instructions for the Tomcat Servlet Container, refer to <xref linkend="bssswticar-SIP_Servlets_Server_with_Tomcat-Installing_Configuring_and_Running"/>
	</para>
	<note>
		<para>
			It is recommended that the SIP Servlets Server is run on the JBoss platform. Some functionality, including the ability to execute some SIP Extension examples, is not available in the Tomcat version.
		</para>
	</note>
	<formalpara>
		<title>Differences Between a Standard JBoss Installation and the <productname condition="mob">Mobicents</productname>
		 SIP Servlets Version</title>
		<para>
			Provided here is a list of differences between a standard JBoss Application Server installation one customized for SIP Servlets. The differences include:
		</para>
	</formalpara>
	<itemizedlist>
		<listitem>
			<para>
				The <filename>server/default/deploy</filename> directory contains both HTTP and SIP Servlet applications (WAR and SAR2 files).
			</para>
		</listitem>
		<listitem>
			<para>
				The <filename>server/default/deploy/jboss-web.deployer</filename> and <filename>server/default/deploy/jbossweb.sar</filename> units have been modified to provide extended classes to the standard JBoss container classes, in order to allow SIP applications to be loaded and the SIP stack to be started.
			</para>
		</listitem>
		<listitem>
			<para>
				The <filename>server/default/deploy/jboss-web.deployer</filename> and <filename>server/default/deploy/jbossweb.sar</filename> <filename>context.xml</filename> files have been modified to allow the extended manager to manage SIP sessions and SIP application sessions in addition to HTTP sessions.
			</para>
		</listitem>
		<listitem>
			<para>
				The <filename>server/default/deploy/jbossweb.sar/</filename> <filename>server.xml</filename> file has been modified to provide extended classes to common JBoss Web containers. The classes allow SIP applications to be loaded, and the SIP stack to be started.
			</para>
		</listitem>
		<listitem>
			<para>
				The <filename>server/default/deploy/jbossweb.sar/</filename> <filename>jboss-beans.xml</filename> file has been modified to allow the JBoss container to process SIP messages.
			</para>
		</listitem>
		<listitem>
			<para>
				The <filename>server/default/deployers/</filename> <filename>metadata-deployer-jboss-beans.xml</filename> file has been modified to allow JBoss to parse sip.xml deployment descriptors and SIP metadata annotations.
			</para>
		</listitem>
		<listitem>
			<para>
				The <filename>server/default/deploy/jboss-web.deployer/META-INF/jboss-service.xml</filename> file and the <filename>server/default/deploy/jboss-web.deployer/META-INF/webserver-xmbean.xml</filename> file have been modified so that it is now possible for JBoss containers to correctly deploy SIP servlets and converged applications.
			</para>
		</listitem>
		<listitem>
			<para>
				A <filename>dars</filename> directory containing all of the Default Application Router (DAR) properties files for using the various SIP Servlets applications (which come bundled with the release) has been added to the <filename>server/default/conf</filename> directory.
			</para>
		</listitem>
		<listitem>
			<para>
				Additional JAR files have been added to enable SIP Servlet functionality; these are located in the <filename>server/default/deploy/jboss-web.deployer/</filename> and <filename>server/default/deploy/jbossweb.sar/</filename> directories.
			</para>
		</listitem>
	</itemizedlist>
	<!-- <bridgehead id="bssswjicar-Installing_the_Java_Development_Kit">Installing the Java Development Kit</bridgehead> --> <section lang="en-US">
	<!--  chapter id nickname: jdkicar  --><title>Java Development Kit: Installing, Configuring and Running</title>
	<para>
		The <application condition="mob">Mobicents</application> platform is written in Java. A working Java Runtime Environment (<acronym>JRE</acronym>) or Java Development Kit (<acronym>JDK</acronym>) must be installed prior to running the server. The required version must be version 5 or higher.
	</para>
	<para>
		It is possible to run most <application condition="mob">Mobicents</application> servers, such as the JAIN SLEE Server, using a Java 6 JRE or JDK. However, the XML Document Management Server does not run on Java 6. Check the <ulink url="http://groups.google.com/group/mobicents-public/topics">public support forum</ulink> and <ulink url="http://www.mobicents.org/roadmap.html">project road map</ulink> pages to verify Java 6 support prior to running the XML Document Management Server with Java 6.
	</para>
	<formalpara>
		<title>JRE or JDK?</title>
		<para>
			Although <application condition="mob">Mobicents</application> servers are capable of running on the Java Runtime Environment, this guide assumes the audience is mainly developers interested in developing Java-based, <application condition="mob">Mobicents</application>-driven solutions. Therefore, installing the Java Development Kit is covered due to the anticipated audience requirements.
		</para>
	</formalpara>
	<formalpara>
		<title>32-Bit or 64-Bit JDK</title>
		<para>
			If the system uses 64-Bit Linux or Windows architecture, the 64-bit JDK is strongly recommended over the 32-bit version. The following heuristics should be considered in determining whether the 64-bit Java Virtual Machine (JVM) is suitable:
		</para>
	</formalpara>
	<itemizedlist>
		<listitem>
			<para>
				Wider datapath: the pipe between RAM and CPU is doubled, which improves the performance of memory-bound applications when using a 64-bit JVM.
			</para>
		</listitem>
		<listitem>
			<para>
				64-bit memory addressing provides a virtually unlimited (1 exabyte) heap allocation. Note that large heaps can affect garbage collection.
			</para>
		</listitem>
		<listitem>
			<para>
				Applications that run with more than 1.5 GB of RAM (including free space for garbage collection optimization) should utilize the 64-bit JVM.
			</para>
		</listitem>
		<listitem>
			<para>
				Applications that run on a 32-bit JVM and do not require more than minimal heap sizes will gain nothing from a 64-bit JVM. Excluding memory issues, 64-bit hardware with the same relative clock speed and architecture is not likely to run Java applications faster than the 32-bit version.
			</para>
		</listitem>
	</itemizedlist>
	<note>
		<para>
			The following instructions describe how to download and install the 32-bit JDK, however the steps are nearly identical for installing the 64-bit version.
		</para>
	</note>
	<!--  <formalpara
   id="jdkicar-binary-Java_Development_Kit-Pre-Install Requirements and Prerequisites">
   <title>Pre-Install Requirements and Prerequisites</title>
   <para></para>
  </formalpara>  --><!--   <variablelist
   condition="jdkicar-binary-Java_Development_Kit-Hardware_Requirements">
   <title>Hardware Requirements</title>
   <varlistentry>
    <term>Sufficient Disk Space</term>
    <listitem>
     <para></para>
    </listitem>
   </varlistentry>
  </variablelist>   --><!--   <variablelist
   condition="jdkicar-binary-Java_Development_Kit-Software_Prerequisites">
   <title>Software Prerequisites</title>
   <varlistentry>
    <term></term>
    <listitem>
     <para></para>
    </listitem>
   </varlistentry>
  </variablelist>   --> <formalpara>
		<!--  id="jdkicar-binary-Java_Development_Kit-Downloading">  --> <title>Downloading</title>
		<para>
			Download the Sun JDK 5.0 (Java 2 Development Kit) from Sun's website: <ulink url="http://java.sun.com/javase/downloads/index_jdk5.jsp"/>. Click the <guilabel>Download</guilabel> link next to "JDK 5.0 Update <replaceable>&lt;x&gt;</replaceable>" (where <replaceable>&lt;x&gt;</replaceable> is the latest minor version release number).
		</para>
	</formalpara>
	<para>
		The Sun website offers two download options: 
		<itemizedlist>
			<listitem>
				<para>
					A self-extracting RPM (for example, <filename>jdk-1_5_0_16-linux-i586-rpm.bin</filename>)
				</para>
			</listitem>
			<listitem>
				<para>
					A self-extracting file (e.g. <filename>jdk-1_5_0_16-linux-i586.bin</filename>)
				</para>
			</listitem>
		</itemizedlist>
	</para>
	<para>
		If installing the JDK on Red Hat Enterprise Linux, Fedora, or another RPM-based Linux system, it is recommended that the self-extracting file containing the RPM package is selected. This option will set up and use the SysV service scripts in addition to installing the JDK. The RPM option is also recommended if the <application condition="mob">Mobicents</application> platform is being set up in a production environment.
	</para>
	<formalpara>
		<!--  id="jdkicar-binary-Java_Development_Kit-Installing">  --> <title>Installing</title>
		<para>
			The following procedures detail how to install the Java Development Kit on both Linux and Windows.
		</para>
	</formalpara>
	<procedure>
		<title>Installing the JDK on Linux</title>
		<step>
			<para>
				Ensure the file is executable, then run it:
			</para>
			<!--   ~]$ chmod +x "jdk-1_5_0_<minor_version>-linux-<architecture>-rpm.bin"
~]$ ./"jdk-1_5_0_<minor_version>-linux-<architecture>-rpm.bin"   --> 
<screen>~]$ chmod +x "jdk-1_5_0_&lt;minor_version&gt;-linux-&lt;architecture&gt;-rpm.bin"
~]$ ./"jdk-1_5_0_&lt;minor_version&gt;-linux-&lt;architecture&gt;-rpm.bin"
</screen>
		</step>
	</procedure>
	
	<note>
		<title>Setting up SysV Service Scripts for Non-RPM Files</title>
		<para>
			If the non-RPM self-extracting file is selected for an RPM-based system, the SysV service scripts can be configured by downloading and installing one of the <literal>-compat</literal> packages from the JPackage project. Download the <literal>-compat</literal> package that corresponds correctly to the minor release number of the installed JDK. The compat packages are available from <ulink url="ftp://jpackage.hmdc.harvard.edu/JPackage/1.7/generic/RPMS.non-free/"/>.
		</para>
	</note>
	<important>
		<para>
			A <literal>-compat</literal> package is not required for RPM installations. The <literal>-compat</literal> package performs the same SysV service script set up that the RPM version of the JDK installer does.
		</para>
	</important>
	<procedure>
		<title>Installing the JDK on Windows</title>
		<step>
			<para>
				Using Explorer, double-click the downloaded self-extracting installer and follow the instructions to install the JDK.
			</para>
		</step>
	</procedure>
	
	<formalpara>
		<!--  id="jdkicar-binary-Java_Development_Kit-Configuring">  --> <title>Configuring</title>
		<para>
			Configuring the system for the JDK consists of two tasks: setting the <envar>JAVA_HOME</envar> environment variable, and ensuring the system is using the proper JDK (or JRE) using the <command>alternatives</command> command. Setting <envar>JAVA_HOME</envar> generally overrides the values for <command>java</command>, <command>javac</command> and <command>java_sdk_1.5.0</command> in <command>alternatives</command>, however it is recommended to specify the value for consistency.
		</para>
	</formalpara>
	<variablelist>
		<varlistentry>
			<term>Setting the <envar>JAVA_HOME</envar> Environment Variable on Generic Linux</term>
			<listitem>
				<para>
					After installing the JDK, ensure the <envar>JAVA_HOME</envar> environment variable exists and points to the location of the JDK installation.
				</para>
				<formalpara>
					<title>Setting the <envar>JAVA_HOME</envar> Environment Variable on Linux</title>
					<para>
						Determine whether <envar>JAVA_HOME</envar> is set by executing the following command:
					</para>
				</formalpara>
				
<screen>~]$ echo $JAVA_HOME
</screen>
				<para>
					If <envar>JAVA_HOME</envar> is not set, the value must be set to the location of the JDK installation on the system. This can be achieved by adding two lines to the <filename>~/.bashrc</filename> configuration file. Open <filename>~/.bashrc</filename> (or create it if it does not exist) and add a line similar to the following one anywhere inside the file:
				</para>
				
<programlisting>export JAVA_HOME="/usr/lib/jvm/jdk1.5.0_&lt;version&gt;"
</programlisting>
				<para>
					The changes should also be applied for other users who will be running the <application condition="mob">Mobicents</application> on the machine (any environment variables <command>export</command>ed from <filename>~/.bashrc</filename> files are local to that user).
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Setting <envar>java</envar>, <envar>javac</envar> and <envar>java_sdk_1.5.0</envar> using the <command>alternatives</command> command </term>
			<listitem>
				<para>
					On systems with the <command>alternatives</command> command, including Red Hat Enterprise Linux and Fedora, it is possible to choose which JDK (or JRE) installation to use, as well as which <command>java</command> and <command>javac</command> executables should be run when called.
				</para>
				<para>
					<emphasis>As the superuser</emphasis>, call <command>/usr/sbin/alternatives</command> with the <option>--config java</option> option to select between JDKs and JREs installed on your system:
				</para>
				
<programlisting>
home]$ sudo /usr/sbin/alternatives --config java

There are 3 programs which provide 'java'.

  Selection    Command
-----------------------------------------------
   1           /usr/lib/jvm/jre-1.5.0-gcj/bin/java
   2           /usr/lib/jvm/jre-1.6.0-sun/bin/java
*+ 3         /usr/lib/jvm/jre-1.5.0-sun/bin/java

Enter to keep the current selection[+], or type selection number:
</programlisting>
				<para>
					The Sun JDK, version 5, is required to run the <command>java</command> executable. In the <command>alternatives</command> information printout above, a plus (<literal>+</literal>) next to a number indicates the option currently being used. Press <keycap>Enter</keycap> to keep the current JVM, or enter the number corresponding to the JVM to select that option.
				</para>
				<para>
					As the superuser, repeat the procedure above for the <command>javac</command> command and the <literal>java_sdk_1.5.0</literal> environment variable:
				</para>
				
<screen>home]$ sudo /usr/sbin/alternatives --config javac
</screen>
				
<screen>home]$ sudo /usr/sbin/alternatives --config java_sdk_1.5.0
</screen>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Setting the <envar>JAVA_HOME</envar> Environment Variable on Windows</term>
			<listitem>
				<para>
					For information on how to set environment variables in Windows, refer to <ulink url="http://support.microsoft.com/kb/931715"/>.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<formalpara>
		<!--  id="jdkicar-binary-Java_Development_Kit-Testing">  --> <title>Testing</title>
		<para>
			To ensure the correct JDK or Java version (5 or higher), and that the java executable is in the <envar>PATH</envar> environment variable, run the <command>java -version</command> command in the terminal from the home directory:
		</para>
	</formalpara>
	
<screen>
home]$ java -version
java version "1.5.0_16"
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_16-b03)
Java HotSpot(TM) Client VM (build 1.5.0_16-b03, mixed mode, sharing)
</screen>
	<!--  <formalpara
  id="jdkicar-binary-Java_Development_Kit-Running">
  <title>Running</title>
  <para></para>
 </formalpara>  --><!--   <formalpara
  id="jdkicar-binary-Java_Development_Kit-Stopping">
  <title>Stopping</title>
  <para></para>
 </formalpara>   --> <formalpara>
		<!--  id="jdkicar-binary-Java_Development_Kit-Uninstalling">  --> <title>Uninstalling</title>
		<para>
			It is not necessary to remove a particular JDK from a system, because the JDK and JRE version can be switched as required using the <command>alternatives</command> command, and/or by setting <envar>JAVA_HOME</envar>.
		</para>
	</formalpara>
	<formalpara>
		<title>Uninstalling the JDK on Linux</title>
		<para>
			On RPM-based systems, uninstall the JDK using the <command>yum remove &lt;jdk_rpm_name&gt;</command> command.
		</para>
	</formalpara>
	<formalpara>
		<title>Uninstalling the JDK on Windows</title>
		<para>
			On Windows systems, check the JDK entry in the <literal>Start</literal> menu for an uninstall option, or use <literal>Add/Remove Programs</literal>.
		</para>
	</formalpara>
</section>
	<section id="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-PreInstall_Requirements_and_Prerequisites">
		<title>Pre-install Requirements and Prerequisites</title>
		<para>
			 
		</para>
		<variablelist id="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Hardware_Requirements">
			<title>Hardware Requirements</title>
			<varlistentry>
				<term>Sufficient Disk Space</term>
				<listitem>
					<para>
						Once unzipped, version 1.0.0 of the MSS for JBoss binary release requires a minimum of 135 MB free disk space.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Anything Java Itself Will Run On</term>
				<listitem>
					<para>
						MSS for JBoss is 100% Java and will run on the same hardware that the JBoss Application Server runs on.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<variablelist id="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Software_Prerequisites">
			<title>Software Prerequisites</title>
			<varlistentry>
				<term>JDK 5 or Higher</term>
				<listitem>
					<para>
						A working installation of the Java Development Kit (&lt;acronym&gt;JDK&lt;/acronym&gt;) version 5 or higher is currently required in order to run MSS for JBoss binary distribution. For instructions on how to install the JDK, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing"/>
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
	
	<section id="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Downloading">
		<title>Downloading</title>
		<para>
			The latest version of MSS for JBoss is available from <ulink url="http://www.mobicents.org/mss-downloads.html"/>. The top row of the table contains the latest version.
		</para>
		<para>
			Each version of the SIP Servlets Server is comprised of two separate binary distribution files: one which is MSS for JBoss, and the other which is MSS for Tomcat. Download SIP Servlets Server for JBoss and continue with the following instructions.
		</para>
	</section>
	
	<section id="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing">
		<title>Installing</title>
		<para>
			Once the requirements and prerequisites have been met and you have downloaded the binary distribution zip file, you are ready to install the MSS for JBoss binary distribution. Follow the instructions below for the selected platform, whether Linux or Windows.
		</para>
		<note id="bssswjicar--binary-SIP_Servlets_Server_with_JBoss-Use_Version_Numbers_Relevant_to_Your_Installation">
			<title>Version Numbers</title>
			<para>
				For clarity, the command line instructions presented in this chapter use specific version numbers and directory names. Ensure this information is substituted with the binary distribution's version numbers and file names.
			</para>
		</note>
		<procedure>
			<title>Installing the MSS for JBoss Binary Distribution on Linux</title>
			<para>
				It is assumed that the downloaded archive is saved in the home directory, and that a terminal window is open displaying the home directory
			</para>
			<step>
				<para>
					Create a subdirectory to extract the MSS for JBoss files into. For ease of identification, it is recommended that the version number of the binary is included in this directory name.
				</para>
				
<screen>~]$ mkdir "mss-jboss-&lt;version&gt;"
</screen>
			</step>
			<step>
				<para>
					Move the downloaded zip file into the directory.
				</para>
				
<screen>~]$ mv "mss-1.0.0-jboss-4.2.3.GA-0904211307.zip" "mss-jboss-&lt;version&gt;"
</screen>
			</step>
			<step>
				<para>
					Move into the directory.
				</para>
				
<screen>~]$ cd "mss-jboss-&lt;version&gt;"
</screen>
			</step>
			<step>
				<para>
					Extract the files into the current directory by executing one of the following commands.
				</para>
				<itemizedlist>
					<listitem>
						<para>
							Java: 
<screen>mss-jboss-&lt;version&gt;]$ jar -xvf "mss-1.0.0-jboss-4.2.3.GA-0904211307.zip"
</screen>
						</para>
					</listitem>
					<listitem>
						<para>
							Linux: 
<screen>mss-jboss-&lt;version&gt;]$ unzip "mss-1.0.0-jboss-4.2.3.GA-0904211307.zip"
</screen>
						</para>
					</listitem>
				</itemizedlist>
				<note>
					<para>
						You can also use <command>unzip</command>'-d &lt;unzip_to_location&gt; to extract the zip file's contents to a location other than the current directory.
					</para>
				</note>
			</step>
			<step>
				<para>
					To free disk space, you may want to delete the zip file once you've extracted its contents:
				</para>
				
<screen>mss-jboss-&lt;version&gt;]$ rm "mss-1.0.0-jboss-4.2.3.GA-0904211307.zip"
</screen>
			</step>
		</procedure>
		
		<procedure>
			<title>Installing the MSS for JBoss Binary Distribution on <productname>Windows</productname>
			</title>
			<para>
				For this procedure, it is assumed that the downloaded archive is saved in the <filename>My Downloads</filename> folder.
			</para>
			<step>
				<para>
					Create a directory in <filename>My Downloads</filename> to extract the zip file's contents into. For ease of identification, it is recommended that the version number of the binary is included in the folder name. For example, <filename>mss-jboss-&lt;version&gt;</filename>.
				</para>
			</step>
			<step>
				<para>
					Extract the contents of the archive, specifying the destination folder as the one created in the previous step.
				</para>
			</step>
			<step>
				<para>
					Alternatively, execute the <command>jar -xvf</command> command to extract the binary distribution files from the zip archive.
				</para>
				<orderedlist>
					<listitem>
						<para>
							Move the downloaded zip file from <filename>My Downloads</filename> to the folder created in the previous step.
						</para>
					</listitem>
					<listitem>
						<para>
							Open the Windows Command Prompt and navigate to the folder that contains the archive using the <command>cd</command> command
						</para>
					</listitem>
					<listitem>
						<para>
							Execute the <command>jar -xvf</command> command to extract the archive contents into the current folder.
						</para>
						
<screen>C:\Users\&lt;user&gt;\My Downloads\mss-jboss-&lt;version&gt;&gt;jar -xvf "mss-1.0.0-jboss-4.2.3.GA-0904211307.zip"
</screen>
					</listitem>
				</orderedlist>
			</step>
			<step>
				<para>
					It is recommended that the folder holding the MSS for JBoss files (in this example, the folder named <filename>mss-jboss-<replaceable>&lt;version&gt;</replaceable></filename>) is moved to a user-defined location for storing executable programs. For example, the <filename>Program Files</filename> folder.
				</para>
			</step>
			<step>
				<para>
					Consider deleting the archive, if free disk space is an issue.
				</para>
				
<screen>C:\Users\&lt;user&gt;\My Downloads\mss-jboss-&lt;version&gt;&gt;delete "mss-1.0.0-jboss-4.2.3.GA-0904211307.zip"
</screen>
			</step>
		</procedure>

	</section>
	
	<section id="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Setting_the_JBOSS_HOME_Environment_Variable">
		<title>Setting the JBOSS_HOME Environment Variable</title>
		<para>
			Configuring MSS for JBoss consists of setting the <envar>JBOSS_HOME</envar> environment variable and optionally customizing the MSS for JBoss server by adding SIP Connectors, configuring the application router, and logging.
		</para>
		<para>
			After setting <envar>JBOSS_HOME</envar> according to the instructions in the following section, refer to <xref linkend="bsssc-binary-SIP_Servlets_Server-Configuring"/> to learn how to configure MSS for JBoss.
		</para>
		<para>
			Alternatively, after having set <envar>JBOSS_HOME</envar>, the MSS for JBoss server can be run. Return to this section to configure it later.
		</para>
		<section lang="en-US">
	<title>Setting the JBOSS_HOME Environment Variable</title>
	<para>
		The <application>Mobicents Platform</application> (<application>Mobicents</application>) is built on top of the <application>JBoss Application Server</application> (<application>JBoss AS</application>). You do not need to set the <envar>JBOSS_HOME</envar> environment variable to run any of the <application>Mobicents Platform</application> servers <emphasis>unless</emphasis> <envar>JBOSS_HOME</envar> is <emphasis>already</emphasis> set.
	</para>
	<para>
		The best way to know for sure whether <envar>JBOSS_HOME</envar> was set previously or not is to perform a simple check which may save you time and frustration.
	</para>
	<formalpara>
		<title>Checking to See If JBOSS_HOME is Set on Linux</title>
		<para>
			At the command line, <command>echo</command><userinput>$JBOSS_HOME</userinput> to see if it is currently defined in your environment:
		</para>
	</formalpara>
	<!--   ~]$ echo $JBOSS_HOME   --> 
<screen>~]$ echo $JBOSS_HOME
</screen>
	<para>
		The <application>Mobicents Platform</application> and most Mobicents servers are built on top of the <application>JBoss Application Server</application> (<application>JBoss AS</application>). When the <application>Mobicents Platform</application> or Mobicents servers are built <emphasis>from source</emphasis>, then <envar>JBOSS_HOME</envar> <emphasis>must</emphasis> be set, because the Mobicents files are installed into (or "over top of" if you prefer) a clean <application>JBoss AS</application> installation, and the build process assumes that the location pointed to by the <envar>JBOSS_HOME</envar> environment variable at the time of building is the <application>JBoss AS</application> installation into which you want it to install the Mobicents files.
	</para>
	<para>
		This guide does not detail building the <application>Mobicents Platform</application> or any Mobicents servers from source. It is nevertheless useful to understand the role played by <application>JBoss AS</application> and <envar>JBOSS_HOME</envar> in the Mobicents ecosystem.
	</para>
	<para>
		The immediately-following section considers whether you need to set <envar>JBOSS_HOME</envar> at all and, if so, when. The subsequent sections detail how to set <envar>JBOSS_HOME</envar> on Linux and Windows
	</para>
	<important>
		<para>
			Even if you fall into the category below of <emphasis>not needing</emphasis> to set <envar>JBOSS_HOME</envar>, you may want to for various reasons anyway. Also, even if you are instructed that you do <emphasis>not need</emphasis> to set <envar>JBOSS_HOME</envar>, it is good practice nonetheless to check and make sure that <envar>JBOSS_HOME</envar> actually <emphasis>isn't</emphasis> set or defined on your system for some reason. This can save you both time and frustration.
		</para>
	</important>
	<bridgehead>You <emphasis>DO NOT NEED</emphasis> to set <envar>JBOSS_HOME</envar> if...</bridgehead>
	<itemizedlist>
		<listitem>
			<para>
				...you have installed the <application>Mobicents Platform</application> binary distribution.
			</para>
		</listitem>
		<listitem>
			<para>
				...you have installed a Mobicents server binary distribution <emphasis>which bundles <application>JBoss AS</application>.</emphasis>
			</para>
		</listitem>
	</itemizedlist>
	<bridgehead>You <emphasis>MUST</emphasis> set <envar>JBOSS_HOME</envar> if...</bridgehead>
	<itemizedlist>
		<listitem>
			<para>
				...you are installing the <application>Mobicents Platform</application> or any of the Mobicents servers <emphasis>from source</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				...you are installing the <application>Mobicents Platform</application> binary distribution, or one of the Mobicents server binary distributions, which <emphasis>do not</emphasis> bundle <application>JBoss AS</application>.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		Naturally, if you installed the <application>Mobicents Platform</application> or one of the Mobicents server binary releases which <emphasis>do not</emphasis> bundle <application>JBoss AS</application>, yet requires it to run, then you should <ulink url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Installation_Guide/4/html/index.html">install <application>JBoss AS</application></ulink> before setting <envar>JBOSS_HOME</envar> or proceeding with anything else.
	</para>
	<formalpara>
		<title>Setting the JBOSS_HOME Environment Variable on Linux</title>
		<para>
			The <envar>JBOSS_HOME</envar> environment variable must point to the directory which contains all of the files for the <phrase><application>Mobicents Platform</application> or individual Mobicents server</phrase> that you installed. As another hint, this topmost directory contains a <filename>bin</filename> subdirectory.
		</para>
	</formalpara>
	<para>
		Setting <envar>JBOSS_HOME</envar> in your personal <filename>~/.bashrc</filename> startup script carries the advantage of retaining effect over reboots. Each time you log in, the environment variable is sure to be set for you, as a user. On Linux, it is possible to set <envar>JBOSS_HOME</envar> as a system-wide environment variable, by defining it in <filename>/etc/bashrc</filename>, but this method is neither recommended nor detailed in these instructions.
	</para>
	<procedure>
		<title>To Set JBOSS_HOME on Linux...</title>
		<step>
			<para>
				Open the <filename>~/.bashrc</filename> startup script, which is a hidden file in your home directory, in a text editor, and insert the following line on its own line while substituting for the actual install location on your system:
			</para>
			<!--   export JBOSS_HOME="/home/<replaceable>&lt;username&gt;</replaceable>/<replaceable>&lt;path&gt;</replaceable>/<replaceable>&lt;to&gt;</replaceable>/<replaceable>&lt;install_directory&gt;</replaceable>"   --> 
<screen>export JBOSS_HOME="/home/&lt;username&gt;/&lt;path&gt;/&lt;to&gt;/&lt;install_directory&gt;"
</screen>
		</step>
		<step>
			<para>
				Save and close the <filename>.bashrc</filename> startup script.
			</para>
		</step>
		<step>
			<para>
				You should <command>source</command> the <filename>.bashrc</filename> script to force your change to take effect, so that <envar>JBOSS_HOME</envar> becomes set for the current session<footnote>
				<para>
					Note that any other terminals which were opened prior to your having altered <filename>.bashrc</filename> will need to <command>source</command><filename>~/.bashrc</filename> as well should they require access to <envar>JBOSS_HOME</envar>.
				</para>
				</footnote>.
			</para>
			<!--   ~]$ source ~/.bashrc   --> 
<screen>~]$ source ~/.bashrc
</screen>
		</step>
		<step>
			<para>
				Finally, ensure that <envar>JBOSS_HOME</envar> is set in the current session, and actually points to the correct location:
			</para>
			<note>
				<para>
					The command line usage below is based upon a binary installation of the <application>Mobicents Platform</application>. In this sample output, <envar>JBOSS_HOME</envar> has been set correctly to the <replaceable>topmost_directory</replaceable> of the <application>Mobicents</application> installation. Note that if you are installing one of the standalone <application>Mobicents</application> servers (with <application>JBoss AS</application> bundled!), then <envar>JBOSS_HOME</envar> would point to the <replaceable>topmost_directory</replaceable> of your server installation.
				</para>
			</note>
			<!--   ~]$ echo $JBOSS_HOME
/home/silas/&MOB_JBOSS_HOME_LIN;   --> 
<screen>~]$ echo $JBOSS_HOME
/home/silas/mobicents-all-1.2.1.GA-jboss-4.2.3.GA/jboss/
</screen>
		</step>
	</procedure>
	
	<formalpara>
		<title>Setting the JBOSS_HOME Environment Variable on Windows</title>
		<para>
			The <envar>JBOSS_HOME</envar> environment variable must point to the directory which contains all of the files for the <phrase>Mobicents Platform or individual Mobicents server</phrase> that you installed. As another hint, this topmost directory contains a <filename>bin</filename> subdirectory.
		</para>
	</formalpara>
	<para>
		For information on how to set environment variables in recent versions of Windows, refer to <ulink url="http://support.microsoft.com/kb/931715"/>.
	</para>
</section>
	</section>
	
	<section id="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Configuring">
		<title>Configuring</title>
		<para>
			To configure MSS for JBoss, refer to <xref linkend="bsssc-binary-SIP_Servlets_Server-Configuring"/>.
		</para>
	</section>
	
	<section id="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Running">
		<title>Running</title>
		<para>
			To start the server, execute one of the startup scripts in the <filename>bin</filename> directory (on Linux or Windows), or by double-clicking the <filename>run.bat</filename> executable batch file in that same directory (on Windows only). It is recommended that the JBoss Application Server is started using the terminal or Command Prompt because the messages displayed during startup can be used to debug, and subsequently correct, any problems. In the Linux terminal or Command Prompt, a successfully started server will return the following information (ending with "Started in 23s:648ms"):
		</para>
		
<programlisting>17:48:01,247 INFO  [Server] JBoss (MX MicroKernel) [4.2.2.GA (build: SVNTag=JBoss_4_2_2_GA date=200710221139)] Started in 20s:861ms
</programlisting>
		<para>
			Detailed instructions are given below, arranged by platform.
		</para>
		<procedure>
			<title>Running MSS for JBoss on Linux</title>
			<step>
				<para>
					Change the working directory to MSS for JBoss's installation directory (the one in which the zip file's contents was extracted to)
				</para>
				
<screen>downloads]$ cd "mss-jboss-&lt;version&gt;"
</screen>
			</step>
			<step>
				<para>
					(Optional) Ensure that the <filename>bin/run.sh</filename> start script is executable.
				</para>
				
<screen>mss-jboss-&lt;version&gt;]$ chmod +x bin/run.sh
</screen>
			</step>
			<step>
				<para>
					Execute the <filename>run.sh</filename> Bourne shell script.
				</para>
				
<screen>mss-jboss-&lt;version&gt;]$ ./bin/run.sh
</screen>
			</step>
		</procedure>
		
		<note>
			<para>
				Instead of executing the Bourne shell script to start the server, the <filename>run.jar</filename> executable Java archive can be executed from the <filename>bin</filename> directory:
			</para>
			
<screen>mss-jboss-&lt;version&gt;]$ java -jar bin/run.jar
</screen>
		</note>
		<procedure>
			<title>Running MSS for JBoss on <productname>Windows</productname>
			</title>
			<para>
				There are several ways to start MSS for JBoss on Windows. All of the following methods accomplish the same task.
			</para>
			<step>
				<para>
					Using Windows Explorer, navigate to the <filename>bin</filename> subdirectory in the installation directory.
				</para>
			</step>
			<step>
				<para>
					The preferred way to start MSS for JBoss from the Command Prompt. The command line interface displays details of the startup process, including any problems encountered during the startup process.
				</para>
				<para>
					Open the Command Prompt via the <guilabel>Start</guilabel> menu and navigate to the correct folder:
				</para>
				
<screen>C:\Users\&lt;user&gt;My Downloads&gt; cd "mss-jboss-&lt;version&gt;"
</screen>
			</step>
			<step>
				<para>
					Start the JBoss Application Server by executing one of the following files: 
					<itemizedlist>
						<listitem>
							<para>
								<filename>run.bat</filename> batch file:
							</para>
							
<screen>C:\Users\&lt;user&gt;My Downloads\mss-jboss-&lt;version&gt;&gt;bin\run.bat
</screen>
						</listitem>
						<listitem>
							<para>
								<filename>run.jar</filename> executable Java archive:
							</para>
							
<screen>C:\Users\&lt;user&gt;My Downloads\mss-jboss-&lt;version&gt;&gt;java -jar bin\run.jar
</screen>
						</listitem>
					</itemizedlist>
				</para>
			</step>
		</procedure>

	</section>
	
	<section id="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Using">
		<title>Using</title>
		<para>
			Once the server is running, access the SIP Servlets Management Console by opening <ulink url="http://localhost:8080/sip-servlets-management/"/>.
		</para>
	</section>
	
	<section>
		<title>Testing</title>
		<para>
			After installation, there should be one pre-configured sample application deployed in the <literal>default</literal> server onfiguration. You can use it to verify that the server is installed and running correctly. The application name is <quote>org.mobicents.servlet.sip.example.SimpleApplication</quote>. From the Sip Servlets Management Console you can make sure it is subscribed to receive <literal>INVITE</literal> and <literal>REGISTER</literal> SIP requests. It is a simple <filename>Click2Call</filename> application allowing SIP registration and calling phones from the Web user interface.
		</para>
		<para>
			The scenario for this example consists of the following steps:
		</para>
		<orderedlist>
			<listitem>
				<para>
					Alice and Bob each register a SIP Softphone
				</para>
			</listitem>
			<listitem>
				<para>
					Alice clicks on the "Call" link to place a call to Bob
				</para>
			</listitem>
			<listitem>
				<para>
					Alice's phone rings
				</para>
			</listitem>
			<listitem>
				<para>
					When Alice picks up her phone, Bob's phone rings
				</para>
			</listitem>
			<listitem>
				<para>
					When Bob answers his phone, the call is connected
				</para>
			</listitem>
			<listitem>
				<para>
					When one of them hangs up, the other one is also disconnected
				</para>
			</listitem>
		</orderedlist>
		<procedure>
			<title>Testing the Click2Call sample application</title>
			<step>
				<para>
					Open up a browser to <ulink url="http://localhost:8080/click2call/">http://localhost:8080/click2call/</ulink>. If you have no registered SIP clients you will be asked to register at least two.
				</para>
			</step>
			<step>
				<para>
					Configure your SIP clients to use the sip servlets server as a register and proxy. (IP address : 127.0.0.1, port: 5080) By default it will accept any password
				</para>
			</step>
			<step>
				<para>
					After the registration you will see a table where each cell will initiate a call between the corresponding clients.
				</para>
			</step>
			<step>
				<para>
					Close the calls.
				</para>
			</step>
			<step>
				<para>
					Navigate to <ulink url="http://localhost:8080/click2call/simplecall.html">http://localhost:8080/click2call/simplecall.html</ulink>, which is a simplified version that doesn't require registered clients.
				</para>
			</step>
			<step>
				<para>
					Enter the URIs of the two SIP phones you just started and click "Submit"
				</para>
			</step>
			<step>
				<para>
					The phones should be ringing again. You can pick them up and you will know that the SIP and the HTTP containers are working properly.
				</para>
			</step>
		</procedure>

	</section>
	
	<section id="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Stopping">
		<title>Stopping</title>
		<para>
			Detailed instructions for stopping the JBoss Application Server are given below, arranged by platform. If the server is correctly stopped, the following three lines are displayed as the last output in the Linux terminal or Command Prompt:
		</para>
		
<programlisting>[Server] Shutdown complete
Shutdown complete
Halting VM
</programlisting>
		<!-- <procedure>
   <title>Stopping MSS for JBoss on Linux by Issuing a Control Code</title>
   <step>
    <para>Assuming that you started the JBoss Application Server as a foreground process in the terminal, the easiest way to stop it is by pressing the <keycombo
      action="simul"><keycap>Ctrl</keycap>
      <keycap>c</keycap>
     </keycombo> key combination in the same terminal in which you started it.
      </para>
   </step>
  </procedure> --> <procedure>
			<title>Stopping MSS for JBoss on Linux</title>
			<step>
				<para>
					Change the working directory to the binary distribution's install directory.
				</para>
				
<screen>~]$ cd "mss-jboss-&lt;version&gt;"
</screen>
			</step>
			<step>
				<para>
					(Optional) Ensure that the bin/shutdown.sh start script is executable:
				</para>
				
<screen>mss-jboss-&lt;version&gt;]$ chmod +x bin/shutdown.sh
</screen>
			</step>
			<step>
				<para>
					Run the <filename>shutdown.sh</filename> executable Bourne shell script with the <option>-S</option> option (the short option for <option>--shutdown</option>) as a command line argument:
				</para>
				
<screen>mss-jboss-&lt;version&gt;]$ ./bin/shutdown.sh -S
</screen>
			</step>
		</procedure>
		
		<note>
			<para>
				The <filename>shutdown.jar</filename> executable Java archive with the <option>-S</option> option can also be used to shut down the server:
			</para>
			
<screen>mss-jboss-&lt;version&gt;]$ java -jar bin/shutdown.jar -S
</screen>
		</note>
		<procedure>
			<title>Stopping MSS for JBoss on Windows</title>
			<step>
				<para>
					Stopping the JBoss Application Server on Windows consists in executing either the <filename>shutdown.bat</filename> or the <filename>shutdown.jar</filename> executable file in the <filename>bin</filename> subdirectory of the MSS for JBoss binary distribution. Ensure the <option>-S</option> option (the short option for <option>--shutdown</option>) is included in the command line argument.
				</para>
				
<screen>C:\Users\&lt;user&gt;\My Downloads\mss-jboss-&lt;version&gt;&gt;bin\shutdown.bat -S
</screen>
				<stepalternatives>
				<step>
					<para>
						The <filename>shutdown.jar</filename> executable Java archive with the <option>-S</option> option can also be used to shut down the server:
					</para>
					
<screen>C:\Users\&lt;user&gt;\My Downloads\mss-jboss-&lt;version&gt;&gt;java -jar bin\shutdown.jar -S
</screen>
				</step>
				</stepalternatives>
			</step>
		</procedure>

	</section>
	
	<!-- <section
  id="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Testing">
  <title>Testing</title>
  <para>&nbsp;</para>
 </section> --> <section id="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Uninstalling">
		<title>Uninstalling</title>
		<para>
			To uninstall MSS for JBoss, delete the directory containing the binary distribution.
		</para>
	</section>

</section>
	<section id="bssswticar-SIP_Servlets_Server_with_Tomcat-Installing_Configuring_and_Running" lang="en-US">
	<!--  chapter id nickname: bssswticar  --><title>SIP Servlet-Enabled Tomcat Servlet Container: Installing, Configuring and Running</title>
	<para>
		You can also run Mobicents SIP Servlets on top of the Apache Tomcat Servlet Container. This section provides information on the requirements and prerequisites for running MSS for Tomcat, as well as instructions on how to download, install, configure, run, use, stop, test and uninstall it.
	</para>
	<para>
		Keep in mind that not all capabilities provided by running Mobicents SIP Servlets Server on top of the JBoss Application Server are available with MSS for Tomcat. In particular, MSS for Tomcat lacks support for both clustering and failover; MSS for Tomcat nodes can utilize the SIP load balancer, however.
	</para>
	<para>
		If you are interested in clustering and failover support, or would rather run the Mobicents SIP Servlets Server on top of the JBoss Application Server, go to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running"/>.
	</para>
	<formalpara>
		<title>Differences Between the Standard Tomcat Installation and One Customized for the SIP Servlets Server</title>
		<para>
			Provided here is a list of differences between a standard Tomcat Servlet Container installation and the SIP Servlets Server for Tomcat installation. The differences include:
		</para>
	</formalpara>
	<itemizedlist>
		<listitem>
			<para>
				The <filename>server.xml</filename> configuration file has been modified to provide extended classes to the standard Tomcat container classes, in order to allow SIP applications to be loaded and the SIP stack started.
			</para>
		</listitem>
		<listitem>
			<para>
				A <filename>dars</filename> directory containing the default applications' router properties files for using the SIP Servlet Click-to-Call application (which comes bundled with the release) has been added to the <filename>conf</filename> directory.
			</para>
		</listitem>
		<listitem>
			<para>
				Additional JAR files which can be found in the <filename>lib</filename> directory have been added to enable SIP Servlet functionality.
			</para>
		</listitem>
	</itemizedlist>
	<bridgehead id="bssswticar-Installing_the_Java_Development_Kit">Installing the Java Development Kit</bridgehead><section lang="en-US">
	<!--  chapter id nickname: jdkicar  --><title>Java Development Kit: Installing, Configuring and Running</title>
	<para>
		The <application condition="mob">Mobicents</application> platform is written in Java. A working Java Runtime Environment (<acronym>JRE</acronym>) or Java Development Kit (<acronym>JDK</acronym>) must be installed prior to running the server. The required version must be version 5 or higher.
	</para>
	<para>
		It is possible to run most <application condition="mob">Mobicents</application> servers, such as the JAIN SLEE Server, using a Java 6 JRE or JDK. However, the XML Document Management Server does not run on Java 6. Check the <ulink url="http://groups.google.com/group/mobicents-public/topics">public support forum</ulink> and <ulink url="http://www.mobicents.org/roadmap.html">project road map</ulink> pages to verify Java 6 support prior to running the XML Document Management Server with Java 6.
	</para>
	<formalpara>
		<title>JRE or JDK?</title>
		<para>
			Although <application condition="mob">Mobicents</application> servers are capable of running on the Java Runtime Environment, this guide assumes the audience is mainly developers interested in developing Java-based, <application condition="mob">Mobicents</application>-driven solutions. Therefore, installing the Java Development Kit is covered due to the anticipated audience requirements.
		</para>
	</formalpara>
	<formalpara>
		<title>32-Bit or 64-Bit JDK</title>
		<para>
			If the system uses 64-Bit Linux or Windows architecture, the 64-bit JDK is strongly recommended over the 32-bit version. The following heuristics should be considered in determining whether the 64-bit Java Virtual Machine (JVM) is suitable:
		</para>
	</formalpara>
	<itemizedlist>
		<listitem>
			<para>
				Wider datapath: the pipe between RAM and CPU is doubled, which improves the performance of memory-bound applications when using a 64-bit JVM.
			</para>
		</listitem>
		<listitem>
			<para>
				64-bit memory addressing provides a virtually unlimited (1 exabyte) heap allocation. Note that large heaps can affect garbage collection.
			</para>
		</listitem>
		<listitem>
			<para>
				Applications that run with more than 1.5 GB of RAM (including free space for garbage collection optimization) should utilize the 64-bit JVM.
			</para>
		</listitem>
		<listitem>
			<para>
				Applications that run on a 32-bit JVM and do not require more than minimal heap sizes will gain nothing from a 64-bit JVM. Excluding memory issues, 64-bit hardware with the same relative clock speed and architecture is not likely to run Java applications faster than the 32-bit version.
			</para>
		</listitem>
	</itemizedlist>
	<note>
		<para>
			The following instructions describe how to download and install the 32-bit JDK, however the steps are nearly identical for installing the 64-bit version.
		</para>
	</note>
	<!--  <formalpara
   id="jdkicar-binary-Java_Development_Kit-Pre-Install Requirements and Prerequisites">
   <title>Pre-Install Requirements and Prerequisites</title>
   <para></para>
  </formalpara>  --><!--   <variablelist
   condition="jdkicar-binary-Java_Development_Kit-Hardware_Requirements">
   <title>Hardware Requirements</title>
   <varlistentry>
    <term>Sufficient Disk Space</term>
    <listitem>
     <para></para>
    </listitem>
   </varlistentry>
  </variablelist>   --><!--   <variablelist
   condition="jdkicar-binary-Java_Development_Kit-Software_Prerequisites">
   <title>Software Prerequisites</title>
   <varlistentry>
    <term></term>
    <listitem>
     <para></para>
    </listitem>
   </varlistentry>
  </variablelist>   --> <formalpara>
		<!--  id="jdkicar-binary-Java_Development_Kit-Downloading">  --> <title>Downloading</title>
		<para>
			Download the Sun JDK 5.0 (Java 2 Development Kit) from Sun's website: <ulink url="http://java.sun.com/javase/downloads/index_jdk5.jsp"/>. Click the <guilabel>Download</guilabel> link next to "JDK 5.0 Update <replaceable>&lt;x&gt;</replaceable>" (where <replaceable>&lt;x&gt;</replaceable> is the latest minor version release number).
		</para>
	</formalpara>
	<para>
		The Sun website offers two download options: 
		<itemizedlist>
			<listitem>
				<para>
					A self-extracting RPM (for example, <filename>jdk-1_5_0_16-linux-i586-rpm.bin</filename>)
				</para>
			</listitem>
			<listitem>
				<para>
					A self-extracting file (e.g. <filename>jdk-1_5_0_16-linux-i586.bin</filename>)
				</para>
			</listitem>
		</itemizedlist>
	</para>
	<para>
		If installing the JDK on Red Hat Enterprise Linux, Fedora, or another RPM-based Linux system, it is recommended that the self-extracting file containing the RPM package is selected. This option will set up and use the SysV service scripts in addition to installing the JDK. The RPM option is also recommended if the <application condition="mob">Mobicents</application> platform is being set up in a production environment.
	</para>
	<formalpara>
		<!--  id="jdkicar-binary-Java_Development_Kit-Installing">  --> <title>Installing</title>
		<para>
			The following procedures detail how to install the Java Development Kit on both Linux and Windows.
		</para>
	</formalpara>
	<procedure>
		<title>Installing the JDK on Linux</title>
		<step>
			<para>
				Ensure the file is executable, then run it:
			</para>
			<!--   ~]$ chmod +x "jdk-1_5_0_<minor_version>-linux-<architecture>-rpm.bin"
~]$ ./"jdk-1_5_0_<minor_version>-linux-<architecture>-rpm.bin"   --> 
<screen>~]$ chmod +x "jdk-1_5_0_&lt;minor_version&gt;-linux-&lt;architecture&gt;-rpm.bin"
~]$ ./"jdk-1_5_0_&lt;minor_version&gt;-linux-&lt;architecture&gt;-rpm.bin"
</screen>
		</step>
	</procedure>
	
	<note>
		<title>Setting up SysV Service Scripts for Non-RPM Files</title>
		<para>
			If the non-RPM self-extracting file is selected for an RPM-based system, the SysV service scripts can be configured by downloading and installing one of the <literal>-compat</literal> packages from the JPackage project. Download the <literal>-compat</literal> package that corresponds correctly to the minor release number of the installed JDK. The compat packages are available from <ulink url="ftp://jpackage.hmdc.harvard.edu/JPackage/1.7/generic/RPMS.non-free/"/>.
		</para>
	</note>
	<important>
		<para>
			A <literal>-compat</literal> package is not required for RPM installations. The <literal>-compat</literal> package performs the same SysV service script set up that the RPM version of the JDK installer does.
		</para>
	</important>
	<procedure>
		<title>Installing the JDK on Windows</title>
		<step>
			<para>
				Using Explorer, double-click the downloaded self-extracting installer and follow the instructions to install the JDK.
			</para>
		</step>
	</procedure>
	
	<formalpara>
		<!--  id="jdkicar-binary-Java_Development_Kit-Configuring">  --> <title>Configuring</title>
		<para>
			Configuring the system for the JDK consists of two tasks: setting the <envar>JAVA_HOME</envar> environment variable, and ensuring the system is using the proper JDK (or JRE) using the <command>alternatives</command> command. Setting <envar>JAVA_HOME</envar> generally overrides the values for <command>java</command>, <command>javac</command> and <command>java_sdk_1.5.0</command> in <command>alternatives</command>, however it is recommended to specify the value for consistency.
		</para>
	</formalpara>
	<variablelist>
		<varlistentry>
			<term>Setting the <envar>JAVA_HOME</envar> Environment Variable on Generic Linux</term>
			<listitem>
				<para>
					After installing the JDK, ensure the <envar>JAVA_HOME</envar> environment variable exists and points to the location of the JDK installation.
				</para>
				<formalpara>
					<title>Setting the <envar>JAVA_HOME</envar> Environment Variable on Linux</title>
					<para>
						Determine whether <envar>JAVA_HOME</envar> is set by executing the following command:
					</para>
				</formalpara>
				
<screen>~]$ echo $JAVA_HOME
</screen>
				<para>
					If <envar>JAVA_HOME</envar> is not set, the value must be set to the location of the JDK installation on the system. This can be achieved by adding two lines to the <filename>~/.bashrc</filename> configuration file. Open <filename>~/.bashrc</filename> (or create it if it does not exist) and add a line similar to the following one anywhere inside the file:
				</para>
				
<programlisting>export JAVA_HOME="/usr/lib/jvm/jdk1.5.0_&lt;version&gt;"
</programlisting>
				<para>
					The changes should also be applied for other users who will be running the <application condition="mob">Mobicents</application> on the machine (any environment variables <command>export</command>ed from <filename>~/.bashrc</filename> files are local to that user).
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Setting <envar>java</envar>, <envar>javac</envar> and <envar>java_sdk_1.5.0</envar> using the <command>alternatives</command> command </term>
			<listitem>
				<para>
					On systems with the <command>alternatives</command> command, including Red Hat Enterprise Linux and Fedora, it is possible to choose which JDK (or JRE) installation to use, as well as which <command>java</command> and <command>javac</command> executables should be run when called.
				</para>
				<para>
					<emphasis>As the superuser</emphasis>, call <command>/usr/sbin/alternatives</command> with the <option>--config java</option> option to select between JDKs and JREs installed on your system:
				</para>
				
<programlisting>
home]$ sudo /usr/sbin/alternatives --config java

There are 3 programs which provide 'java'.

  Selection    Command
-----------------------------------------------
   1           /usr/lib/jvm/jre-1.5.0-gcj/bin/java
   2           /usr/lib/jvm/jre-1.6.0-sun/bin/java
*+ 3         /usr/lib/jvm/jre-1.5.0-sun/bin/java

Enter to keep the current selection[+], or type selection number:
</programlisting>
				<para>
					The Sun JDK, version 5, is required to run the <command>java</command> executable. In the <command>alternatives</command> information printout above, a plus (<literal>+</literal>) next to a number indicates the option currently being used. Press <keycap>Enter</keycap> to keep the current JVM, or enter the number corresponding to the JVM to select that option.
				</para>
				<para>
					As the superuser, repeat the procedure above for the <command>javac</command> command and the <literal>java_sdk_1.5.0</literal> environment variable:
				</para>
				
<screen>home]$ sudo /usr/sbin/alternatives --config javac
</screen>
				
<screen>home]$ sudo /usr/sbin/alternatives --config java_sdk_1.5.0
</screen>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Setting the <envar>JAVA_HOME</envar> Environment Variable on Windows</term>
			<listitem>
				<para>
					For information on how to set environment variables in Windows, refer to <ulink url="http://support.microsoft.com/kb/931715"/>.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<formalpara>
		<!--  id="jdkicar-binary-Java_Development_Kit-Testing">  --> <title>Testing</title>
		<para>
			To ensure the correct JDK or Java version (5 or higher), and that the java executable is in the <envar>PATH</envar> environment variable, run the <command>java -version</command> command in the terminal from the home directory:
		</para>
	</formalpara>
	
<screen>
home]$ java -version
java version "1.5.0_16"
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_16-b03)
Java HotSpot(TM) Client VM (build 1.5.0_16-b03, mixed mode, sharing)
</screen>
	<!--  <formalpara
  id="jdkicar-binary-Java_Development_Kit-Running">
  <title>Running</title>
  <para></para>
 </formalpara>  --><!--   <formalpara
  id="jdkicar-binary-Java_Development_Kit-Stopping">
  <title>Stopping</title>
  <para></para>
 </formalpara>   --> <formalpara>
		<!--  id="jdkicar-binary-Java_Development_Kit-Uninstalling">  --> <title>Uninstalling</title>
		<para>
			It is not necessary to remove a particular JDK from a system, because the JDK and JRE version can be switched as required using the <command>alternatives</command> command, and/or by setting <envar>JAVA_HOME</envar>.
		</para>
	</formalpara>
	<formalpara>
		<title>Uninstalling the JDK on Linux</title>
		<para>
			On RPM-based systems, uninstall the JDK using the <command>yum remove &lt;jdk_rpm_name&gt;</command> command.
		</para>
	</formalpara>
	<formalpara>
		<title>Uninstalling the JDK on Windows</title>
		<para>
			On Windows systems, check the JDK entry in the <literal>Start</literal> menu for an uninstall option, or use <literal>Add/Remove Programs</literal>.
		</para>
	</formalpara>
</section>
	<section id="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-PreInstall_Requirements_and_Prerequisites">
		<title>Pre-Install Requirements and Prerequisites</title>
		<variablelist id="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Hardware_Requirements">
			<title>Hardware Requirements</title>
			<varlistentry>
				<term>Sufficient Disk Space</term>
				<listitem>
					<para>
						You must have sufficient disk space in order to install the MSS for Tomcat binary release. Once unzipped, version 0.5 of the MSS for Tomcat binary release requires <emphasis>at least</emphasis> 20 MB of free disk space. Keep in mind that disk space requirements may change from release to release.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Anything Java Itself Will Run On</term>
				<listitem>
					<para>
						MSS for Tomcat is 100% Java. It will run on the same hardware that the Tomcat Servlet Container runs on.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<variablelist id="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Software_Prerequisites">
			<title>Software Prerequisites</title>
			<varlistentry>
				<term>JDK 5 or Higher</term>
				<listitem>
					<para>
						A working installation of the Java Development Kit (<acronym>JDK</acronym>) version 5 or higher is required in order to run MSS for Tomcat.
					</para>
					<!-- <para>For instructions on how to install the JDK, refer to <xref linkend="bssswticar-Installing_the_Java_Development_Kit"/>.</para> -->
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
	
	<section id="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Downloading">
		<title>Downloading</title>
		<para>
			You can download the latest version of MSS for Tomcat from <ulink url="http://www.mobicents.org/mss-downloads.html"/>. The top row of the table holds the latest version. Note that each release of the Mobicents SIP Servlets Server is comprised of two separate binary distribution files: one which is MSS for JBoss, and the other which is MSS for Tomcat. Download Mobicents SIP Servlets Server for Tomcat and continue with the following instructions.
		</para>
	</section>
	
	<section id="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Installing">
		<title>Installing</title>
		<para>
			Once the requirements and prerequisites have been met and you have downloaded the binary distribution zip file, you are ready to install MSS for Tomcat. Follow the instructions below for your platform, whether Linux or Windows.
		</para>
		<note id="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Use_Version_Numbers_Relevant_to_Your_Installation">
			<title>Use Version Numbers Relevant to Your Installation!</title>
			<para>
				For clarity, the command line instructions presented in this chapter use specific version numbers and directory names. Remember to replace them with version numbers and file names relevant to those you are actually working with.
			</para>
		</note>
		<procedure>
			<title>Installing the MSS for Tomcat Binary Distribution on Linux</title>
			<step>
				<para>
					For this example, we'll assume you're currently in your home directory, which is where you downloaded the zip file to. First, create a subdirectory to hold the unzipped MSS for Tomcat files. It is good practice to include the version number in this directory name; if you do so, remember to correctly match it with the version of the MSS for Tomcat distribution you downloaded.
				</para>
				
<screen>~]$ cd downloads
</screen>
			</step>
			<step>
				<para>
					In <filename>downloads</filename>, create a subdirectory to hold the unzipped MSS for Tomcat files. It is good practice to include the version number in this directory name; if you do so, remember to correctly match it with the version of the MSS for Tomcat binary distribution you downloaded.
				</para>
				
<screen>~]$ mkdir "mss-tomcat-&lt;version&gt;"
</screen>
			</step>
			<step>
				<para>
					Move the downloaded zip file into the directory you have just created:
				</para>
				
<screen>~]$ mv "mss-1.0.0.GA-apache-tomcat-6.0.14-0904211257.zip" "mss-tomcat-&lt;version&gt;"
</screen>
			</step>
			<step>
				<para>
					Move into that directory:
				</para>
				
<screen>~]$ cd "mss-tomcat-&lt;version&gt;"
</screen>
			</step>
			<step>
				<para>
					Finally, use Java's <command>jar <option>-xvf</option></command> command to extract the contents of the zip file into the current directory, thus completing the install:
				</para>
				
<screen>mss-tomcat-&lt;version&gt;]$ jar -xvf "mss-1.0.0.GA-apache-tomcat-6.0.14-0904211257.zip"
</screen>
				<stepalternatives>
				<step>
					<para>
						Alternatively, if Linux's <command>unzip</command> utility is present on your system or is installable, you can use it in lieu of Java's <command>jar <option>-xvf</option></command> command:
					</para>
					
<screen>mss-tomcat-&lt;version&gt;]$ unzip "mss-1.0.0.GA-apache-tomcat-6.0.14-0904211257.zip"
</screen>
					<note>
						<para>
							You can also use <command>unzip</command>'s <option>-d</option><filename><replaceable>&lt;unzip_to_location&gt;</replaceable></filename> option to extract the zip file's contents to a location other than the current directory.
						</para>
					</note>
				</step>
				</stepalternatives>
			</step>
			<step>
				<para>
					To free disk space, you may want to delete the zip file once you've extracted its contents:
				</para>
				
<screen>mss-tomcat-&lt;version&gt;]$ rm "mss-1.0.0.GA-apache-tomcat-6.0.14-0904211257.zip"
</screen>
			</step>
		</procedure>
		
		<procedure>
			<title>Installing the MSS for Tomcat Binary Distribution on Windows</title>
			<step>
				<para>
					For this example, we'll assume that you downloaded the binary distribution zip file to the <filename>My Downloads</filename> folder. First, using Windows Explorer, create a subdirectory in <filename>My Downloads</filename> to extract the zip file's contents into. When you name this folder, it is good practice to include the version number; if you do so, remember to correctly match it with the version of the MSS for Tomcat binary distribution you downloaded. In these instructions, we will refer to this folder as <filename>mss-tomcat-<replaceable>&lt;version&gt;</replaceable></filename>.
				</para>
			</step>
			<step>
				<para>
					Double-click the downloaded zip file, selecting as the destination folder the one you just created to hold the zip file's contents.
				</para>
				<stepalternatives>
				<step>
					<para>
						Alternatively, it is also possible to use Java's <command>jar <option>-xvf</option></command> command to extract the binary distribution files from the zip archive. To use this method instead, first move the downloaded zip file from <filename>My Downloads</filename> to the folder that you just created to hold the SIP Servlets Server files.
					</para>
				</step>
				<step>
					<para>
						Then, open the Windows Command Prompt and navigate to the folder holding the archive using the <command>cd</command> command.
					</para>
					<note id="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Opening_the_Command_Prompt_from_Windows_Explorer">
						<title>Opening the Command Prompt from Windows Explorer</title>
						<para>
							If you are using Windows Vista®, you can open the Command Prompt directly from Explorer. Hold down the <keycap>Shift</keycap> key and right-click on either a folder, the desktop, or inside a folder. This will cause an <guimenuitem>Open Command Window Here</guimenuitem> context menu item to appear, which can be used to open the Command Prompt with the current working directory set to either the folder you opened, or opened it from.
						</para>
					</note>
				</step>
				<step>
					<para>
						Finally, use the <command>jar <option>-xvf</option></command> command to extract the archive contents into the current folder.
					</para>
					
<screen>C:\Users\Me\My Downloads\mss-tomcat-&lt;version&gt;&gt;jar -xvf "mss-1.0.0.GA-apache-tomcat-6.0.14-0904211257.zip"
</screen>
				</step>
				</stepalternatives>
			</step>
			<step>
				<para>
					At this point, you may want to move the folder holding the MSS for Tomcat binary files (in this example, the folder named <filename>mss-tomcat-<replaceable>&lt;version&gt;</replaceable></filename>) to another location. This step is not strictly necessary, but it is probably a good idea to move the installation folder from <filename>My Downloads</filename> to a user-defined location for storing runnable programs. Any location will suffice, however.
				</para>
			</step>
			<step>
				<para>
					You may want to delete the zip file after extracting its contents in order to free disk space:
				</para>
				
<screen>C:\Users\Me\My Downloads\mss-tomcat-&lt;version&gt;&gt;delete "mss-1.0.0.GA-apache-tomcat-6.0.14-0904211257.zip"
</screen>
			</step>
		</procedure>

	</section>
	
	<section id="section-SIP_Servlets_Server_with_Tomcat-Setting_the_CATALINA_HOME_Environment_Variable">
		<title>Setting the CATALINA_HOME Environment Variable</title>
		<para>
			Before running the Mobicents server you are installing, you should consider if you need to set the <envar>CATALINA_HOME</envar> environment variable. Setting it (or re-setting it) will always work. Whether or not you <emphasis>need</emphasis> to set <envar>CATALINA_HOME</envar> depends on the following factors:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					If you are installing a binary Mobicents server and <envar>CATALINA_HOME</envar> is not set on your system, then you <emphasis>do not need</emphasis> to set it, but doing so will do no harm.
				</para>
			</listitem>
			<listitem>
				<para>
					If you are installing a binary Mobicents server and <envar>CATALINA_HOME</envar> is (already) set on your system, then you need to make sure it points to the location of the new Mobicents server.
				</para>
			</listitem>
			<listitem>
				<para>
					If you are installing a Mobicents server from source which uses the Tomcat servlet container, then you <emphasis>must</emphasis> set <envar>CATALINA_HOME</envar>.
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The following instructions detail how to set <envar>CATALINA_HOME</envar> on both Linux and Windows.
		</para>
		<procedure id="bssswticar-Setting_the_CATALINA_HOME_Environment_Variable_on_Linux">
			<title>Setting the <envar>CATALINA_HOME</envar> Environment Variable on Linux</title>
			<step>
				<para>
					The <envar>CATALINA_HOME</envar> environment variable must point to the location of your Tomcat installation. Any Mobicents server which runs on top of the Tomcat servlet container has a topmost directory, i.e. the directory in which you unzipped the zip file to install the server, and underneath that directory, a <filename>bin</filename> directory. <envar>CATALINA_HOME</envar> must be set to the topmost directory of your Mobicents server installation.
				</para>
				<para>
					Setting this variable in your personal <filename>~/.bashrc</filename> file has the advantage that it will always be set (for you, as a user) each time you log in or reboot the system. To do so, open <filename>~/.bashrc</filename> in a text editor (or create the file if it doesn't already exist) and insert the following line anywhere in the file, taking care to substitute <filename>&lt;mobicents_server&gt;</filename> for the topmost directory of the Mobicents server you installed:
				</para>
				
<screen>export CATALINA_HOME="/home/&lt;username&gt;/&lt;path&gt;/&lt;to&gt;/&lt;mobicents_server&gt;"
</screen>
				<para>
					Save and close <filename>.bashrc</filename>.
				</para>
			</step>
			<step>
				<para>
					You can—and should—<command>source</command> your <filename>.bashrc</filename> file to make your change take effect (so that <envar>CATALINA_HOME</envar> is set) for the current session:
				</para>
				
<screen>~]$ source ~/.bashrc
</screen>
			</step>
			<step>
				<para>
					Finally, make sure that <envar>CATALINA_HOME</envar> has been set correctly (that it leads to the right directory), and has taken effect in the current session.
				</para>
				<para>
					The following command will show the path to the directory pointed to by <envar>CATALINA_HOME</envar>:
				</para>
				
<screen>~]$ echo $CATALINA_HOME
</screen>
				<para>
					To be absolutely sure, change your directory to the one pointed to by <envar>CATALINA_HOME</envar>:
				</para>
				
<screen>~]$ cd $CATALINA_HOME &amp;&amp; pwd
</screen>
			</step>
		</procedure>
		
		<procedure id="bssswticar-Setting_the_CATALINA_HOME_Environment_Variable_on_Windows">
			<title>Setting the <envar>CATALINA_HOME</envar> Environment Variable on Windows</title>
			<step>
				<para>
					The <envar>CATALINA_HOME</envar> environment variable must point to the location of your Tomcat installation. Any Mobicents server which runs on top of the Tomcat servlet container has a topmost directory, i.e. the directory in which you unzipped the zip file to install the server, and underneath that directory, a <filename>bin</filename> directory. <envar>CATALINA_HOME</envar> must be set to the topmost directory of your Mobicents server installation.
				</para>
				<para>
					If you are planning on running the Tomcat container as the Administrator, then you should, of course, set the <envar>CATALINA_HOME</envar> environment variable <emphasis>as the administrator</emphasis>, and if you planning to run Tomcat as a normal user, then set <envar>CATALINA_HOME</envar> as a user environment variable.
				</para>
				<para>
					For information on how to set environment variables in Windows, refer to <ulink url="http://support.microsoft.com/kb/931715"/>.
				</para>
			</step>
		</procedure>

	</section>
	
	<section id="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Configuring">
		<title>Configuring</title>
		<para>
			Configuring MSS for Tomcat consists in setting the <envar>CATALINA_HOME</envar> environment variable and then, optionally, customizing your MSS for Tomcat container by adding SIP Connectors, configuring the application router, and configuring logging. See <xref linkend="bsssc-binary-SIP_Servlets_Server-Configuring"/> to learn what and how to configure MSS for Tomcat.
		</para>
		<para>
			Alternatively, you can simply run your MSS for Tomcat container now and return to this section to configure it later.
		</para>
	</section>
	
	<section id="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Running">
		<title>Running</title>
		<para>
			Once installed, you can run the Tomcat Servlet Container by executing the one of the startup scripts in the <filename>bin</filename> directory (on Linux or Windows), or by double-clicking the <filename>run.bat</filename> executable batch file in that same directory (on Windows only). However, we suggest always starting Tomcat using the terminal or Command Prompt because you are then able to read—and act upon—any startup messages, and possibly debug any problems that may arise. In the Linux terminal or Command Prompt, you will be able to tell that the container started successfully if the last line of output is similar to the following:
		</para>
		
<programlisting>Using CATALINA_BASE:   /home/silas/temp/apps/mobicents/sip_servlets_server/mss-tomcat-0.7.2
Using CATALINA_HOME:   /home/silas/temp/apps/mobicents/sip_servlets_server/mss-tomcat-0.7.2
Using CATALINA_TMPDIR: /home/silas/temp/apps/mobicents/sip_servlets_server/mss-tomcat-0.7.2/temp
Using JRE_HOME:       /etc/java-config-2/current-system-vm
</programlisting>
		<para>
			Detailed instructions are given below, arranged by platform.
		</para>
		<procedure>
			<title>Running MSS for Tomcat on Linux</title>
			<step>
				<para>
					Change your working directory to the SIP Servlets-customized Tomcat's topmost directory (the one in which you extracted the zip file's contents to):
				</para>
				
<screen>~]$ cd "mss-tomcat-&lt;version&gt;"
</screen>
			</step>
			<step performance="optional">
				<para>
					(Optional) Ensure that the <filename>bin/startup.sh</filename> start script is executable:
				</para>
				
<screen>mss-tomcat-&lt;version&gt;]$ chmod +x bin/startup.sh
</screen>
			</step>
			<step>
				<para>
					Finally, execute the <filename>startup.sh</filename> Bourne shell script:
				</para>
				
<screen>mss-tomcat-&lt;version&gt;]$ ./bin/startup.sh
</screen>
			</step>
		</procedure>
		
		<procedure>
			<title>Running MSS for Tomcat on Windows</title>
			<step>
				<para>
					There are several different ways to start the Tomcat Servlet Container on Windows. All of the following methods accomplish the same task.
				</para>
				<para>
					Using Windows Explorer, change your folder to the one in which you unzipped the downloaded zip file, and then to the <filename>bin</filename> subdirectory.
				</para>
			</step>
			<step>
				<para>
					Although not the preferred way (see below), it is possible to start the Tomcat Servlet Container by double-clicking on the <filename>startup.bat</filename> executable batch file.
				</para>
				<stepalternatives>
				<step>
					<para>
						As mentioned above, the best way to start the Tomcat Servlet Container is by using the Command Prompt. Doing it this way will allow you to view all of the server startup details, which will enable you to easily determine whether any problems were encountered during the startup process. You can open the Command Prompt directly from the <filename>&lt;topmost_directory&gt;\bin</filename> folder in Windows Explorer,<!-- (see <xref
        linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Opening_the_Command_Prompt_from_Windows_Explorer"/> for details) --> or you can open the Command Prompt via the <guilabel>Start</guilabel> menu and navigate to the correct folder:
					</para>
					
<screen>C:\Users\Me\My Downloads&gt; cd "mss-tomcat-&lt;version&gt;"
</screen>
				</step>
				<step>
					<para>
						Start the Tomcat Servlet Container by running the executable <filename>startup.bat</filename> batch file:
					</para>
					
<screen>C:\Users\Me\My Downloads\mss-tomcat-&lt;version&gt;&gt;bin\startup.bat
</screen>
				</step>
				</stepalternatives>
			</step>
		</procedure>

	</section>
	
	<section id="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Stopping">
		<title>Stopping</title>
		<para>
			Detailed instructions for stopping the Tomcat Servlet Container are given below, arranged by platform. Note that if you properly stop the server, you will see the following three lines as the last output in the Linux terminal or Command Prompt (both running and stopping the Tomcat Servlet Container produces the same output):
		</para>
		
<screen>Using CATALINA_BASE:   /home/silas/temp/apps/mobicents/sip_servlets_server/mss-tomcat-0.7.2
Using CATALINA_HOME:   /home/silas/temp/apps/mobicents/sip_servlets_server/mss-tomcat-0.7.2
Using CATALINA_TMPDIR: /home/silas/temp/apps/mobicents/sip_servlets_server/mss-tomcat-0.7.2/temp
Using JRE_HOME:       /etc/java-config-2/current-system-vm
</screen>
		<procedure>
			<title>Stopping MSS for Tomcat on Linux by Executing <filename>shutdown.sh</filename></title>
			<step>
				<para>
					You can shut down the Tomcat Servlet Container by executing the <filename>shutdown.sh</filename> Bourne shell script in the <filename>&lt;topmost_directory&gt;/bin</filename> directory. To do so, first change your working directory to the binary distribution's topmost directory (the one to which you extracted the downloaded zip file's contents):
				</para>
				
<screen>downloads]$ cd "mss-tomcat-&lt;version&gt;"
</screen>
			</step>
			<step performance="optional">
				<para>
					(Optional) Ensure that the bin/shutdown.sh start script is executable:
				</para>
				
<screen>mss-tomcat-&lt;version&gt;]$ chmod +x bin/shutdown.sh
</screen>
			</step>
			<step>
				<para>
					Finally, run the <filename>shutdown.sh</filename> executable Bourne shell script
				</para>
				
<screen>mss-tomcat-&lt;version&gt;]$ ./bin/shutdown.sh
</screen>
			</step>
		</procedure>
		
		<procedure>
			<title>Stopping MSS for Tomcat on Windows</title>
			<step>
				<para>
					Stopping the Tomcat Servlet Container on Windows consists in executing the <filename>shutdown.bat</filename> executable batch script in the <filename>bin</filename> subdirectory of the SIP Servlets-customized Tomcat binary distribution:
				</para>
				
<screen>C:\Users\Me\My Downloads\mss-tomcat-&lt;version&gt;&gt;bin\shutdown.bat
</screen>
			</step>
		</procedure>

	</section>
	
	<section id="bssswticar-binary-SIP_Servlets_Server-Using">
		<title>Using</title>
		<para>
			After starting the server successfully, you can access the default web applications included with MSS for Tomcat by opening the following URL in your browser: <ulink url="http://localhost:8080/"/>.
		</para>
		<para>
			You can also access the SIP Servlets Management Console by opening <ulink url="http://localhost:8080/sip-servlets-management/"/> in your browser.
		</para>
	</section>
	
	<section id="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Testing">
		<title>Testing</title>
		<para>
			 
		</para>
	</section>
	
	<section id="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Uninstalling">
		<title>Uninstalling</title>
		<para>
			To uninstall MSS for Tomcat, simply delete the directory you decompressed the binary distribution archive into.
		</para>
	</section>

</section>
	<section id="bsssc-binary-SIP_Servlets_Server-Configuring" lang="en-US">
	<!--  chapter id nickname: bsssc  --><title>Configuring</title>
	<para>
		 
	</para>
	<section id="bsssc-binary-SIP_Servlets_Server-Adding_SIP_Connectors">
		<title>Configuring SIP Connectors</title>
		<para>
			SIP Connectors are added in the same way as HTTP Connectors: by adding a <literal>&lt;Connector&gt;</literal> element under the <literal>&lt;Service&gt;</literal> element in the container's <filename>server.xml</filename> configuration file.
		</para>
		<para>
			For example, to add a SIP Connector on the IP address <literal>127.0.0.1</literal>, on port <literal>5080</literal>, using the UDP transport protocol, you should insert the following XML element:
		</para>
		<example>
			<title>Adding a SIP Connector to server.xml</title>
			
<programlisting linenumbering="unnumbered" role="XML">
  &lt;Connector port="5080" 
ipAddress="127.0.0.1"
 protocol="org.mobicents.servlet.sip.startup.SipProtocolHandler"
 signalingTransport="udp"
 usePrettyEncoding="false"
 useStun="false"
 stunServerAddress="stun01.sipphone.com"
 stunServerPort="3478"
 sipStackPropertiesFile="conf/mss-sip-stack.properties"/&gt;
</programlisting>
		</example>
		<variablelist>
			<title>SIP &lt;connector&gt; Attributes</title>
			<varlistentry>
				<term>port</term>
				<listitem>
					<para>
						The port number on which the container will be able to receive SIP messages.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>ipAddress</term>
				<listitem>
					<para>
						The IP address at which the container will be able to receive SIP messages. The container can be configured to listen to all available IP addresses by setting <parameter>ipAddress</parameter> to <userinput>0.0.0.0 &lt;sipPathName&gt;</userinput>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>protocol</term>
				<listitem>
					<para>
						Specifies the connector is a SIP Connector and not an HTTP Connector. There is no need to change this property.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>signalingTransport</term>
				<listitem>
					<para>
						Specifies the transport on which the container will be able to receive SIP messages. For example, "udp".
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>usePrettyEncoding</term>
				<listitem>
					<para>
						Allows Via, Route, and RecordRoute header field information to be split into multiple lines, rather than each header field being separating with a comma. The attribute defaults to "true". Leaving this attribute at the default setting may assist in debugging non-RFC3261 compliant SIP servers.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>useStun</term>
				<listitem>
					<para>
						Enables Session Traversal Utilities for NAT (STUN) support for this Connector. The attribute defaults to "false". If set to "true", ensure that the <literal>ipAddress</literal> attribute is <emphasis>not</emphasis> set to <literal>127.0.0.1</literal>. Refer to <xref linkend="mssstun-MSS_STUN"/> for more information about STUN.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>stunServerAddress</term>
				<listitem>
					<para>
						Specifies the STUN server address used to discover the public IP address of the SIP Connector. This attribute is only required if the <literal>useStun</literal> attribute is set to "true". Refer to <xref linkend="mssstun-MSS_STUN"/> for more information about STUN and public STUN servers.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>stunServerPort</term>
				<listitem>
					<para>
						Specifies the STUN server port of the STUN server used in the <literal>stunServerAddress</literal> attribute. You should rarely need to change this attribute; also, it is only needed if the <literal>useStun</literal> attribute is set to "true". Refer to <xref linkend="mssstun-MSS_STUN"/> for more information about STUN.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>sipStackPropertiesFile</term>
				<listitem>
					<para>
						Specifies the location of the file containing key-value pairs corresponding to the SIP stack configuration properties. This attribute is used to further tune the JAIN SIP Stack. If this property is omitted, the following default values are assumed:
					</para>
					<itemizedlist>
						<listitem>
							<para>
								gov.nist.javax.sip.LOG_MESSAGE_CONTENT=true
							</para>
						</listitem>
						<listitem>
							<para>
								gov.nist.javax.sip.TRACE_LEVEL=32
							</para>
						</listitem>
						<listitem>
							<para>
								gov.nist.javax.sip.DEBUG_LOG=logs/mss-jsip-debuglog.txt
							</para>
						</listitem>
						<listitem>
							<para>
								gov.nist.javax.sip.SERVER_LOG=logs/mss-jsip-messages.xml
							</para>
						</listitem>
						<listitem>
							<para>
								javax.sip.STACK_NAME=Mobicents-SIP-Servlets
							</para>
						</listitem>
						<listitem>
							<para>
								javax.sip.AUTOMATIC_DIALOG_SUPPORT=off
							</para>
						</listitem>
						<listitem>
							<para>
								gov.nist.javax.sip.DELIVER_UNSOLICITED_NOTIFY=true
							</para>
						</listitem>
						<listitem>
							<para>
								gov.nist.javax.sip.THREAD_POOL_SIZE=64
							</para>
						</listitem>
						<listitem>
							<para>
								gov.nist.javax.sip.REENTRANT_LISTENER=true
							</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
		</variablelist>
		<note>
			<para>
				A comprehensive list of implementing classes for the SIP Stack is available from the <ulink url="http://snad.ncsl.nist.gov/proj/iptel/jain-sip-1.2/javadoc/javax/sip/SipStack.html">Interface Sip Stack page on nist.gov</ulink>. For a comprehensive list of properties associated with the SIP Stack implementation, refer to <ulink url="http://snad.ncsl.nist.gov/proj/iptel/jain-sip-1.2/javadoc/gov/nist/javax/sip/SipStackImpl.html">Class SipStackImpl page on nist.gov</ulink>.
			</para>
		</note>
	</section>
	
	<section id="bsssc-binary-SIP_Servlets_Server-Configuring_Application_Routing">
		<title>Application Routing and Service Configuration</title>
		<para>
			The application router is called by the container—whether JBoss or Tomcat—to select a SIP Servlet application to service an initial request. It embodies the logic used to choose which applications to invoke. An application router is required for a container to function, but it is a separate logical entity from the container. The application router is solely responsible for application selection and must not implement application logic. For example, the application router cannot modify a request or send a response.
		</para>
		<para>
			For more information about the application router, refer to the following sections of the JSR 289 specification: Application Router Packaging and Deployment, Application Selection Process, and Appendix C.
		</para>
		<para>
			In order to configure the application router, you should edit the <literal>Service</literal> element in the container's <filename>server.xml</filename> configuration file:
		</para>
		<example id="bsssc-Configuring_the_Service_Element_in_the_Containers_server.xml">
			<title>Configuring the Service Element in the Container's server.xml</title>
			
<programlisting linenumbering="unnumbered" role="XML">
  &lt;Service name="Sip-Servlets"
 className="org.mobicents.servlet.sip.startup.SipStandardService"
 sipApplicationDispatcherClassName="org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl"
 darConfigurationFileLocation="file:///home/silas/workspaces/mobicents-sip-servlets/
 sip-servlets-examples/reinvite-demo/reinvite-dar.properties"&gt;
</programlisting>
		</example>
		<para>
			Provided here is a description of the SIP Service element's attributes:
		</para>
		<variablelist>
			<varlistentry>
				<term>className</term>
				<listitem>
					<para>
						This attribute specifies that the servlet container is a <emphasis>converged</emphasis> (i.e. SIP + HTTP) servlet container. This attribute can also be used to handle load-balancing and failover.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>sipApplicationDispatcherClassName</term>
				<listitem>
					<para>
						This attribute specifies the class name of the <literal>org.mobicents.servlet.sip.core.SipApplicationDispatcher</literal> implementation to use. The routing algorithm and application selection process is performed in that class.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>darConfigurationFileLocation</term>
				<listitem>
					<para>
						The default application router file location. This is used by the default application router to determine the application selection logic. Refer to Appendix C of the JSR 289 specification for more details.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
	
	<section id="bsssc-binary-SIP_Servlets_Server-Configuring_Logging">
		<title>SIP Servlets Server Logging</title>
		<para>
			There are two separate levels of logging:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					Logging at the container level, which can be configured using the <filename>log4j.xml</filename> configuration file, which is usually located in the container's <filename>lib</filename> directory.
				</para>
			</listitem>
			<listitem>
				<para>
					Logging of the NIST SIP stack, which is configured in the <literal>Connector</literal> element of the container's <filename>server.xml</filename> configuration file.
				</para>
			</listitem>
		</itemizedlist>
	</section>

</section>
</chapter>
	<chapter id="sssicar-SIP_Servlets_Server-Application-Router" lang="en-US">
	<!--  chapter id nickname: sssicar  --><title>Application Router</title>
	<para>
		Application Routing is performed within the Mobicents Sip Servlets container by the Default Application Router. The following sections describe the Default Application Router, and how other Application Router implementations compliant with the JSR 289 specification can be installed.
	</para>
	<section id="tsdar-Default-Application-Router" lang="en-US">
	<title>Default Application Router</title>
	<para>
		The Application Router is called by the container to select a SIP Servlet application to service an initial request. It embodies the logic used to choose which applications to invoke.
	</para>
	<section id="tsdar-Application-Router-Role">
		<title>Role of the Application Router</title>
		<para>
			An Application Router is required for a container to function, but it is a separate logical entity from the container. The Application Router is solely responsible for application selection and does not implement application logic. For example, the Application Router cannot modify a request or send a response.
		</para>
		<para>
			There is no direct interaction between the Application Router and applications, only between the Sip Servlets Container and the Application Router.
		</para>
		<para>
			The Sip Servlets container is responsible for passing the required information to the Application Router within the initial request so the Application Router can make informed routing decisions. Except for the information passed by the container, the Application Router is free to make use of any other information or data stores. It is up to the individual implementation how the Application Router makes use of the information or data stores.
		</para>
		<para>
			The deployer in a SIP Servlet environment controls application composition by defining and deploying the Application Router implementation. Giving the deployer control over application composition is desirable because the deployer is solely responsible for the services available to subscribers.
		</para>
		<para>
			Furthermore, the SIP Servlets specification intentionally allows the Application Router implementation to consult arbitrary information or data stores. This is because the deployer maintains subscriber information and this information is often private and valuable.
		</para>
	</section>
	
	<section id="tsdar-Mobicents-Default-Application-Router">
		<title>Mobicents Default Application Router</title>
		<para>
			Mobicents Sip Servlets provides an implementation of the Default Application Router (DAR) as defined per Sip Servlets 1.1 specification, Appendix C.
		</para>
		<section id="tsdar-DAR-Configuration-File">
			<title>the DAR Configuration File</title>
			<para>
				The Default Application Router (DAR) works off a simple configuration text file which is modeled as a Java properties file. It contains the information needed by the Application Router to select which SIP Servlet application will handle an incoming initial request. The properties file has the following requirements:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						It MUST be made available to the DAR and the location/content of this file MUST be accessible from a hierarchical URI which itself is to be supplied as a system property "javax.servlet.sip.ar.dar.configuration". In the case of Mobicents Sip Servlets, it is also possible to configure it through the server.xml configuration file (See the <xref linkend="bsssc-Configuring_the_Service_Element_in_the_Containers_server.xml"/> for more details) or the (See the <xref linkend="wwtssmc-Working_with_the_SIP_Servlets_Management_Console"/>)
					</para>
				</listitem>
				<listitem>
					<para>
						The properties file is first read by the container when it loads up.
					</para>
				</listitem>
				<listitem>
					<para>
						The properties file is refreshed each time an application is deployed/undeployed.
					</para>
				</listitem>
				<listitem>
					<para>
						The properties file has a simple format in which the name of the property is the SIP method and the value is a simple comma separated string value for the SipApplicationRouterInfo object.
					</para>
					
<screen>INVITE: (sip-router-info-1), (sip-router-info-2)..
SUBSCRIBE: (sip-router-info-3), (sip-router-info-4)..
ALL: (sip-router-info-5), (sip-router-info-6)..
</screen>
				</listitem>
			</itemizedlist>
			<note>
				<para>
					In addition to what is defined in the Sip Servlet 1.1 Specification, Mobicents Sip Servlets defines a new keyword called ALL. This keyword allows mapping between a sip-router-info data and all methods supported by the container (INVITE, REGISTER, SUBSCRIBE, etc...) to save time for the configuration of an application that listen to all incoming methods.
				</para>
				<para>
					If both the ALL and a specific method are defined in the DAR file, the specific method takes precedence over the ALL, and ALL is called when there is no applications to serve for the specific method anymore.
				</para>
			</note>
			<para>
				The sip-router-info data that goes in the properties file is a string value version of the SipApplicationRouterInfo object. It consists of the following information :
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The name of the application as known to the container. (read as is present in the app-name tag of the sip.xml deployment descriptor of the application or the @SipApplication annotation)
					</para>
				</listitem>
				<listitem>
					<para>
						The identity of the subscriber that the DAR returns. It can return any header in the SIP request using the DAR directive DAR:SIP_HEADER e.g "DAR:From" would return the SIP URI in From header. Or alternatively it can return any string.
					</para>
				</listitem>
				<listitem>
					<para>
						The routing region, one of the strings "ORIGINATING", "TERMINATING" or "NEUTRAL" (Currently this information is not used by the DAR to make routing decisions)
					</para>
				</listitem>
				<listitem>
					<para>
						A SIP URI indicating the route as returned by the Application Router, it can be an empty string. (this can be used to route the request externally)
					</para>
				</listitem>
				<listitem>
					<para>
						A route modifier which can be any one of the strings "ROUTE", "ROUTE_BACK" or "NO_ROUTE" (to be used in conjunction with the above route to route a request externally)
					</para>
				</listitem>
				<listitem>
					<para>
						A string representing in which orders the applications must be invoked (starts at 0). This will be removed later on and the position of sip-router-info data will be the order
					</para>
				</listitem>
			</itemizedlist>
			<para>
				Following is an example of the DAR configuration file:
			</para>
			<para>
				
<screen>INVITE: ("OriginatingCallWaiting", "DAR:From", "ORIGINATING", "", "NO_ROUTE", "0"), ("CallForwarding", "DAR:To", "TERMINATING", "","NO_ROUTE", "1")
</screen>
			</para>
			<para>
				In this example, the DAR is setup to invoke two applications on INVITE request, one each in the originating and the terminating half. The applications are identified by their names as defined in the application deployment descriptors and used here.
			</para>
			<para>
				The subscriber identity returned in this case is the URI from the From and To header respectively for the two applications. The DAR does not return any route to the container and maintains the invocation state in the stateInfo as the index of the last application in the list.
			</para>
		</section>
		
		<section>
			<title>Routing of SIP Messages to Applications</title>
			<section>
				<title>Initial Requests and Application Selection Process</title>
				<para>
					Initial Requests are those that can essentially be dialog creating (<emphasis role="bold">"INVITE", "SUBSCRIBE", "NOTIFY", ... </emphasis>) and not part of an already existing dialog. (There is some other corner cases that you can check in the Sip Servlets 1.1 specification, Appendix B Definition of an Initial Request )
				</para>
				<para>
					Those Initial requests are routed to applications deployed in the container according to the Sip Servlets 1.1 specification, Section 15.4.1 Procedure for Routing an Initial Request.
				</para>
				<para>
					Here is a quick summary that takes the example of the routing (through the Default Application Router) of an INVITE to two applications deployed in the container. Those two applications are a Location Service and a Call Blocking application :
				</para>
				<para>
					The DAR file will contain the following information for those two applications to be invoked in the correct order
				</para>
				<para>
					
<screen>INVITE: ("LocationService", "DAR:From", "ORIGINATING", "", "NO_ROUTE", "0"), ("CallBlocking", "DAR:To", "TERMINATING", "","NO_ROUTE", "1")
</screen>
				</para>
				<para>
					A new INVITE (not a re-INVITE) arrives at the container. Since it is a dialog creating request and the INVITE is not part of any dialog, the Application Router is called. It will see that the first application to invoke is the LocationService so it will return that information to the container (along with the rest of the sip-router-info data) so that the container knows which application to invoke.
				</para>
				<para>
					The container then invokes the LocationService that proxies the INVITE (considered essentially as a new INVITE (see Sip Servlets 1.1 Specification, Section 15.2.2 Sending an Initial Request)) to the known IP Address of the registered user for the Request URI.
				</para>
				<para>
					Since the INVITE has been proxied, the container will invoke the Application Router for the proxied INVITE to see if any more applications are interested into it. The Application Router will see that the second application to invoke is the CallBlocking application so it will return that information to the container (along with the rest of the sip-router-info data) so that the container knows which application to invoke.
				</para>
				<para>
					The container will route the INVITE within the container to the next application in the chain.
				</para>
				<para>
					The Call Blocking application will decide that the user calling is black listed so it will reject the call with a Forbidden response. Since the Call Blocking acted as a UAS, the Application Selection Process is stopped (the container will not invoke the application router anymore for this INVITE).
				</para>
				<para>
					The path that the INVITE has taken (that is, LocationService, CallBlocking) is called the application path. The Routing of the responses will now occur as explained in the next section.
				</para>
				<note>
					<para>
						The assumption of a request coming to the server was taken, but applications can act as UAC and also generate initial requests on their own. In such cases, no entry in the dar file is needed for the given application initiating the request to be able to route it to other applications in the container or outside.
					</para>
				</note>
			</section>
			
			<section>
				<title>Response Routing</title>
				<para>
					Responses always follow the reverse of the path taken by the corresponding request. In our case the Forbidden response will first go back to LocationService then back to the caller. This is true for responses to both initial and subsequent requests. The application path is a logical concept and as such may or may not be explicitly represented within containers.
				</para>
				<para>
					Another possible outcome could have been that the Call Blocking application instead of sending a Forbidden response, allowed the call and proxied the INVITE to the same Request URI chosen by the Location Service. Then when the callee sends back the 200 OK Response, this response goes back the same way through the application path (so in the present case Call Blocking, then Location Service, then back to the caller).
				</para>
				<note>
					<para>
						An important note here with regard to that second scenario that according to the Sip Servlets 1.1 specification, Sections 15.1.2 The Role of Applications and 15.1.4 Application Independence, the Call Blocking application cannot just do nothing with the request and expect the container to route the request in its place (either to a next application in chain if another one is present or to the outside world if none is present). The Application has to do something with request (either proxy it or act as a UAS).
					</para>
				</note>
			</section>
			
			<section>
				<title>Subsequent Requests</title>
				<para>
					Subsequent requests are all requests that are not Initial.
				</para>
				<para>
					The second scenario where the Call Blocking application allowed the call will be used in this section to showcase subsequent requests. So the caller has received the 200 OK response back. Now according to the SIP specification (RFC 3261), it sends an ACK. The ACK arrives at the container and is not a dialog creating request and is already part of an ongoing dialog (early dialog) so the request is detected as a Subsequent request and will follow the application path created by the initial request. The ACK will go through Location Service, Call Blocking, and finally to the callee.
				</para>
			</section>

		</section>

	</section>
	
	<section id="tsdar-Limitations">
		<title>Limitations of the Default Application Router</title>
		<para>
			It is not possible to filter out the requests based on the incoming request headers to target specific applications. By example, to select an application based on the From Header domain part of the URI is not possible at the moment
		</para>
		<para>
			As you would notice, this is a minimalist Application Router with no processing logic besides the declaration of the application order. It is expected that in real world deployments, the Application Router would play an extremely important role in application orchestration and composition. It is likely that the Application Router would make use of complex rules and diverse data repositories.
		</para>
		<para>
			The DAR is intended to be a very simple implementation that is available as part of the reference implementation, and could be used instead of a real world Application Router.
		</para>
	</section>

</section>
	<section id="tsear-echarts-Application-Router" lang="en-US">
	<title>DFC Application Router</title>
	<section>
		<title>Description of DFC Application Router</title>
		<para>
			Instead of using the Mobicents Default Application Router, any SIP Servlets 1.1 compliant Application Router can be used, such as the eCharts <ulink type="" url="http://echarts.org/EChartsSipServletManual/sip-echartsse4.html#x6-140004.1">DFC Application Router</ulink>
		</para>
	</section>
	
	<section>
		<title>Installation of DFC Application Router</title>
		<section>
			<title>Installing DFC Application Router in Mobicents Sip Servlets on Tomcat</title>
			<para>
				Drop the <filename>dfcar.jar</filename> from the ECharts distribution package in <literal>TOMCAT_HOME/lib</literal> directory and remove the Mobicents Default Application Router located in <literal>TOMCAT_HOME/lib/sip-servlets-application-router-*.jar</literal>
			</para>
		</section>
		
		<section>
			<title>Installing DFC Application Router in Mobicents Sip Servlets on JBoss 4.2.x</title>
			<para>
				Drop the <filename>dfcar.jar</filename> from the ECharts distribution package in <literal>JBOSS_HOME/server/default/deploy/jboss-web.deployer</literal> directory and remove the Mobicents Default Application Router located in <literal>JBOSS_HOME/server/default/deploy/jboss-web.deployer/sip-servlets-application-router-*.jar</literal>
			</para>
		</section>
		
		<section>
			<title>Installing DFC Application Router in Mobicents Sip Servlets on JBoss 5.1.x</title>
			<para>
				Drop the <filename>dfcar.jar</filename> from the ECharts distribution package in <literal>JBOSS_HOME/server/default/deploy/jbossweb.sar/ </literal>directory and remove Mobicents Default Application Router located in <literal>JBOSS_HOME/server/default/deploy/jbossweb.sar/sip-servlets-application-router-*.jar</literal>
			</para>
		</section>

	</section>

</section>
</chapter>
	<chapter id="ssea-SIP_Servlet_Example_Applications" lang="en-US">
	<!--  chapter id nickname: afotsss  --><title>SIP Servlet Example Applications</title>
	<para>
		The SIP Servlet server has a selection of examples which demonstrate particular capabilities of the server. <xref linkend="tab-ssea-SIP_Servlet_Example_Applications"/> lists the available examples, their location, and a brief description about the functionality each example demonstrates. The examples can also provide a useful starting point for developing SIP Applications, therefore it is encouraged to experiment and adapt the base examples. Each example is available in both binary and source formats.
	</para>
	<table frame="all" id="tab-ssea-SIP_Servlet_Example_Applications">
		<title>Available Examples</title>
		<tgroup align="left" cols="2" colsep="1" rowsep="1">
			<colspec colname="c1"/>
			<colspec colname="c2"/>
			<thead>
				<row>
					<entry align="center">
						Example
					</entry>
					<entry align="center">
						Description
					</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>
						<xref linkend="sfss-The_Call-Blocking_Service"/>
					</entry>
					<entry>
						Demonstrates how to block calls by specifying that the INVITE SIP Extension checks the <literal>From</literal> address to see if it is specified in the block list. If the blocked SIP address matches, the Call Blocking application send a FORBIDDEN response.
					</entry>
				</row>
				<row>
					<entry>
						<xref linkend="sfss-The_Call-Forwarding_Service"/>
					</entry>
					<entry>
						Demonstrates how to forward calls by specifying that the INVITE SIP Extension checks the <literal>To</literal> address to see if it is specified in the forward list. If the SIP address matches, the application acts as a back-to-back user agent (B2BUA).
					</entry>
				</row>
				<row>
					<entry>
						<xref linkend="sfss-The_Call-Controller_Service"/>
					</entry>
					<entry>
						Call Blocking and Call Forwarding are merged to create a new service.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.mobicents.org/speed_dial.html">Speed Dial</ulink>
					</entry>
					<entry>
						Demonstrates how to implement speed dialing for SIP addresses. The demonstration uses a static list of speed dial numbers. The numbers are translated into a complete address based on prior configuration. The SIP addresses are proxied without record-routing, or supervised mode.
					</entry>
				</row>
				<row>
					<entry>
						<xref linkend="sfss-The_Location_Service"/>
					</entry>
					<entry>
						Demonstrates a location service that performs a lookup based on the request URI, into a hard-coded list of addresses. The request is proxied to the set of destination addresses associated with that URI.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.mobicents.org/speeddial_locationservice.html">Composed Speed Dial and Location</ulink>
					</entry>
					<entry>
						Speed Dial and Location are merged to create a new service. Speed Dial proxies the speed dial number to a SIP address, then Location Service proxies the call to the actual location of the call recipient.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.mobicents.org/click2call.html">Click to Call</ulink>
					</entry>
					<entry>
						Demonstrates how SIP Servlets can be used along with HTTP servlets as a converged application to place calls from a web portal. The example is a modified version of the click to dial example from the Sailfin project, but has been reworked to comply with JSR 289.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.mobicents.org/chatserver.html">Chat Server</ulink>
					</entry>
					<entry>
						Demonstrates <literal>MESSAGE</literal> SIP Extension support. This example is based on the chatroom server demonstration from the BEA dev2dev project, and has been modified to meet JSR 289 requirements.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.mobicents.org/media-demo.html">Media</ulink>
					</entry>
					<entry>
						Demonstrates how the media playback SIP Servlet can build a media file customized with the name of the user, based on the information in the FROM header. This example is only compatible with JBoss AS. The solution is know to work with Ekiga and linphone SIP soft-phones.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.mobicents.org/shopping-demo.html">Shopping</ulink>
					</entry>
					<entry>
						Demonstrates integration with Seam and Java Enterprise Edition (JEE), and Media integration with text to speech (TTS) and dual-tone multi-frequency (DTMF) tones. The demonstration builds on the Converged Demo example, and adds support for the SIP Servlets v1.1 specification.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.mobicents.org/jslee-sips-interop-demo.html">JSLEE/SIP Servlets Interoperability</ulink>
					</entry>
					<entry>
						Demonstrates how the <productname condition="mob">Mobicents</productname>
						 platform components can work in concert with each other to provide a integrated solution. All major components of the platform are used in this example, which was created to demonstrate to JavaOne 2008 delegates a possible use case scenario for the platform.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.mobicents.org/facebook-c2c.html">Facebook Click to Call</ulink>
					</entry>
					<entry>
						Demonstrates how SIP Servlets and HTTP Servlets can be used can be used to create a Facebook plug-in that allows user to call POTS phones through a SIP-PSTN gateway provider. This demonstration is only available from the source repository; no binary is available.
					</entry>
				</row>
				<row>
					<entry>
						<xref linkend="sfss-The_Diameter_Event-Changing_Service"/>
					</entry>
					<entry>
						Demonstrates how the Diameter Event Charging, and the Location service, can be used to perform fixed-rated charging of calls (event charging). When a call is initiated, a debit of ten euros is applied to the <literal>A Party</literal> account. If the call is rejected by the <literal>B Party</literal>, or <literal>A Party</literal> hangs up before <literal>B Party</literal> can answer the call, the ten euro charge is credited to the <literal>A Party</literal> account.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.mobicents.org/mss-diameter_sh.html">Diameter Sh OpenIMS Integration</ulink>
					</entry>
					<entry>
						Demonstrates the integration between <productname condition="mob">Mobicents</productname>
						 and OpenIMS, using the Diameter Sh interface to receive profile updates and SIP.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.mobicents.org/conference-demo.html">Conference</ulink>
					</entry>
					<entry>
						Demonstrates the capabilities of the Media Server, such as endpoint composition and conferencing, as well as proving that SIP Servlets are capable of working seamlessly with any third-party web framework, without repackaging or modifying the deployment descriptors. The demonstration uses Google's GWT Ajax framework with server-push updates to provide a desktop-like user interface experience.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.mobicents.org/mss-ipbx.html">Media IPBX</ulink>
					</entry>
					<entry>
						Demonstrates how a SIP PBX solution can be deployed using the <productname condition="mob">Mobicents</productname>
						 platform. For more information, refer to <xref linkend="mipbx-Media_IPBX"/>.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.mobicents.org/mss-jruby-example.html">JRuby on Rails SIP Servlets</ulink>
					</entry>
					<entry>
						Demonstrates how JRuby on Rails can be used by the <productname condition="mob">Mobicents</productname>
						 platform to provide a multi-language application that can initiate phone calls to customers after they log a complaint through a web portal.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.mobicents.org/mss-pure-jruby-telco.html">Pure JRuby on Rails Telco</ulink>
					</entry>
					<entry>
						Builds on the JRuby on Rails SIP Servlets demonstration, but adds the ability to call the application rather that initially interact through the web portal. The application has the ability to set up and tear down the call.
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<!-- <xi:include href="concept-section-SS_Concurrency_and_Congestion_Control.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
 <xi:include href="concept-section-SS_Load_Balancer.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
 <xi:include href="concept-section-SS_SIP_Servlet_Security.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
 <xi:include href="concept-section-SS_SIP_Extensions.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
 <xi:include href="concept-section-SS_Seam_Telco_Framework.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
 <xi:include href="concept-section-SS_STUN_Support.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
 <xi:include href="concept-section-SS_Media_IPBX.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
 <xi:include href="concept-section-SS_for_JBoss-Clustering_Support.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
 <xi:include href="concept-section-SS_for_JBoss-Failover_Support.xml" xmlns:xi="http://www.w3.org/2001/XInclude" /> --> <section id="sfss-Services_for_SIP_Servlets" lang="en-US">
	<!--  chapter id nickname: sfss  --><title>Operating the Example Applications</title>
	<section id="sfss-The_Location_Service">
		<title>The Location Service</title>
		<para>
			The Mobicents Location Service contains a list of mappings of request URIs to destination addresses. When the Location Service receives a request, it performs a lookup on that mapping and proxies the request simultaneously to the destination address (or addresses) associated with that URI.
		</para>
		<note id="sfss-The_Location_Service_Mappings_Cannot_Currently_Be_Configured">
			<title>The Location Service Mappings Cannot Currently Be Configured</title>
			<para>
				The Location Service currently performs a lookup on a hard-coded list of addresses. This model is evolving toward the eventual use of a database.
			</para>
		</note>
		<para>
			Regardless of whether you are using the JBoss Application Server or the Tomcat Servlet Container as the Servlets Server, the application, container and Location Service perform the following steps:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					A user—let us call her Alice—makes a call to <literal>sip:receiver@sip-servlets.com</literal>. The <literal>INVITE</literal> is received by the servlet container, which then starts the Location Service.
				</para>
			</listitem>
			<listitem>
				<para>
					The Location Service, using non-SIP means, determines that the callee (i.e. the receiver) is registered at two locations, identified by the two SIP URIs, <literal>sip:receiver@127.0.0.1:5090</literal> and <literal>sip:receiver@127.0.0.1:6090</literal>.
				</para>
			</listitem>
			<listitem>
				<para>
					The Location Service proxies to those two destinations in parallel, without record-routing, and without making use of supervised mode.
				</para>
			</listitem>
			<listitem>
				<para>
					One of the destinations returns a <literal>200 OK</literal> status code; the second proxy is then canceled.
				</para>
			</listitem>
			<listitem>
				<para>
					The <literal>200 OK</literal> is forwarded to Alice, and call setup is completed as usual.
				</para>
			</listitem>
		</itemizedlist>
		<para>
			Here is the current list of hard-coded contacts and their location URIs:
		</para>
		<itemizedlist>
			<title>sip:receiver@sip-servlets.com</title>
			<listitem>
				<para>
					<literal>sip:receiver@127.0.0.1:5090</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>sip:receiver@127.0.0.1:6090</literal>
				</para>
			</listitem>
		</itemizedlist>
		<!--  The Location Service  --> <section id="sfss-binary-Location_Service--Installing_Configuring_and_Running">
			<title>The Location Service: Installing, Configuring and Running</title>
			<formalpara id="sfss-binary-Location_Service-Pre-Install_Requirements_and_Prerequisites">
				<title>Pre-Install Requirements and Prerequisites</title>
				<para>
					The following requirements must be met before installation can begin.
				</para>
			</formalpara>
			<!--  <variablelist
   id="sfss-binary-Location_Service-Hardware_Requirements">
   <title>Hardware Requirements</title>
   <varlistentry>
    <term>Sufficient Disk Space</term>
    <listitem>
     <para>&nbsp;</para>
    </listitem>
   </varlistentry>
  </variablelist>  --> <variablelist id="sfss-binary-Location_Service-Software_Prerequisites">
				<title>Software Prerequisites</title>
				<varlistentry>
					<term>Either an MSS for JBoss or an MSS for Tomcat Installation</term>
					<listitem>
						<para>
							The Location Service requires either an MSS for JBoss or an MSS for Tomcat binary installation.
						</para>
						<para>
							You can find detailed instructions on installing MSS for JBoss here: <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running"/>.
						</para>
						<para>
							You can find detailed instructions on installing MSS for Tomcat here: <xref linkend="bssswticar-SIP_Servlets_Server_with_Tomcat-Installing_Configuring_and_Running"/>.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<formalpara id="sfss-binary-Location_Service-Downloading">
				<title>Downloading</title>
				<para>
					The Location Service is comprised of two archive files, a Web Archive (WAR) and a Default Application Router (DAR) configuration file, which you need to add to your installed SIP Servlets Server. For more information about WAR files, refer to the <ulink url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Server_Configuration_Guide/beta422/html/index.html">JBoss Application Server Administration and Development Guide</ulink>. For more information about DAR files, refer to the <ulink url="http://jcp.org/en/jsr/detail?id=289">JSR 289 spec, Appendix C</ulink>.
				</para>
			</formalpara>
			<para>
				Download the Location Service's WAR file from here: <ulink url="http://repository.jboss.org/maven2/org/mobicents/servlet/sip/example/location-service/1.1/location-service-1.1.war"/>.
			</para>
			<para>
				Download the Location Service's DAR file from here: <ulink url="http://www.mobicents.org/locationservice-dar.properties"/>.
			</para>
			<formalpara id="sfss-binary-Location_Service-Installing">
				<title>Installing</title>
				<para>
					Both the <filename>location-service-1.1.war</filename> WAR file and the <filename>locationservice-dar.properties</filename> DAR file that you downloaded should be placed into different directories in your SIP Servlet Server installation hierarchy. Which directory depends on whether you are using the Location Service with MSS for JBoss or with MSS for Tomcat:
				</para>
			</formalpara>
			<variablelist>
				<varlistentry>
					<term>MSS for JBoss</term>
					<listitem>
						<para>
							Place <filename>location-service-1.1.war</filename> into the <filename><envar>JBOSS_HOME</envar>/server/default/deploy/</filename> directory, and <filename>locationservice-dar.properties</filename> into the <filename><envar>JBOSS_HOME</envar>/server/default/conf/dars/</filename> directory.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MSS for Tomcat</term>
					<listitem>
						<para>
							Place <filename>location-service-1.1.war</filename> into the <filename><envar>CATALINA_HOME</envar>/webapps/</filename> directory, and <filename>locationservice-dar.properties</filename> into the <filename><envar>CATALINA_HOME</envar>/conf/dars/</filename> directory.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<formalpara id="sfss-binary-Location_Service-Configuring">
				<title>Configuring</title>
				<para>
					The <literal>darConfigurationFileLocation</literal> attribute of the <literal>Service</literal> element must be set to the value <userinput>conf/dars/locationservice-dar.properties</userinput>. The instructions are given below by SIP Servlets Server type:
				</para>
			</formalpara>
			<variablelist>
				<varlistentry>
					<term>MSS for JBoss</term>
					<listitem>
						<para>
							Open the <filename><envar>JBOSS_HOME</envar>/server/default/deploy/jboss-web.deployer/server.xml</filename> configuration file and find the <literal>Service</literal> element. Add an attribute to it called <userinput>darConfigurationFileLocation</userinput>, and set it to <replaceable>conf/dars/locationservice-dar.properties</replaceable>:
						</para>
						<example id="sfss-Editing_SS_for_JBoss_server.xml_for_the_Location_Service">
							<title>Editing MSS for JBoss's server.xml for the Location Service</title>
							
<programlisting role="XML">&lt;Service
 name="jboss.web"
 className="org.mobicents.servlet.sip.startup.SipStandardService"
 sipApplicationDispatcherClassName="org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl"
 darConfigurationFileLocation="conf/dars/locationservice-dar.properties"&gt;
</programlisting>
						</example>
						<para>
							Make sure that the configuration file only contains one <literal>darConfigurationFileLocation</literal> attribute: your new one.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MSS for Tomcat</term>
					<listitem>
						<para>
							Open the <filename><envar>CATALINA_HOME</envar>/conf/server.xml</filename> configuration file and find the <literal>Service</literal> element. Add an attribute to it called <userinput>darConfigurationFileLocation</userinput>, and set it to <userinput>conf/dars/locationservice-dar.properties</userinput>:
						</para>
						<example id="sfss-Editing_MSS_for_Tomcats_server.xml_for_the_Location_Service">
							<title>Editing MSS for Tomcat's server.xml for the Location Service</title>
							
<programlisting role="XML">&lt;Service
 name="Sip-Servlets"
 className="org.mobicents.servlet.sip.startup.SipStandardService"
 sipApplicationDispatcherClassName="org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl"
 darConfigurationFileLocation="conf/dars/locationservice-dar.properties"&gt;
</programlisting>
						</example>
						<para>
							Make sure that the configuration file only contains one <literal>darConfigurationFileLocation</literal> attribute: your new one.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<formalpara id="sfss-binary-Location_Service-Running">
				<title>Running</title>
				<para>
					Once the WAR and DAR files have been placed in the right directories, and the JBoss Application Server or Tomcat Servlet Container knows where to find them (which you specified in a <filename>server.xml</filename> file), then you should go ahead and run SIP Servlets Server.
				</para>
			</formalpara>
			<para>
				To learn how to run the SIP Servlets-enabled JBoss Application Server, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Running"/>.
			</para>
			<para>
				To learn how to run the SIP Servlets-enabled Tomcat Container, refer to <xref linkend="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Running"/>.
			</para>
			<formalpara id="sfss-binary-Location_Service-Testing">
				<title>Testing</title>
				<para>
					The following procedure shows how to test the Location Service.
				</para>
			</formalpara>
			<procedure>
				<title/>
				<step>
					<para>
						Start two SIP soft-phones. The first phone should be set up as <userinput>sip:receiver@sip-servlets.com</userinput> at IP address <userinput>127.0.0.1</userinput> on port <userinput>5090</userinput>. The second phone can be set up in any way you like. Note that the SIP phones do not have to be registered.
					</para>
				</step>
				<step>
					<para>
						Using the second phone, make a call to <literal>sip:receiver@sip-servlets.com</literal>. If the Location Service has been set up correctly and is running, the first phone—as the receiver or callee—should now be ringing.
					</para>
				</step>
			</procedure>
			
			<!-- <formalpara
   id="sfss-binary-Location_Service-Using">
   <title>Using</title>
   <para>&nbsp;</para>
  </formalpara> --> <formalpara id="sfss-binary-Location_Service-Stopping">
				<title>Stopping</title>
				<para>
					To learn how to stop the SIP Servlets-enabled JBoss Application Server, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Stopping"/>.
				</para>
			</formalpara>
			<para>
				To learn how to stop the SIP Servlets-enabled Tomcat Container, refer to <xref linkend="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Stopping"/>.
			</para>
			<formalpara id="sfss-binary-Location_Service-Uninstalling">
				<title>Uninstalling</title>
				<para>
					Unless disk space is at a premium, there is usually no need to uninstall the Location Service. However, if you will not be using it again, you may want to unset or reset the <literal>darConfigurationFileLocation</literal> attribute of the <literal>Service</literal> element, which you set in the <filename>server.xml</filename> configuration file in <xref linkend="sfss-binary-Location_Service-Configuring"/>.
				</para>
			</formalpara>
			<para>
				You may also wish to delete the WAR and DAR files for the Location Service, which you installed in <xref linkend="sfss-binary-Location_Service-Installing"/>.
			</para>
		</section>

	</section>
	
	<section id="sfss-The_Diameter_Event-Changing_Service">
		<title>The Diameter Event-Changing Service</title>
		<para>
			The Diameter Event-Changing Service is based on the Location Service, which performs call-charging at a fixed rate. Upon the initiation of a call, a debit of €10.00 occurs. In the cases of a call being rejected or the caller disconnecting (hanging up) before an answer is received, the caller's account is refunded.
		</para>
		<para>
			Note that an MSS for JBoss installation is required to run this example; it will not work with MSS for Tomcat.
		</para>
		<para>
			Provided here is a step-by-step description of the procedure as performed by the application and container:
		</para>
		<procedure id="sfss-Diameter_Event-Changing_Service_Step-By-Step">
			<title>Diameter Event-Changing Service Step-By-Step</title>
			<step>
				<!-- * Alice makes a call to sip:receiver@sip-servlets.com. The INVITE is received by the servlet container which sends the debit request to the Charging Server and invokes the location service --> <para>
					A user, Alice, makes a call to <literal>sip:receiver@sip-servlets.com</literal>. The <literal>INVITE</literal> is received by the servlet container, which sends a request to debit Alice's account to the Charging Server. The servlet container then invokes the location service.
				</para>
			</step>
			<step>
				<!-- * The location service determines, using non-SIP means, where the callee (receiver) is registered with two locations, identified by, say, two SIP URIs (sip:receiver@127.0.0.1:5090 and sip:receiver@127.0.0.1:6090). --> <para>
					the Location Service determines, without using the SIP protocol itself, where the callee—or receiver—is registered. The callee may be registered at two locations identified by two SIP URIs: <literal>sip:receiver@127.0.0.1:5090</literal> and <literal>sip:receiver@127.0.0.1:6090</literal>.
				</para>
			</step>
			<step>
				<!-- * The service proxies to those two destinations in parallel, without record-routing, and without the supervised mode. --> <para>
					The Location Service proxies to those two destinations simultaneously, without record-routing and without using supervised mode.
				</para>
			</step>
			<step>
				<!-- * Once one of the destinations return 200 (OK), the other branch is cancelled by the container. --> <para>
					One of the destinations returns <literal>200 (OK)</literal>, and so the container cancels the other.
				</para>
			</step>
			<step>
				<!-- * The 200 is forwarded upstream to Alice and the call setup is completed as per usual. --> <para>
					The <literal>200 (OK)</literal> is forwarded upstream to Alice and the call setup is carried out as usual.
				</para>
			</step>
			<step>
				<!-- * If none of the destinations accepts the call, a Diameter Accounting-Request for refund is sent to the Diameter Charging Server in order to credit the 10.0 euros debited. --> <para>
					If neither or none of the registered destinations accepts the call, a Diameter Accounting-Request for refund is sent to the Diameter Charging Server in order to debit the already-credited €10.00
				</para>
			</step>
		</procedure>
		
		<!--  Diameter Event-Changing Service  --> <section id="sfss-binary-Diameter_Event-Changing_Service--Installing_Configuring_and_Running">
			<title>Diameter Event-Changing Service: Installing, Configuring and Running</title>
			<para>
				Preparing your MSS for JBoss server to run the Diameter Event-Changing example requires downloading a WAR archive, a DAR archive, the Ericsson Charging Emulator, setting an attribute in JBoss's <filename>server.xml</filename> configuration file, and then running JBoss AS. Detailed instructions follow.
			</para>
			<formalpara id="sfss-binary-Diameter_Event-Changing_Service-Pre-Install_Requirements_and_Prerequisites">
				<title>Pre-Install Requirements and Prerequisites</title>
				<para>
					The following requirements must be met before installation can begin.
				</para>
			</formalpara>
			<!--  <variablelist
   id="sfss-binary-Diameter_Event-Changing_Service-Hardware_Requirements">
   <title>Hardware Requirements</title>
   <varlistentry>
    <term>Sufficient Disk Space</term>
    <listitem>
     <para>&nbsp;</para>
    </listitem>
   </varlistentry>
  </variablelist>  --> <variablelist id="sfss-binary-Diameter_Event-Changing_Service-Software_Prerequisites">
				<title>Software Prerequisites</title>
				<varlistentry>
					<term>One MSS for JBoss Installation</term>
					<listitem>
						<para>
							Before proceeding, you should follow the instructions for installing, configuring, running and testing MSS for JBoss from the binary distribution.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<formalpara id="sfss-binary-Diameter_Event-Changing_Service-Downloading">
				<title>Downloading</title>
				<para>
					The following procedure describes how to download the required files.
				</para>
			</formalpara>
			<procedure>
				<step>
					<para>
						First, download the Web Application Archive (<acronym>WAR</acronym>) file corresponding to this example, the current version of which is named <filename>diameter-event-charging-1.0.war</filename>, from <ulink url="http://repository.jboss.org/maven2/org/mobicents/servlet/sip/example/diameter-event-charging/1.0/"/>.
					</para>
				</step>
				<step>
					<para>
						Secondly, download the corresponding Disk Archive (<acronym>DAR</acronym>) configuration file here: <ulink url="http://www.mobicents.org/diametereventcharging-dar.properties"/>.
					</para>
				</step>
				<step>
					<para>
						Finally, you will need to download the Ericsson Charging Emulator, version 1.0, from <ulink url="http://www.ericsson.com/mobilityworld/developerszonedown/downloads/tools/charging_solutions/ChargingSDK-1_0_D31E.zip"/>.
					</para>
				</step>
			</procedure>
			
			<formalpara id="sfss-binary-Diameter_Event-Changing_Service-Installing">
				<title>Installing</title>
				<para>
					The following procedure describes how to install the downloaded files.
				</para>
			</formalpara>
			<procedure>
				<step>
					<para>
						Place the <filename>diameter-event-charging-1.0.war</filename> WAR archive into the <filename>jboss_home/server/&lt;profile&gt;/deploy</filename> directory, where <filename>&lt;deploy&gt;</filename> is your Configuration Profile, whether "default" or "all" (the latter if you are using MSS for JBoss's clustering capabilities).
					</para>
				</step>
				<step>
					<para>
						Place the <filename>diametereventcharging-dar.properties</filename> DAR file in your <filename><envar>$JBOSS_HOME</envar>/server/&lt;profile&gt;/conf/dars</filename> directory.
					</para>
				</step>
				<step>
					<para>
						Finally, open the terminal, move into the directory to which you downloaded the Ericsson Charging SDK (for the sake of this example, we will call this directory <filename>charging_sdk</filename>), and then unzip the downloaded zip file (you can use Java's <command>jar <option>-xvf</option></command> command for this:
					</para>
					
<screen>~]$ cd charging_sdk
charging_sdk]$ jar -xvf ChargingSDK-1_0_D31E.zip
</screen>
					<para>
						Alternatively, you can use Linux's <command>unzip</command> command to do the dirty work:
					</para>
					
<screen>charging_sdk]$ unzip ChargingSDK-1_0_D31E.zip
</screen>
				</step>
			</procedure>
			
			<formalpara id="sfss-binary-Diameter_Event-Changing_Service-Configuring">
				<title>Configuring</title>
				<para>
					To configure the server for the Event-Changing example, simply open the <filename>server.xml</filename> configuration file in your server's <filename><envar>$JBOSS_HOME</envar>/server/&lt;profile&gt;/deploy/jboss-web.deployer/</filename> directory, and edit the value of the <literal>darConfigurationFileLocation</literal> attribute of the <literal>Service</literal> element so that it is <literal>conf/dars/mobicents-dar.properties</literal>.
				</para>
			</formalpara>
			<example id="sfss-Editing_the_darConfigurationFileLocation_Attribute_of_the_Service_Tag">
				<title>Editing the <literal>darConfigurationFileLocation</literal> Attribute of the Service Tag</title>
				
<programlisting linenumbering="unnumbered" role="XML">...

&lt;Service name="jboss.web"
      className="org.mobicents.servlet.sip.startup.SipStandardService"
    sipApplicationDispatcherClassName="org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl"
    sipApplicationRouterClassName="org.mobicents.servlet.sip.router.DefaultApplicationRouter"
    darConfigurationFileLocation="conf/dars/mobicents-dar.properties"&gt;

...
</programlisting>
			</example>
			<!-- <para>Your server is now set up to run the Event-Changing example.</para> --> <formalpara id="sfss-binary-Diameter_Event-Changing_Service-Running">
				<title>Running</title>
				<para>
					The following procedure describes how to run the Diameter Event-Changing Service.
				</para>
			</formalpara>
			<procedure id="sfss-Diameter_Event-Changing_Service">
				<title>Diameter Event-Changing Service</title>
				<step>
					<para>
						First, you should run your MSS for JBoss server. For instructions on doing so, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Running"/>.
					</para>
				</step>
				<step>
					<para>
						Then, run the Ericsson Charging Emulator. Open a terminal, change the working directory to the location of the unzipped Charging Emulator files (in <filename>ChargingSDK-1_0_D31E</filename> or a similarly-named directory), and run it with the <command>java -jar <filename>PPSDiamEmul.jar</filename></command> command:
					</para>
					
<screen>~]$ java -jar PPSDiamEmul.jar
</screen>
				</step>
			</procedure>
			
			<formalpara id="sfss-binary-Diameter_Event-Changing_Service-Using">
				<title>Using</title>
				<para>
					Using the Event-Changing service means, firstly, inserting some parameters into the Charging Emulator, and then, by using two SIP (soft)phones, calling one with the other. The following sequential instructions show you how.
				</para>
			</formalpara>
			<note id="sfss-SIP_SoftPhone_Which">
				<title>SIP (Soft)Phone? Which?</title>
				<para>
					The Mobicents team recommends one of the following SIP phones, and has found that they work well: the 3CX Phone, the SJ Phone or the WengoPhone.
				</para>
			</note>
			<procedure id="sfss-Using_the_Diameter_Event-Changing_Service">
				<title>Using the Diameter Event-Changing Service</title>
				<step>
					<title>Configure the Ericsson SDK Charging Emulator</title>
					<para>
						Once you have started the Charging Emulator, you should configure it exactly as portrayed in <xref linkend="figure-mss-ChargingEmulatorConfig"/>.
					</para>
					<figure id="figure-mss-ChargingEmulatorConfig">
						<title>Configuring the Charging Emulator</title>
						<mediaobject id="sfss-mss-DiameterEventChanging-ss-ChargingEmulatorConfig">
							<imageobject>
								<imagedata align="center" fileref="images/mss-DiameterEventChanging-ss-ChargingEmulatorConfig.png" format="PNG" scalefit="1" width="440"/>
							</imageobject>
							<caption>
							<para>
								Configuring the Charging Emulator
							</para>
							</caption>
						</mediaobject>
					</figure>
					<orderedlist>
						<listitem>
							<para>
								Set the <literal>Peer Id</literal> to: <userinput>aaa://127.0.0.1:21812</userinput>
							</para>
						</listitem>
						<listitem>
							<para>
								Set the <literal>Realm</literal> to: <userinput>mobicents.org</userinput>
							</para>
						</listitem>
						<listitem>
							<para>
								Set the <literal>Host IP</literal> to: <userinput>127.0.0.1</userinput>
							</para>
						</listitem>
					</orderedlist>
				</step>
				<step>
					<para>
						Start two SIP (soft)phones. You should set the first phone up with the following parameters: <userinput>sip:receiver@sip-servlets</userinput> on IP address <userinput>127.0.0.1</userinput> on port <userinput>5090</userinput>. The other phone can be set up any way you like.
					</para>
				</step>
				<step>
					<para>
						Before making a call, open the <menuchoice><guimenu>Config</guimenu><guimenuitem>Options</guimenuitem></menuchoice> dialog window, as shown in the image.
					</para>
					<mediaobject id="sfss-mss-DiameterEventChanging-ss-ChargingAccountConfig">
						<imageobject>
							<imagedata align="center" fileref="images/mss-DiameterEventChanging-ss-ChargingAccountConfig.png" format="PNG" scalefit="1" width="440"/>
						</imageobject>
						<caption>
						<para>
							Configuring Accounts in the Charging Emulator
						</para>
						</caption>
					</mediaobject>
					<!-- <para>You can see the user balance in the emulator: in the menu Config > Account > Click on "00001000-Klas Svensson" and watch the balance. Stretch the window down to see the history.</para> --> <para>
						In the <guilabel>Account Configuration</guilabel> window of the Charging Emulator, you can see the user's balances. Select a user to watch the balance. You can also stretch the window lengthwise to view the user's transaction history.
					</para>
				</step>
				<step>
					<para>
						Time to call! From the second, <quote>any-configuration</quote> phone, make a call to <literal>sip:receiver@sip-servlets.com</literal>. Upon doing so, the other phone should ring or signal that it is being contacted .
					</para>
				</step>
				<step>
					<!-- <para>You should see there is one first request, right after the invite and before the other party accept/reject the call, sent to the Charging Emulator, that's when the debit is made. In case the call is rejected, or the caller gives up, there's a new Diameter Request sent which will be the refund of the unused value. In case the call is accepted, nothing else will happen, related to Diameter.</para> --> <para>
						You should be able to see a request—immediately following the invite and before the other party (i.e. you) accepts or rejects the call—sent to the Charging Emulator. That is when the debit of the user's account is made. In the case that the call is rejected, or the caller gives up, a second, new Diameter request is sent to refund the initial amount charged by the call. On the other hand, if the call is accepted, nothing else related to Diameter happens, and no second request takes place.
					</para>
					<para>
						Please not that this is not the truly-correct way to do charging, as Diameter provides other means, such as unit reservation. However, for the purpose of a demonstration it is sufficient to show the debit and follow-up credit working. Also, this is a fixed-price call, regardless of the duration. Charging can, of course, be configured so that it is time-based.
					</para>
				</step>
			</procedure>
			
			<!-- <formalpara
   id="sfss-binary-Diameter_Event-Changing_Service-Stopping">
   <title>Stopping</title>
   <para>&nbsp;</para>
  </formalpara>
  <formalpara
   id="sfss-binary-Diameter_Event-Changing_Service-Testing">
   <title>Testing</title>
   <para>&nbsp;</para>
  </formalpara>
  <formalpara
   id="sfss-binary-Diameter_Event-Changing_Service-Uninstalling">
   <title>Uninstalling</title>
   <para>&nbsp;</para>
  </formalpara> -->
		</section>

	</section>
	
	<section id="sfss-The_Call-Blocking_Service">
		<title>The Call-Blocking Service</title>
		<para>
			The Mobicents Call-Blocking Service, upon receiving an <literal>INVITE</literal> request, checks to see whether the sender's address is a blocked contact. If so, it returns a <literal>FORBIDDEN</literal> reply; otherwise, call setup proceeds as normal.
		</para>
		<note id="sfss-Blocked_Contacts_Cannot_Currently_Be_Configured">
			<title>Blocked Contacts Cannot Currently Be Configured</title>
			<para>
				Blocked contacts are currently hard-coded addresses. This model is evolving towards the eventual use of a database.
			</para>
		</note>
		<para>
			Here is the current hard-coded list of blocked contacts:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<literal>sip:blocked-sender@sip-servlets.com</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>sip:blocked-sender@127.0.0.1</literal>
				</para>
			</listitem>
		</itemizedlist>
		<!--  The Call-Blocking Service  --> <section id="sfss-binary-Call-Blocking_Service--Installing_Configuring_and_Running">
			<title>The Call-Blocking Service: Installing, Configuring and Running</title>
			<formalpara id="sfss-binary-Call-Blocking_Service-Pre-Install_Requirements_and_Prerequisites">
				<title>Pre-Install Requirements and Prerequisites</title>
				<para>
					The following requirements must be met before installation can begin.
				</para>
			</formalpara>
			<!--  <variablelist
   id="sfss-binary-Call-Blocking_Service-Hardware_Requirements">
   <title>Hardware Requirements</title>
   <varlistentry>
    <term>Sufficient Disk Space</term>
    <listitem>
     <para>&nbsp;</para>
    </listitem>
   </varlistentry>
  </variablelist>  --> <variablelist id="sfss-binary-Call-Blocking_Service-Software_Prerequisites">
				<title>Software Prerequisites</title>
				<varlistentry>
					<term>Either an MSS for JBoss or an MSS for Tomcat Installation</term>
					<listitem>
						<para>
							The Call-Blocking Service requires either an MSS for JBoss or an MSS for Tomcat binary installation.
						</para>
						<para>
							You can find detailed instructions on installing MSS for JBoss here: <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running"/>.
						</para>
						<para>
							You can find detailed instructions on installing MSS for Tomcat here: <xref linkend="bssswticar-SIP_Servlets_Server_with_Tomcat-Installing_Configuring_and_Running"/>.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<formalpara id="sfss-binary-Call-Blocking_Service-Downloading">
				<title>Downloading</title>
				<para>
					The Call-Blocking Service is comprised of two archive files, a Web Archive (WAR) and a Default Application Router (DAR) configuration file, which you need to add to your installed SIP Servlets Server. For more information about WAR files, refer to the <ulink url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Server_Configuration_Guide/beta422/html/index.html">JBoss Application Server Administration and Development Guide</ulink>. For more information about DAR files, refer to the <ulink url="http://jcp.org/en/jsr/detail?id=289">JSR 289 spec, Appendix C</ulink>.
				</para>
			</formalpara>
			<para>
				Download the Call-Blocking Service's WAR file from here: <ulink url="http://repository.jboss.org/maven2/org/mobicents/servlet/sip/example/call-blocking/1.1/call-blocking-1.1.war"/>.
			</para>
			<para>
				Download the Call-Blocking Service's DAR file from here: <ulink url="http://www.mobicents.org/call-blocking-servlet-dar.properties"/>.
			</para>
			<formalpara id="sfss-binary-Call-Blocking_Service-Installing">
				<title>Installing</title>
				<para>
					Both the <filename>call-blocking-1.1.war</filename> WAR file and the <filename>call-blocking-servlet-dar.properties</filename> DAR file that you downloaded should be placed into different directories in your SIP Servlet Server installation hierarchy. Which directory depends on whether you are using the Call-Blocking Service with MSS for JBoss or with MSS for Tomcat:
				</para>
			</formalpara>
			<variablelist>
				<varlistentry>
					<term>MSS for JBoss</term>
					<listitem>
						<para>
							Place <filename>call-blocking-1.1.war</filename> into the <filename><envar>JBOSS_HOME</envar>/server/default/deploy/</filename> directory, and <filename>call-blocking-servlet-dar.properties</filename> into the <filename><envar>JBOSS_HOME</envar>/server/default/conf/dars/</filename> directory.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MSS for Tomcat</term>
					<listitem>
						<para>
							Place <filename>call-blocking-servlet-dar.properties</filename> into the <filename><envar>CATALINA_HOME</envar>/webapps/</filename> directory, and <filename>call-blocking-servlet-dar.properties</filename> into the <filename><envar>CATALINA_HOME</envar>/conf/dars/</filename> directory.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<formalpara id="sfss-binary-Call-Blocking_Service-Configuring">
				<title>Configuring</title>
				<para>
					The <literal>darConfigurationFileLocation</literal> attribute of the <literal>Service</literal> element must be set to the value <userinput>conf/dars/call-blocking-servlet-dar.properties</userinput>. The instructions for doing so are given below by SIP Servlets Server type:
				</para>
			</formalpara>
			<variablelist>
				<varlistentry>
					<term>MSS for JBoss</term>
					<listitem>
						<para>
							Open the <filename><envar>JBOSS_HOME</envar>/server/default/deploy/jboss-web.deployer/server.xml</filename> configuration file and find the <literal>Service</literal> element. Add an attribute to it called <userinput>darConfigurationFileLocation</userinput>, and set it to <replaceable>conf/dars/call-blocking-servlet-dar.properties</replaceable>:
						</para>
						<example id="sfss-Editing_SS_for_JBoss_server.xml_for_the_Call-Blocking_Service">
							<title>Editing MSS for JBoss's server.xml for the Call-Blocking Service</title>
							
<programlisting role="XML">&lt;Service
 name="jboss.web"
 className="org.mobicents.servlet.sip.startup.SipStandardService"
 sipApplicationDispatcherClassName="org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl"
 darConfigurationFileLocation="conf/dars/call-blocking-servlet-dar.properties"&gt;
</programlisting>
						</example>
						<para>
							Make sure that the configuration file only contains one <literal>darConfigurationFileLocation</literal> attribute: your new one.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MSS for Tomcat</term>
					<listitem>
						<para>
							Open the <filename><envar>CATALINA_HOME</envar>/conf/server.xml</filename> configuration file and find the <literal>Service</literal> element. Add an attribute to it called <userinput>darConfigurationFileLocation</userinput>, and set it to <userinput>conf/dars/call-blocking-servlet-dar.properties</userinput>:
						</para>
						<example id="sfss-Editing_MSS_for_Tomcats_server.xml_for_the_Call-Blocking_Service">
							<title>Editing MSS for Tomcat's server.xml for the Call-Blocking Service</title>
							
<programlisting role="XML">&lt;Service
 name="Sip-Servlets"
 className="org.mobicents.servlet.sip.startup.SipStandardService"
 sipApplicationDispatcherClassName="org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl"
 darConfigurationFileLocation="conf/dars/call-blocking-servlet-dar.properties"&gt;
</programlisting>
						</example>
						<para>
							Make sure that the configuration file only contains one <literal>darConfigurationFileLocation</literal> attribute: your new one.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<formalpara id="sfss-binary-Call-Blocking_Service-Running">
				<title>Running</title>
				<para>
					Once the WAR and DAR files have been placed in the right directories, and the JBoss Application Server or Tomcat Servlet Container knows where to find them (which you specified in a <filename>server.xml</filename> file), then you should go ahead and run SIP Servlets Server.
				</para>
			</formalpara>
			<para>
				To learn how to run the SIP Servlets-enabled JBoss Application Server, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Running"/>.
			</para>
			<para>
				To learn how to run the SIP Servlets-enabled Tomcat Container, refer to <xref linkend="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Running"/>.
			</para>
			<formalpara id="sfss-binary-Call-Blocking_Service-Testing">
				<title>Testing</title>
				<para>
					The following procedure shows how to test the Call-Blocking Service.
				</para>
			</formalpara>
			<procedure>
				<title>Testing the Call Blocking Service</title>
				<step>
					<para>
						Start a SIP softphone of your choice. The account name should be <userinput>blocked-sender</userinput>. The <literal>From Header</literal> should list one of the following addresses: <userinput>sip:blocked-sender@sip-servlets.com</userinput> or <userinput>sip:blocked-sender@127.0.0.1</userinput>. The SIP softphone does not need to be registered.
					</para>
				</step>
				<step>
					<para>
						Make a call to any address, and you should receive a <literal>FORBIDDEN</literal> response.
					</para>
				</step>
			</procedure>
			
			<!-- <formalpara
   id="sfss-binary-Call-Blocking_Service-Using">
   <title>Using</title>
   <para>&nbsp;</para>
  </formalpara> --> <formalpara id="sfss-binary-Call-Blocking_Service-Stopping">
				<title>Stopping</title>
				<para>
					To learn how to stop the SIP Servlets-enabled JBoss Application Server, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Stopping"/>.
				</para>
			</formalpara>
			<para>
				To learn how to stop the SIP Servlets-enabled Tomcat Container, refer to <xref linkend="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Stopping"/>.
			</para>
			<formalpara id="sfss-binary-Call-Blocking_Service-Uninstalling">
				<title>Uninstalling</title>
				<para>
					Unless disk space is at a premium, there is usually no need to uninstall the Call-Blocking Service. However, if you will not be using it again, you may want to unset or reset the <literal>darConfigurationFileLocation</literal> attribute of the <literal>Service</literal> element, which you set in the <filename>server.xml</filename> configuration file in <xref linkend="sfss-binary-Call-Blocking_Service-Configuring"/>.
				</para>
			</formalpara>
			<para>
				You may also wish to delete the WAR and DAR files for the Call-Blocking Service, which you installed in <xref linkend="sfss-binary-Call-Blocking_Service-Installing"/>.
			</para>
		</section>

	</section>
	
	<section id="sfss-The_Call-Forwarding_Service">
		<title>The Call-Forwarding Service</title>
		<para>
			The Mobicents Call-Forwarding Service, upon receiving an <literal>INVITE</literal> request, checks to see whether the sender's address is among those in a list of addresses which need to be forwarded. If so, then the Call-Forwarding Service acts as a Back-to-Back User Agent (B2BUA), and creates a new call leg to the destination. When the response is received from the new call leg, it sends it an acknowledgment (<literal>ACK</literal>) and then responds to the original caller. If, on the other hand, the server does not receive an <literal>ACK</literal>, then it tears down the new call leg with a <literal>BYE</literal>. Once the <literal>BYE</literal> is received, then it answers <literal>OK</literal> directly and sends the <literal>BYE</literal> to the new call leg.
		</para>
		<note id="sfss-Contacts_to_Forward_Cannot_Currently_Be_Configured">
			<title>Contacts to Forward Cannot Currently Be Configured</title>
			<para>
				Contacts to forward are currently hard-coded addresses. This model is evolving toward the eventual use of a database.
			</para>
		</note>
		<para>
			Here is the current hard-coded list of contacts to forward:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<literal>sip:receiver@sip-servlets.com</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>sip:receiver@127.0.0.1</literal>
				</para>
			</listitem>
		</itemizedlist>
		<!--  The Call-Forwarding Service  --> <section id="sfss-binary-Call-Forwarding_Service--Installing_Configuring_and_Running">
			<title>The Call-Forwarding Service: Installing, Configuring and Running</title>
			<formalpara id="sfss-binary-Call-Forwarding_Service-Pre-Install_Requirements_and_Prerequisites">
				<title>Pre-Install Requirements and Prerequisites</title>
				<para>
					The following requirements must be met before installation can begin.
				</para>
			</formalpara>
			<!--  <variablelist
   id="sfss-binary-Call-Forwarding_Service-Hardware_Requirements">
   <title>Hardware Requirements</title>
   <varlistentry>
    <term>Sufficient Disk Space</term>
    <listitem>
     <para>&nbsp;</para>
    </listitem>
   </varlistentry>
  </variablelist>  --> <variablelist id="sfss-binary-Call-Forwarding_Service-Software_Prerequisites">
				<title>Software Prerequisites</title>
				<varlistentry>
					<term>Either an MSS for JBoss or an MSS for Tomcat Installation</term>
					<listitem>
						<para>
							The Call-Forwarding Service requires either an MSS for JBoss or an MSS for Tomcat binary installation.
						</para>
						<para>
							You can find detailed instructions on installing MSS for JBoss here: <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running"/>.
						</para>
						<para>
							You can find detailed instructions on installing MSS for Tomcat here: <xref linkend="bssswticar-SIP_Servlets_Server_with_Tomcat-Installing_Configuring_and_Running"/>.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<formalpara id="sfss-binary-Call-Forwarding_Service-Downloading">
				<title>Downloading</title>
				<para>
					The Call-Forwarding Service is comprised of two archive files, a Web Archive (WAR) and a Data Archive (DAR), which you need to add to your installed SIP Servlets Server. For more information about WAR and DAR files, refer to the <ulink url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Server_Configuration_Guide/beta422/html/index.html">JBoss Application Server Administration and Development Guide</ulink>.
				</para>
			</formalpara>
			<para>
				Download the Call-Forwarding Service's WAR file from here: <ulink url="http://repository.jboss.org/maven2/org/mobicents/servlet/sip/example/call-forwarding/1.1/call-forwarding-1.1.war"/>.
			</para>
			<para>
				Download the Call-Forwarding Service's DAR file from here: <ulink url="http://www.mobicents.org/call-forwarding-servlet-dar.properties"/>.
			</para>
			<formalpara id="sfss-binary-Call-Forwarding_Service-Installing">
				<title>Installing</title>
				<para>
					Both the <filename>call-forwarding-1.1.war</filename> WAR file and the <filename>call-forwarding-servlet-dar.properties</filename> DAR file that you downloaded should be placed into different directories in your SIP Servlet Server installation hierarchy. Which directory depends on whether you are using the Call-Forwarding Service with MSS for JBoss or with MSS for Tomcat:
				</para>
			</formalpara>
			<variablelist>
				<varlistentry>
					<term>MSS for JBoss</term>
					<listitem>
						<para>
							Place <filename>call-forwarding-1.1.war</filename> into the <filename><envar>JBOSS_HOME</envar>/server/default/deploy/</filename> directory, and <filename>call-forwarding-servlet-dar.properties</filename> into the <filename><envar>JBOSS_HOME</envar>/server/default/conf/dars/</filename> directory.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MSS for Tomcat</term>
					<listitem>
						<para>
							Place <filename>call-forwarding-1.1.war</filename> into the <filename><envar>CATALINA_HOME</envar>/webapps/</filename> directory, and <filename>call-forwarding-servlet-dar.properties</filename> into the <filename><envar>CATALINA_HOME</envar>/conf/dars/</filename> directory.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<formalpara id="sfss-binary-Call-Forwarding_Service-Configuring">
				<title>Configuring</title>
				<para>
					The <literal>darConfigurationFileLocation</literal> attribute of the <literal>Service</literal> element must be set to the value <userinput>conf/dars/call-forwarding-b2bua-servlet-dar.properties</userinput>. The instructions for doing so are given below by SIP Servlets Server type:
				</para>
			</formalpara>
			<variablelist>
				<varlistentry>
					<term>MSS for JBoss</term>
					<listitem>
						<para>
							Open the <filename><envar>JBOSS_HOME</envar>/server/default/deploy/jboss-web.deployer/server.xml</filename> configuration file and find the <literal>Service</literal> element. Add an attribute to it called <userinput>darConfigurationFileLocation</userinput>, and set it to <replaceable>conf/dars/call-forwarding-b2bua-servlet-dar.properties</replaceable>:
						</para>
						<example id="sfss-Editing_SS_for_JBoss_server.xml_for_the_Call-Forwarding_Service">
							<title>Editing MSS for JBoss's server.xml for the Call-Forwarding Service</title>
							
<programlisting role="XML">&lt;Service
 name="jboss.web"
 className="org.mobicents.servlet.sip.startup.SipStandardService"
 sipApplicationDispatcherClassName="org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl"
 darConfigurationFileLocation="conf/dars/call-forwarding-b2bua-servlet-dar.properties"&gt;
</programlisting>
						</example>
						<para>
							Make sure that the configuration file only contains one <literal>darConfigurationFileLocation</literal> attribute: your new one.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MSS for Tomcat</term>
					<listitem>
						<para>
							Open the <filename><envar>CATALINA_HOME</envar>/conf/server.xml</filename> configuration file and find the <literal>Service</literal> element. Add an attribute to it called <userinput>darConfigurationFileLocation</userinput>, and set it to <userinput>conf/dars/call-forwarding-b2bua-servlet-dar.properties</userinput>:
						</para>
						<example id="sfss-Editing_MSS_for_Tomcats_server.xml_for_the_Call-Forwarding_Service">
							<title>Editing MSS for Tomcat's server.xml for the Call-Forwarding Service</title>
							
<programlisting role="XML">&lt;Service
 name="Sip-Servlets"
 className="org.mobicents.servlet.sip.startup.SipStandardService"
 sipApplicationDispatcherClassName="org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl"
 darConfigurationFileLocation="conf/dars/call-forwarding-b2bua-servlet-dar.properties"&gt;
</programlisting>
						</example>
						<para>
							Make sure that the configuration file only contains one <literal>darConfigurationFileLocation</literal> attribute: your new one.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<formalpara id="sfss-binary-Call-Forwarding_Service-Running">
				<title>Running</title>
				<para>
					Once the WAR and DAR files have been placed in the right directories, and the JBoss Application Server or Tomcat Servlet Container knows where to find them (which you specified in a <filename>server.xml</filename> file), then you should go ahead and run SIP Servlets Server.
				</para>
			</formalpara>
			<para>
				To learn how to run the SIP Servlets-enabled JBoss Application Server, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Running"/>.
			</para>
			<para>
				To learn how to run the SIP Servlets-enabled Tomcat Container, refer to <ulink url="bbssswticar-binary-SIP_Servlets_Server_with_Tomcat-Running"/>.
			</para>
			<formalpara id="sfss-binary-Call-Forwarding_Service-Testing">
				<title>Testing</title>
				<para>
					The following procedure shows how to test the Call-Forwarding Service.
				</para>
			</formalpara>
			<procedure>
				<title/>
				<step>
					<para>
						Start two SIP soft-phones of your choice. Set the account settings of the first SIP softphone to:
					</para>
					<itemizedlist>
						<listitem>
							<para>
								Account name: <userinput>forward-receiver</userinput>
							</para>
						</listitem>
						<listitem>
							<para>
								IP address: <userinput>127.0.0.1</userinput>
							</para>
						</listitem>
						<listitem>
							<para>
								Port: <userinput>5090</userinput>
							</para>
						</listitem>
					</itemizedlist>
					<para>
						Neither of the SIP soft-phones needs to be registered.
					</para>
				</step>
				<step>
					<para>
						From the second phone, make a call to <literal>sip:receiver@sip-servlets.com</literal>. The first phone, "forward-receiver", should now be ringing.
					</para>
				</step>
			</procedure>
			
			<!-- <formalpara
   id="sfss-binary-Call-Forwarding_Service-Using">
   <title>Using</title>
   <para>&nbsp;</para>
  </formalpara> --> <formalpara id="sfss-binary-Call-Forwarding_Service-Stopping">
				<title>Stopping</title>
				<para>
					To learn how to stop the SIP Servlets-enabled JBoss Application Server, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Stopping"/>.
				</para>
			</formalpara>
			<para>
				To learn how to stop the SIP Servlets-enabled Tomcat Container, refer to <xref linkend="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Stopping"/>.
			</para>
			<formalpara id="sfss-binary-Call-Forwarding_Service-Uninstalling">
				<title>Uninstalling</title>
				<para>
					Unless disk space is at a premium, there is usually no need to uninstall the Call-Forwarding Service. However, if you will not be using it again, you may want to unset or reset the <literal>darConfigurationFileLocation</literal> attribute of the <literal>Service</literal> element, which you set in the <filename>server.xml</filename> configuration file in <xref linkend="sfss-binary-Call-Forwarding_Service-Configuring"/>.
				</para>
			</formalpara>
			<para>
				You may also wish to delete the WAR and DAR files for the Call-Forwarding Service, which you installed in <xref linkend="sfss-binary-Call-Forwarding_Service-Installing"/>.
			</para>
		</section>

	</section>
	
	<section id="sfss-The_Call-Controller_Service">
		<title>The Call-Controller Service</title>
		<para>
			The Call-Controller service is a composition of two other services: Call-Blocking and Call-Forwarding. Essentially, it performs the services of both call-forwarding and call-blocking.
		</para>
		<itemizedlist>
			<listitem>
				<para>
					To learn about how the Call-Blocking service works, refer to <xref linkend="sfss-The_Call-Blocking_Service"/>.
				</para>
			</listitem>
			<listitem>
				<para>
					To learn about how the Call-Forwarding service works, refer to <xref linkend="sfss-The_Call-Forwarding_Service"/>.
				</para>
			</listitem>
		</itemizedlist>
		<note id="sfss-Blocked_Contacts_and_Contacts_to_Forward_Cannot_Currently_Be_Configured">
			<title>Blocked Contacts and Contacts to Forward Cannot Currently Be Configured</title>
			<para>
				Both the list of blocked contacts and the list of contacts to forward are currently both hard-coded. However, both of those models are evolving toward the eventual use of databases.
			</para>
		</note>
		<!--  The Call-Controller Service  --> <section id="sfss-binary-Call-Controller_Service--Installing_Configuring_and_Running">
			<title>The Call-Controller Service: Installing, Configuring and Running</title>
			<para>
				The Call-Controller service requires the two WAR files for the Call-Blocking and Call-Forwarding services to be placed in the correct directory inside your Mobicents SIP Servlets Server binary installation. However, the Call-Controller service does <emphasis>not</emphasis> require their corresponding DAR files: you need only to download and install a DAR file customized for the Call-Controller service. The instructions below show you how to do precisely this; there is no need, therefore, to first install either the Call-Blocking or the Call-Forwarding services, though it is helpful to at least be familiar with them.
			</para>
			<formalpara id="sfss-binary-Call-Controller_Service-Pre-Install_Requirements_and_Prerequisites">
				<title>Pre-Install Requirements and Prerequisites</title>
				<para>
					The following requirements must be met before installation can begin.
				</para>
			</formalpara>
			<!--  <variablelist
   id="sfss-binary-Call-Controller_Service-Hardware_Requirements">
   <title>Hardware Requirements</title>
   <varlistentry>
    <term>Sufficient Disk Space</term>
    <listitem>
     <para>&nbsp;</para>
    </listitem>
   </varlistentry>
  </variablelist>  --> <variablelist id="sfss-binary-Call-Controller_Service-Software_Prerequisites">
				<title>Software Prerequisites</title>
				<varlistentry>
					<term>Either an MSS for JBoss or an MSS for Tomcat Installation</term>
					<listitem>
						<para>
							The Call-Controller Service requires either an MSS for JBoss or an MSS for Tomcat binary installation.
						</para>
						<para>
							You can find detailed instructions on installing MSS for JBoss here: <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running"/>.
						</para>
						<para>
							You can find detailed instructions on installing MSS for Tomcat here: <xref linkend="bssswticar-SIP_Servlets_Server_with_Tomcat-Installing_Configuring_and_Running"/>.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<formalpara id="sfss-binary-Call-Controller_Service-Downloading">
				<title>Downloading</title>
				<para>
					The Call-Controller Service is comprised of two WAR files, one for the Call-Forwarding service and one for Call-Blocking, and a customized Call-Controller DAR file. You do not need to install the DAR files for the Call-Forwarding or the Call-Blocking services. For more information about WAR files, refer to the <ulink url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Server_Configuration_Guide/beta422/html/index.html">JBoss Application Server Administration and Development Guide</ulink>. For more information about DAR files, refer to the <ulink url="http://jcp.org/en/jsr/detail?id=289">JSR 289 spec, Appendix C</ulink>
				</para>
			</formalpara>
			<para>
				Download the Call-Blocking Service's WAR file from here: <ulink url="http://repository.jboss.org/maven2/org/mobicents/servlet/sip/example/call-blocking/1.1/call-blocking-1.1.war"/>.
			</para>
			<para>
				Download the Call-Forwarding Service's WAR file from here: <ulink url="http://repository.jboss.org/maven2/org/mobicents/servlet/sip/example/call-forwarding/1.1/call-forwarding-1.1.war"/>.
			</para>
			<para>
				Download the Call-Controller Service's DAR file from here: <ulink url="http://www.mobicents.org/call-controller-servlet-dar.properties"/>.
			</para>
			<formalpara id="sfss-binary-Call-Controller_Service-Installing">
				<title>Installing</title>
				<para>
					The <filename>call-blocking-1.1.war</filename>, <filename>call-forwarding-1.1.war</filename> and <filename>call-controller-servlet-dar.properties</filename> archive files that you downloaded should be placed into different directories in your SIP Servlet Server installation hierarchy. Which directory depends on whether you are using the Call-Controller Service with MSS for JBoss or with MSS for Tomcat:
				</para>
			</formalpara>
			<variablelist>
				<varlistentry>
					<term>MSS for JBoss</term>
					<listitem>
						<para>
							Place <filename>call-blocking-1.1.war</filename> and <filename>call-forwarding-1.1.war</filename> into the <filename><envar>JBOSS_HOME</envar>/server/default/deploy/</filename> directory, and <filename>call-controller-servlet-dar.properties</filename> into the <filename><envar>JBOSS_HOME</envar>/server/default/conf/dars/</filename> directory.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MSS for Tomcat</term>
					<listitem>
						<para>
							Place <filename>call-blocking-1.1.war</filename> and <filename>call-forwarding-1.1.war</filename> into the <filename><envar>CATALINA_HOME</envar>/webapps/</filename> directory, and <filename>call-controller-servlet-dar.properties</filename> into the <filename><envar>CATALINA_HOME</envar>/conf/dars/</filename> directory.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<formalpara id="sfss-binary-Call-Controller_Service-Configuring">
				<title>Configuring</title>
				<para>
					The <literal>darConfigurationFileLocation</literal> attribute of the <literal>Service</literal> element must be set to the value <userinput>conf/dars/call-controller-servlet-dar.properties</userinput>. Instructions for doing so are given below by SIP Servlets Server type:
				</para>
			</formalpara>
			<variablelist>
				<varlistentry>
					<term>MSS for JBoss</term>
					<listitem>
						<para>
							Open the <filename><envar>JBOSS_HOME</envar>/server/default/deploy/jboss-web.deployer/server.xml</filename> configuration file and find the <literal>Service</literal> element. Add an attribute to it called <userinput>darConfigurationFileLocation</userinput>, and set it to <replaceable>conf/dars/call-controller-servlet-dar.properties </replaceable>:
						</para>
						<example id="sfss-Editing_SS_for_JBoss_server.xml_for_the_Call-Controller_Service">
							<title>Editing MSS for JBoss's server.xml for the Call-Controller Service</title>
							
<programlisting role="XML">&lt;Service
 name="jboss.web"
 className="org.mobicents.servlet.sip.startup.SipStandardService"
 sipApplicationDispatcherClassName="org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl"
 darConfigurationFileLocation="conf/dars/call-controller-servlet-dar.properties "&gt;
</programlisting>
						</example>
						<para>
							Make sure that the configuration file only contains one <literal>darConfigurationFileLocation</literal> attribute: your new one.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MSS for Tomcat</term>
					<listitem>
						<para>
							Open the <filename><envar>CATALINA_HOME</envar>/conf/server.xml</filename> configuration file and find the <literal>Service</literal> element. Add an attribute to it called <userinput>darConfigurationFileLocation</userinput>, and set it to <userinput>conf/dars/call-controller-servlet-dar.properties </userinput>:
						</para>
						<example id="sfss-Editing_MSS_for_Tomcats_server.xml_for_the_Call-Controller_Service">
							<title>Editing MSS for Tomcat's server.xml for the Call-Controller Service</title>
							
<programlisting role="XML">&lt;Service
 name="Sip-Servlets"
 className="org.mobicents.servlet.sip.startup.SipStandardService"
 sipApplicationDispatcherClassName="org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl"
 darConfigurationFileLocation="conf/dars/call-controller-servlet-dar.properties "&gt;
</programlisting>
						</example>
						<para>
							Make sure that the configuration file only contains one <literal>darConfigurationFileLocation</literal> attribute: your new one.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<formalpara id="sfss-binary-Call-Controller_Service-Running">
				<title>Running</title>
				<para>
					Once the WAR and DAR files have been placed in the right directories, and the JBoss Application Server or Tomcat Servlet Container knows where to find them (which you specified in a <filename>server.xml</filename> file), then you should go ahead and run SIP Servlets Server.
				</para>
			</formalpara>
			<para>
				To learn how to run the SIP Servlets-enabled JBoss Application Server, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Running"/>.
			</para>
			<para>
				To learn how to run the SIP Servlets-enabled Tomcat Container, refer to <xref linkend="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Running"/>.
			</para>
			<formalpara id="sfss-binary-Call-Controller_Service-Testing">
				<title>Testing</title>
				<para>
					Two use-cases can be distinguished for the Call-Controller service: one in which a call is blocked, and another in which a call is forwarded. Therefore, we have two cases for which we can test the Call-Controller.
				</para>
			</formalpara>
			<procedure id="sfss-Blocking_a_Call_with_the_Call-Controller">
				<title>Blocking a Call with Call-Controller</title>
				<step>
					<para>
						Start two SIP soft-phones of your choice. Set the account settings of the SIP soft-phones to:
					</para>
					<itemizedlist>
						<title>Relevant First Softphone Settings</title>
						<listitem>
							<para>
								Account name: <userinput>forward-receiver</userinput>
							</para>
						</listitem>
						<listitem>
							<para>
								IP address: <userinput>127.0.0.1</userinput>
							</para>
						</listitem>
						<listitem>
							<para>
								Port: <userinput>5090</userinput>
							</para>
						</listitem>
					</itemizedlist>
					<itemizedlist>
						<title>Relevant Second Softphone Settings</title>
						<listitem>
							<para>
								Account name: <userinput>blocked-sender</userinput>
							</para>
						</listitem>
					</itemizedlist>
					<para>
						Neither of the SIP soft-phones needs to be registered.
					</para>
				</step>
				<step>
					<para>
						From the second phone, <literal>blocked-sender</literal>, make a call to <literal>sip:receiver@sip-servlets.com</literal>. You should receive a <literal>FORBIDDEN</literal> response.
					</para>
				</step>
			</procedure>
			
			<procedure id="sfss-Forwarding_a_Call_with_the_Call-Controller">
				<title>Forwarding a Call with Call-Controller</title>
				<step>
					<para>
						Start two SIP soft-phones of your choice. Set the account settings of the SIP soft-phones to:
					</para>
					<itemizedlist>
						<title>Relevant First Softphone Settings</title>
						<listitem>
							<para>
								Account name: <userinput>forward-receiver</userinput>
							</para>
						</listitem>
						<listitem>
							<para>
								IP address: <userinput>127.0.0.1</userinput>
							</para>
						</listitem>
						<listitem>
							<para>
								Port: <userinput>5090</userinput>
							</para>
						</listitem>
					</itemizedlist>
					<itemizedlist>
						<title>Relevant Second Softphone Settings</title>
						<listitem>
							<para>
								Account name: <userinput>forward-sender</userinput>
							</para>
						</listitem>
					</itemizedlist>
					<para>
						Neither of the SIP soft-phones needs to be registered.
					</para>
				</step>
				<step>
					<para>
						From the second softphone, <literal>forward-sender</literal>, make a call to <literal>sip:receiver@sip-servlets.com</literal>. The first phone, <literal>forward-receiver</literal>, should now be ringing.
					</para>
				</step>
			</procedure>
			
			<!-- <formalpara
   id="sfss-binary-Call-Controller_Service-Using">
   <title>Using</title>
   <para>&nbsp;</para>
  </formalpara> --> <formalpara id="sfss-binary-Call-Controller_Service-Stopping">
				<title>Stopping</title>
				<para>
					To learn how to stop the SIP Servlets-enabled JBoss Application Server, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Stopping"/>.
				</para>
			</formalpara>
			<para>
				To learn how to stop the SIP Servlets-enabled Tomcat Container, refer to <xref linkend="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Stopping"/>.
			</para>
			<formalpara id="sfss-binary-Call-Controller_Service-Uninstalling">
				<title>Uninstalling</title>
				<para>
					Unless disk space is at a premium, there is usually no need to uninstall the Call-Controller Service. However, if you will not be using it again, you may want to unset or reset the <literal>darConfigurationFileLocation</literal> attribute of the <literal>Service</literal> element, which you set in the <filename>server.xml</filename> configuration file in <xref linkend="sfss-binary-Call-Controller_Service-Configuring"/>.
				</para>
			</formalpara>
			<para>
				You may also wish to delete the WAR and DAR files for the Call-Controller Service, which you installed in <xref linkend="sfss-binary-Call-Controller_Service-Installing"/>.
			</para>
			<note>
				<para>
					<xref linkend="ssea-SIP_Servlet_Example_Applications"/> provides more information about other service examples available.
				</para>
			</note>
		</section>

	</section>
	
	<section id="mipbx-Media_IPBX" lang="en-US">
	<title>Media IPBX</title>
	<para>
		The Media IPBX provides an extensible and customizable SIP PBX solution, based on the Seam Telco Framework (STF). While the PBX is currently provided as a capability demonstration, the ultimate goal is to transition Media IPBX into a fully-fledged SIP PBX solution.
	</para>
	<para>
		Media IPBX terminates all calls to Mobicents Media Server conference endpoints, which provides flexibility in manipulating established calls including server-side conferencing and ring-back tones. The PBX can also be implemented as a Session Border Controller.
	</para>
	<note>
		<para>
			Media IPBX is compatible with Mobicents Sip Servlets with JBoss AS 4.2.3; versions prior to this release do not support Media IPBX.
		</para>
	</note>
	<para>
		Media IPBX provides the following major features: 
		<itemizedlist>
			<listitem>
				<para>
					User authentication.
				</para>
			</listitem>
			<listitem>
				<para>
					SIP phone registration.
				</para>
			</listitem>
			<listitem>
				<para>
					System configuration.
				</para>
			</listitem>
			<listitem>
				<para>
					Individual user views.
				</para>
			</listitem>
			<listitem>
				<para>
					Call monitoring and management.
				</para>
			</listitem>
			<listitem>
				<para>
					Multiple SIP phone instances per user.
				</para>
			</listitem>
			<listitem>
				<para>
					Status-based SIP phone assignment for incoming calls.
				</para>
			</listitem>
			<listitem>
				<para>
					Public Switched Telephone Network (PSTN) support including administrative functions.
				</para>
			</listitem>
			<listitem>
				<para>
					Support for SIP REGISTER requests to automatically add phones by matching the username, or username and hostname (in 'strict mode' only).
				</para>
			</listitem>
			<listitem>
				<para>
					Optionally specify local or online sources for announcements and ringback tones.
				</para>
			</listitem>
			<listitem>
				<para>
					Session Border Controller capability.
				</para>
			</listitem>
			<listitem>
				<para>
					Full conferencing support, including: 
					<itemizedlist>
						<listitem>
							<para>
								Privacy functions, such as mute and closed-calls.
							</para>
						</listitem>
						<listitem>
							<para>
								Call status announcement.
							</para>
						</listitem>
						<listitem>
							<para>
								Ringback tones when waiting for other participants to join the conference.
							</para>
						</listitem>
						<listitem>
							<para>
								Joining incoming calls to a conference.
							</para>
						</listitem>
						<listitem>
							<para>
								Parking calls and isolating a single speaker using dual-tone multi-frequency (DTMF) tones. This feature is currently experimental.
							</para>
						</listitem>
					</itemizedlist>
				</para>
			</listitem>
		</itemizedlist>
	</para>
	<para>
		Many of the features in Media IPBX are presented to the user as hints on the GUI portal pages. It is recommended to install Media IPBX and experiment with the demonstration to gain an understanding of how the solution works.
	</para>
	<para>
		For information about installing and running Media IPBX, including binary and source code locations, visit the <ulink url="http://www.mobicents.org/mss-ipbx.html">Media IPBX homepage</ulink>.
	</para>
</section>
</section>
</chapter>
	<chapter>
		<title>Clustering and High Availability</title>
		<section id="ssfjcs-SS_for_JBoss-Clustering_Support" lang="en-US">
	<!--  chapter id nickname: ssfjcs  --><title>MSS for JBoss: Clustering Support</title>
	<para>
		Mobicents supports the clustering of SIP Servlets-enabled JBoss Application Servers for performance, reliability and failover purposes. Note that only MSS for JBoss Servers can be used as cluster nodes; MSS for Tomcat Containers are not supported.
	</para>
	<para>
		The SIP Servlets Server uses the JBoss Application Server as its servlet container, and takes advantage of its capabilities, including clustering and failover. For detailed background information about JBoss Application Server clustering refer to the <ulink url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Clustering_Guide/beta422/html/index.html">JBoss Application Server Clustering Guide</ulink>.
	</para>
	<!--  SIP Servlets Server Cluster  --> <section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Installing_Configuring_and_Running">
		<title>SIP Servlets Server Cluster: Installing, Configuring and Running</title>
		<para>
			 
		</para>
		<section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-PreInstall_Requirements_and_Prerequisites">
			<title>Pre-Install Requirements and Prerequisites</title>
			<para>
				 
			</para>
			<variablelist id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Software_Prerequisites">
				<title>Software Prerequisites</title>
				<varlistentry>
					<term>A SIP Servlets-enabled JBoss Application Server</term>
					<listitem>
						<para>
							Before proceeding, ensure you have correctly configured your JBoss Application Server, according to SIP Servlet Server requirements:
						</para>
						<itemizedlist>
							<listitem>
								<para>
									<xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running"/>
								</para>
							</listitem>
						</itemizedlist>
						<para>
							The easiest way to set up a cluster of SIP Servlets-enabled JBoss Application Servers is to install, configure and test the binary distribution on one machine, and then copy the entire installation (directory) to the other machines in the cluster. This is the approach taken in this chapter.
						</para>
						<para>
							Install a SIP Servlets Server with JBoss by following the instructions detailed in <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running"/>.
						</para>
						<para>
							Afer meeting the requirement you can begin to configure the server <xref linkend="ssfjcs-binary-SIP_Servlets_Server_Cluster-Configuring"/> below.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		
		<!--  <section
  id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Downloading">
  <title>Downloading</title>
  <para>&nbsp;</para>
 </section>  --><!-- <section
   id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Installing">
   <title>Installing</title>
   <para>&nbsp;</para>
  </section> --> <section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Configuring">
			<title>Configuring</title>
			<para>
				Once installed, the MSS for JBoss binary distribution requires only minor configuration in order to enable clustering.
			</para>
			<para>
				SIP, and HTTP session state clustering is pre-configured straight out of the binary distribution. However, to enable session replication in a node, you must tag it as <literal>&lt;distributable/&gt;</literal> in the <filename>web.xml</filename> descriptor. This can be done either individually per application or globally for all applications.
			</para>
			<important id="ssfjcs-You_Must_Use_the_all_Server_Configuration_Profile">
				<title>You Must Use the "all" Server Configuration Profile</title>
				<para>
					You will notice that the following instructions modify one or more properties in the configuration files for the "all" Server Configuration Profile. This is evident in the path names given below. When we start each MSS for JBoss node, we will invoke <filename>run.sh</filename> (or <filename>run.bat</filename>) with the <option>-c all</option> option, which activates the clustering capabilities for that node. The server will then consult the configuration files under the <filename>&lt;topmost_directory&gt;/server/all/</filename> directory, and <emphasis>not</emphasis> in the the <filename>&lt;topmost_directory&gt;/server/default/</filename> subdirectories. Therefore, it is important to modify the correct files.
				</para>
			</important>
			<para>
				To change the correct profile, open the <filename>web.xml</filename> configuration file, which is stored in the <filename>&lt;install_directory&gt;/server/all/deploy/jboss-web.deployer/conf/</filename> directory,
			</para>
			<para>
				Add the empty element <literal>&lt;distributable/&gt;</literal> as a child of the root element &lt;<literal>web-app&gt;.</literal>
			</para>
			<para>
				This one configuration change is sufficient for enabling clustering capabilities in MSS for JBoss servers for all applications. For further information on session replication and clustering with JBoss, refer to <ulink url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Clustering_Guide/beta422/html/clustering-http-app.html">Enabling session replication in your application</ulink> in the <ulink url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Getting_Started_Guide/beta422/html/index.html">JBoss Application Server Getting Started Guide</ulink>.
			</para>
			<example id="ssfjcs-Enabling_Node_Session_Replication_in_the_web.xml_Deployer">
				<title>Enabling Node Session Replication in the Default web.xml Descriptor</title>
				
<programlisting linenumbering="unnumbered" role="XML">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;web-app
 xmlns="http://java.sun.com/xml/ns/j2ee"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
 version="2.4"&gt;
  &lt;!-- ======================== Introduction ============================== --&gt;
  &lt;!-- This document defines default values for *all* web applications      --&gt;
  &lt;!-- loaded into this instance of Tomcat.  As each application is         --&gt;
  &lt;!-- deployed, this file is processed, followed by the                    --&gt;
  &lt;!-- "/WEB-INF/web.xml" deployment descriptor from your own               --&gt;
  &lt;!-- applications.                                                        --&gt;
  &lt;!--                                                                      --&gt;
  &lt;!-- WARNING:  Do not configure application-specific resources here!      --&gt;
  &lt;!-- They should go in the "/WEB-INF/web.xml" file in your application.   --&gt;
  &lt;!-- =========== Common Context Params ================================== --&gt;
  &lt;!-- JBossInjectionProvider provides resource injection for managed beans. --&gt;
  &lt;!-- See JSF 1.2 spec section 5.4 for details.                             --&gt;
  &lt;distributable/&gt;
 &lt;context-param&gt;
  &lt;param-name&gt;com.sun.faces.injectionProvider&lt;/param-name&gt;
  &lt;param-value&gt;org.jboss.web.jsf.integration.injection.JBossInjectionProvider&lt;/param-value&gt;
 &lt;/context-param&gt;
</programlisting>
			</example>
		</section>
		
		<section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Running">
			<title>Running</title>
			<para>
				Clustering with MSS for JBoss nodes requires running all of the nodes using the "all" Server Configuration Profile, which is specified when you invoke <command>run.sh</command> or <command>run.bat</command>.
			</para>
			<formalpara>
				<title>Running MSS for JBoss with the "all" Configuration Profile, on Linux</title>
				<para>
					To run the server on Linux using the "all" Configuration Profile, start the server with the following command:
				</para>
			</formalpara>
			
<screen>mss-jboss-&lt;version&gt;]$ ./bin/run.sh -c all
</screen>
			<formalpara>
				<title>Running MSS for JBoss with the "all" Configuration Profile, on Windows</title>
				<para>
					To run the server on Windows using the "all" Configuration Profile, open the Command Prompt, change your folder to the topmost folder of your MSS for JBoss installation, and issue the following command:
				</para>
			</formalpara>
			
<screen>C:\Users\user\&lt;username&gt;\My Downloads\mss-jboss-&lt;version&gt;&gt;bin\run.bat -c all
</screen>
			<formalpara>
				<title>Distributing requests between nodes</title>
				<para>
					Together with the application server nodes, it is advised to run a SIP load-balancer or an IP load-balancer. The IP load balancer will distribute the traffic evenly between the nodes. A load-balancer is a single entry-point to all nodes. All calls should be made through the load balancer if High Availability is required. For more information about load balancing, refer to <xref linkend="sslb-SIP_Servlets_Load_Balancer-Implementation"/>.
				</para>
			</formalpara>
			<para>
				By default, the servers are configured with one SIP load-balancer set to the IP address <literal>127.0.0.1</literal>. This is specified in the <literal>balancers</literal> attribute in the <filename>server.xml</filename> configuration file as follows:
			</para>
			
<programlisting role="XML">&lt;Service name="jboss.web" 
      className="org.mobicents.servlet.sip.startup.failover.SipStandardBalancerNodeService"
  balancers="127.0.0.1"  
  sipApplicationDispatcherClassName="org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl"
concurrencyControlMode="None" 
  darConfigurationFileLocation="conf/dars/mobicents-dar.properties"&gt;
</programlisting>
		</section>
		
		<!-- <section
   id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Using">
   <title>Using</title>
   <para>&nbsp;</para>
  </section> --> <section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Stopping">
			<title>Stopping</title>
			<para>
				Individual nodes in the cluster should be stopped one-by-one, followed by the SIP load balancer. Refer to:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						Stopping the SIP load balancer: <xref linkend="sslb-binary-SIP_Load_Balancer-Stopping"/>
					</para>
				</listitem>
				<listitem>
					<para>
						Stopping MSS for JBoss: <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Stopping"/>
					</para>
				</listitem>
				<listitem>
					<para>
						Stopping MSS for Tomcat: <xref linkend="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Stopping"/>
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Testing">
			<title>Testing</title>
			<para>
				To test your JBoss cluster setup for mid-call failover, refer to:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<xref linkend="ssfjfs-SS_for_JBoss-Failover_Support"/>
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Uninstalling">
			<title>Uninstalling</title>
			<para>
				Uninstalling a SIP Servlets Cluster would entail deleting the Mobicents SIP Servlets Servers directories, the SIP Load Balancer directory, and possibly removing the unused <envar>JBOSS_HOME</envar> environment variable.
			</para>
		</section>

	</section>

</section>
		<section id="ssfjfs-SS_for_JBoss-Failover_Support" lang="en-US">
	<!--  chapter id nickname: ssfjfs  --><title>MSS for JBoss: Transparent Failover</title>
	<para>
		Just as with a Mobicents JAIN SLEE cluster, a Mobicents SIP Servlets Server for JBoss cluster does not employ any standby nodes. Typically, therefore, proxies and registrars must share the user location table by using a database cluster.
	</para>
	<para>
		The Mobicents SIP load balancer, which is a SIP Call ID-aware load balancer, is used as the intermediary. The SIP load balancer forwards stateful transaction requests to cluster nodes based on its provisioning algorithm. The SIP load balancer acts as an entry-point to the cluster and distributes the incoming requests between nodes. It is always advised to use a SIP load balancer or an IP load balancer in a cluster configuration.
	</para>
	<formalpara>
		<title>Testing a cluster</title>
		<para>
			This choice of implementation has many benefits:
		</para>
	</formalpara>
	<itemizedlist>
		<listitem>
			<para>
				There is no need for standby nodes, because the remaining nodes in a degraded cluster automatically and transparently (to the user) take on the load of the failed node. This can be done because both the SIP load balancer and SIP Servlet-enabled JBoss Application Servers support mid-call failover.
			</para>
		</listitem>
		<listitem>
			<para>
				There is no need to ensure that requests are directed to the correct node, because in a SIP Servlets-enabled JBoss Application Server (or Mobicents JAIN SLEE server) cluster, any node can serve any request to any User Agent (UA).
			</para>
		</listitem>
		<listitem>
			<para>
				All hardware is in use, reducing costs.
			</para>
		</listitem>
		<listitem>
			<para>
				Maintenance is easier, due to all nodes having nearly-identical configurations.
			</para>
		</listitem>
	</itemizedlist>
	<!-- <remark>These are the remaining steps, which I'm listing from README-network.txt:
  run sh prepare-jboss-server-for-clustering-failover-network.sh uas (or proxy or b2bua if you want to test something else) from this directory on both machines
run sh start-lb-network.sh from this directory
run sh start-jboss-server-all.sh from this directory on both machines
run sh clustering-failover-test-network.sh uas (or proxy or b2bua if you want to test something else) from this directory
When the ACK has been received kill the first node, the second node still handles the BYE and sends the OK to it :-)</remark>
  </step>
 </procedure>
 <remark>modify the JBOSS_HOME variable in prepare-jboss-server-for-clustering-failover.sh script to map your own
run sh prepare-jboss-server-for-clustering-failover.sh uas (or proxy, b2bua or uac  if you want to test something else) from this directory
run sh start-lb.sh from this directory
run sh start-jboss-server-port-1.sh from this directory
When server is fully started
run sh start-jboss-server-port-2.sh from this directory
When server is fully started
run sh clustering-failover-test.sh uas (or proxy, b2bua, b2bua-remote-send-bye, uac if you want to test something else) from this directory
When the ACK has been received kill the first node, the second node still handles the BYE and sends the OK to it :-)

Beware in case you test uac, because the shootist application that is used is compiled 2 times.
First time with a parameter saying that the application sends the INVITE when it starts (this one is deployed on jboss server port 1) and
the second time with the parameter saying that the application doesn't send the INVITE when it starts (this one is deployed on jboss server port 2)
The second time is used only for failover when the first node will crash to get the subsequent requests.
So you need to first start the jboss server port 2, then start the jboss server port 1 but before it is fully started (When you see SIP Load Balancer Found ! printed)
you need to run sh clustering-failover-test.sh uac so that it listen for the incoming INVITE from the application     </remark>
 <remark>We provide an example to run the Mobicents Sip Servlets cluster (comprised of 2 nodes), the load balancer and client application on different machines.

Please checkout our clustering and mid-call failover example and follow the README-network.txt instructions.
Cluster on the same machine

We provide an example to run the Mobicents Sip Servlets cluster (comprised of 2 nodes), the load balancer and client application on the same machine for ease of testing purposes.

Please checkout our clustering and mid-call failover example and follow the README.txt instructions.

Here is the modifications needed to run two application servers running at the same time on the same machine. (Those steps are done in the above example as part of the prepare-jboss-server-for-clustering-failover.sh script)

As we need two application servers running at the same time, we must avoid any conflict. For instance we will need JBoss Tomcat to bind its socket on two different ports otherwise a network conflict will occur. We will leverage the service binding manager this chapter of the JBoss AS documentation.

The first step is to copy the all configuration of JBoss into two separate configurations that we name ports-01 and ports-02 :

cd JBOSS_HOME/server
cp -r all ports-01
cp -r all ports-02

Edit the file JBOSS_HOME/server/ports-01/conf/jboss-service.xml and uncomment the service binding manager :

<![CDATA[<mbean code="org.jboss.services.binding.ServiceBindingManager"
name="jboss.system:service=ServiceBindingManager" >
<attribute name="ServerName">ports-01</attribute >
<attribute name="StoreURL">${jboss.home.url}/docs/examples/binding-manager/sample-bindings.xml</attribute >
<attribute name="StoreFactoryClassName">org.jboss.services.binding.XMLServicesStoreFactory</attribute >
</mbean >]]>

Edit the file JBOSS_HOME/server/ports-02/conf/jboss-service.xml , uncomment the service binding manager and change the value ports-01 into ports-02:

<![CDATA[<mbean code="org.jboss.services.binding.ServiceBindingManager"
name="jboss.system:service=ServiceBindingManager" >
<attribute name="ServerName">node-02</attribute >
<attribute name="StoreURL">${jboss.home.url}/docs/examples/binding-manager/sample-bindings.xml</attribute >
<attribute name="StoreFactoryClassName">org.jboss.services.binding.XMLServicesStoreFactory</attribute >
</mbean >]]>
Limitations

Mobicents Sip Servlets doesn't currently support mid call failover for converged applications only pure sip applications (Uas, Uac, B2BUA, Proxy).
</remark> --> <section id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover--Installing_Configuring_and_Running">
		<title>MSS for JBoss Cluster: Installing, Configuring and Running</title>
		<para>
			There are a number of options you can specify for MSS clustering. By default most of them are configured in the "all" server configuration, which is ready to use. In this chapter we will cover the most common configuration options you might need.
		</para>
		<section id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover-Downloading">
			<title>Downloading</title>
			<para>
				 
			</para>
		</section>
		
		<section id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover-Installing">
			<title>Installing</title>
			<para>
				 
			</para>
		</section>
		
		<section id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover-Configuring">
			<title>Configuring</title>
			<para>
				 
			</para>
		</section>
		
		<section id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover-Running">
			<title>Running</title>
			<para>
				 
			</para>
		</section>
		
		<section id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover-Using">
			<title>Using</title>
			<para>
				 
			</para>
		</section>
		
		<!--  <section
  id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover-Stopping">
  <title>Stopping</title>
  <para>&nbsp;</para>
 </section>  --> <section id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover-Testing">
			<title>Testing</title>
			<para>
				 
			</para>
		</section>
		
		<section id="ssfjfs-binary-Testing_SS_for_JBoss_Cluster_Failover-Uninstalling">
			<title>Uninstalling</title>
			<para>
				 
			</para>
		</section>

	</section>

</section>
		<section id="sslb-MSS_Load_Balancer" lang="en-US">
	<!--  chapter id nickname: sslb  --><title>MSS Load Balancer</title>
	<!-- Removed star network image because it's also in the introductory section, and jdocbook can't shrink it or align the caption --> <figure>
		<title>Star Cluster Topology.</title>
		<mediaobject id="sslb-mss-MSSSIPLoadBalancer-dia-StarNetworkTopology">
			<imageobject>
				<imagedata fileref="images/mss-MSSSIPLoadBalancer-dia-StarNetworkTopology.jpg" format="JPG" scalefit="1" width="440"/>
			</imageobject>
		</mediaobject>
	</figure>
	<para>
		The Mobicents SIP load balancer is used to balance the load of SIP service requests and responses between nodes in a SIP Servlets Server cluster. Both MSS for JBoss and MSS for Tomcat servers can be used in conjunction with the SIP load balancer to increase the performance and availability of SIP services and applications.
	</para>
	<para>
		In terms of functionality, the Mobicents SIP load balancer is a simple proxy server that intelligently forwards SIP session requests and responses between User Agents (UAs) on a Wide Area Network (WAN), and SIP Servlets Server nodes, which are almost always located on a Local Area Network (LAN). All SIP requests and responses pass through the SIP load balancer.
	</para>
	<!-- <note>
  <title/>
  <para>Before reading further, you should ensure that you are familiar with the terminology employed across all sections of the Mobicents SIP Servlets High-Availability chapter: <xref
    linkend="section-Mobicents_SIP_Servlets_Server"/>.</para>
 </note> --> <section id="sslb-SIP_Load_Balancing_Basics">
		<title>SIP Load Balancing Basics</title>
		<para>
			All User Agents send SIP messages, such as <literal>INVITE</literal> and <literal>MESSAGE</literal>, to the same SIP URI (the IP address and port number of the SIP load balancer on the WAN). The load balancer then parses, alters, and forwards those messages to an available node in the cluster. If the message was sent as a part of an existing SIP session, it will be forwarded to the cluster node which processed that User Agent's original transaction request.
		</para>
		<para>
			The SIP Servlets Server that receives the message acts upon it and sends a response back to the SIP load balancer. The SIP load balancer reparses, alters and forwards the message back to the original User Agent. This entire proxying and provisioning process is carried out independent of the User Agent, which is only concernd with the SIP service or application it is using.
		</para>
		<para>
			By using the load balancer, SIP traffic is balanced across a pool of available SIP Servlets Servers, increasing the overall throughput of the SIP service or application running on either individual nodes of the cluster. In the case of MSS for JBoss's <literal>&lt;/distributed&gt;</literal> capabilities, load balancing advantages are applied across the entire cluster.
		</para>
		<para>
			The SIP load balancer is also able to fail over requests mid-call from unavailable nodes to available ones, thus increasing the reliability of the SIP service or application. The load balancer increases throughput and reliability by dynamically provisioning SIP service requests and responses across responsive nodes in a cluster. This enables SIP applications to meet the real-time demand for SIP services.
		</para>
	</section>
	
	<section id="sslb-SIP_Servlets_Load_Balancer-Implementation">
		<title>Implementation of the Mobicents SIP Servlets Load Balancer</title>
		<para>
			Each individual Mobicents SIP Servlets Server in the cluster is responsible for contacting the SIP load balancer and relaying its health status and regular "heartbeats". <!-- Issue #822 Editor Comment - would it be worthwhile describing heartbeats in more detail here?  Can you link to another area in the guide which discusses heartbeats in more detail (to avoid duplicating information)? -->
		</para>
		<para>
			From these health status reports and heartbeats, the SIP load balancer creates and maintains a list of all available and healthy nodes in the cluster. The load balancer forwards SIP requests between these cluster nodes, providing that the provisioning algorithm reports that each node is healthy and is still sending heartbeats.
		</para>
		<para>
			If an abnormality is detected, the SIP load balancer removes the unhealthy or unresponsive node from the list of available nodes. In addition, mid-session and mid-call messages are failed over to a healthy node.
		</para>
		<para>
			For more information about this aspect of the load balancer, refer to <xref linkend="ssfjfs-SS_for_JBoss-Failover_Support"/>.
		</para>
		<para>
			The SIP load balancer first receives SIP requests from endpoints on a port that is specified in its Configuration Properties configuration file. The SIP load balancer, using a round-robin algorithm, then selects a node to which it forwards the SIP requests. The load balancer forwards all same-session requests to the first node selected to initiate the session, providign that the node is healthy and available.
		</para>
	</section>
	
	<section>
		<title>SIP Message Flow</title>
		<para>
			The Mobicents SIP load balancer appends itself to the <literal>Via</literal> header of each request, so that returned responses are sent to the SIP Balancer before they are sent to the originating endpoint.
		</para>
		<para>
			The load balancer also adds itself to the path of subsequent requests by adding Record-Route headers. It can subsequenty handle mid-call failover by forwarding requests to a different node in the cluster if the node that originally handled the request fails or becomes unavailable. The SIP load balancer immediately fails over if it receives and unhealthy status, or irregular heartbeats from a node.
		</para>
		<para>
			The SIP Servlets Server extends the <literal>SipStandardService</literal> class, which extends the Tomcat <literal>StandardService</literal> class. The <literal>StandardService</literal> class is responsible for implementing the Tomcat <literal>Service</literal> interface.
		</para>
		<para>
			In Tomcat architecture, a service is an intermediate component which resides inside a server, and binds one or more <literal>Connectors</literal> to exactly one <literal>Engine</literal>. When the service is started, the new <literal>SipStandardBalancerNodeService</literal> looks up its configuration information and obtains the SIP load balancer address. The heartbeat and health status is sent to the SIP load balancer address to identify the service as an available node of the cluster.
		</para>
		<para>
			The node parameters are configurable through their <literal>MBean</literal> interfaces; information on their configuration is provided in the following sections.
		</para>
		<para>
			In advanced configurations, it is possible to run more than one SIP load balancer.<!-- Issue #822 Editor Comment - is there more information regarding how to enable this? -->
		</para>
		<para>
			<xref linkend="figure-mss-Basic_IP_and_Port_Cluster_Configuration"/> describes a basic IP and Port Cluster Configuration. In the diagram, the SIP load balancer is the server with the IP address of <literal>192.168.1.1</literal>.
		</para>
		<figure id="figure-mss-Basic_IP_and_Port_Cluster_Configuration">
			<title>Basic IP and Port Cluster Configuration</title>
			<mediaobject id="sslb-mss-MSSSIPLoadBalancer-dia-ClusterIPsAndPorts">
				<imageobject>
					<imagedata align="center" fileref="images/mss-MSSSIPLoadBalancer-dia-ClusterIPsAndPorts.jpg" format="JPG" scalefit="1" width="532"/>
				</imageobject>
			</mediaobject>
		</figure>
	</section>
	
	<section id="sslb-binary-SIP_Load_Balancer-Installing_Configuring_and_Running">
		<title>SIP Load Balancer: Installing, Configuring and Running</title>
		<para>
			 
		</para>
		<section id="sslb-binary-SIP_Load_Balancer-PreInstall_Requirements_and_Prerequisites">
			<title>Pre-Install Requirements and Prerequisites</title>
			<para>
				 
			</para>
			<variablelist id="sslb-binary-SIP_Load_Balancer-Software_Prerequisites">
				<title>Software Prerequisites</title>
				<!-- Issue #822 Editor Comment - if I understand correctly, clustering won't work on Tomcat Servlet Containers.  If that is the case, it's probably easier to say:

1. Load balancing requires at least two Sip Servlet Servers.
2. Only SIP Servlet JBoss AS containers supported.  Tomcat Servlet Containers cannot be clustered.  

Or something similar to that.  Do you agree? --> <varlistentry>
					<term>A SIP Servlet-Enabled JBoss Application Server or Tomcat Servlet Container</term>
					<listitem>
						<para>
							Running the SIP load balancer requires at least two SIP Servlets Servers as a client nodes. Therefore, before configuring the SIP load balancer, we should make sure we've installed a SIP Servlets Server first. The Mobicents SIP load balancer will work with a SIP Servlets-enabled JBoss Application Server <emphasis>or</emphasis> a SIP Servlets-enabled Tomcat Container.
						</para>
						<para>
							However, if you intend to cluster multiple nodes for performance, reliability and failover purposes, then you will want to install and set up SIP Servlets-enabled JBoss AS nodes, because only they can be clustered, and not SIP-Servlet Tomcat Containers.
						</para>
						<itemizedlist>
							<listitem>
								<para>
									To install a SIP Servlet-enabled JBoss Application Server, follow the instructions here: <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running"/>.
								</para>
							</listitem>
							<listitem>
								<para>
									To install a SIP Servlet-enabled Tomcat Servlet Container, follow these instructions: <xref linkend="bssswticar-SIP_Servlets_Server_with_Tomcat-Installing_Configuring_and_Running"/>.
								</para>
							</listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		
		<section id="sslb-binary-SIP_Load_Balancer-Downloading">
			<title>Downloading</title>
			<para>
				The load balancer is located in the <filename>sip-balancer</filename> top-level directory of the MSS distribution. You will find the following files in the directory:
			</para>
			<variablelist>
				<varlistentry>
					<term>SIP load balancer executable JAR file</term>
					<listitem>
						<para>
							This is the binary file with all dependencies
						</para>
					</listitem>
				</varlistentry>
				<varlistentry id="sslb-binary-SIP_Load_Balancer-Configuration_Properties_File">
					<term>SIP load balancer Configuration Properties file</term>
					<listitem>
						<para>
							This is the properties files with various settings
						</para>
					</listitem>
				</varlistentry>
				<!--  Unnecessary, because the binary distribution has exact copies of these files
    <varlistentry>
     <term>Modified <filename>server.xml</filename> Configuration Files</term>
     <listitem>
      <para>You can use these sample modified <filename>server.xml</filename> configuration files to start either (or both) your SIP Servlet-customized <ulink
        url="http://code.google.com/p/mobicents/source/browse/trunk/servers/sip-servlets/sip-servlets-impl/docs/fialover-server-jboss.xml">JBoss</ulink> or <ulink
        url="http://code.google.com/p/mobicents/source/browse/trunk/servers/sip-servlets/sip-servlets-impl/docs/failover-server-tomcat-6.xml">Tomcat</ulink> container instances.</para>
     </listitem>
    </varlistentry> -->
			</variablelist>
		</section>
		
		<section id="sslb-binary-SIP_Load_Balancer-Installing">
			<title>Installing</title>
			<para>
				The SIP load balancer executable JAR file can be placed anywhere in the file system. It is recommended that the file is placed in the directory containing other JAR executables, so it can be easily located in the future.
			</para>
		</section>
		
		<section id="sslb-binary-SIP_Load_Balancer-Configuring">
			<title>Configuring</title>
			<para>
				Configuring the SIP load balancer and the two SIP Servlets-enabled Server nodes is described in <xref linkend="sslb-Configuring_the_SIP_Load_Balancer_and_Servlet_Server_Nodes"/>.
			</para>
			<procedure id="sslb-Configuring_the_SIP_Load_Balancer_and_Servlet_Server_Nodes">
				<title>Configuring the Mobicents SIP Load Balancer and Servlet Server Nodes</title>
				<step>
					<title>Configure lb.properties Configuration Properties File</title>
					<para>
						Configure the SIP load balancer's Configuration Properties file by substituting valid values for your personal setup. <xref linkend="sslb-Complete_Sample_lb.properties_File"/> shows a sample <filename>lb.properties</filename> file, with key element descriptions provided after the example.
					</para>
					<example id="sslb-Complete_Sample_lb.properties_File">
						<title>Complete Sample lb.properties File</title>
						
<programlisting linenumbering="unnumbered">
host=127.0.0.1
internalPort=5065
externalPort=5060
#JSIP stack configuration
javax.sip.STACK_NAME = SipBalancerForwarder
javax.sip.AUTOMATIC_DIALOG_SUPPORT = off
// You need 16 for logging traces. 32 for debug + traces.
// Your code will limp at 32 but it is best for debugging.
gov.nist.javax.sip.TRACE_LEVEL = 32
gov.nist.javax.sip.DEBUG_LOG = logs/sipbalancerforwarderdebug.txt
gov.nist.javax.sip.SERVER_LOG = logs/sipbalancerforwarder.xml
gov.nist.javax.sip.THREAD_POOL_SIZE = 64
gov.nist.javax.sip.REENTRANT_LISTENER = true
</programlisting>
					</example>
					<variablelist>
						<varlistentry>
							<term>host</term>
							<listitem>
								<para>
									Local IP address, or interface, on which the SIP load balancer will listen for incoming requests.
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>externalPort</term>
							<listitem>
								<para>
									Port on which the SIP load balancer listens for incoming requests from SIP User Agents.
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>internalPort</term>
							<listitem>
								<para>
									Port on which the SIP load balancer forwards incoming requests to available, and healthy, SIP Servlets Server cluster nodes.
								</para>
							</listitem>
						</varlistentry>
					</variablelist>
					<note>
						<para>
							The remaining keys and properties in the configuration properties file can be used to tune the JAIN SIP stack, but are not specifically required for load balancing. To assist with tuning, a comprehensive list of implementing classes for the SIP Stack is available from the <ulink url="http://snad.ncsl.nist.gov/proj/iptel/jain-sip-1.2/javadoc/javax/sip/SipStack.html">Interface Sip Stack page on nist.gov</ulink>. For a comprehensive list of properties associated with the SIP Stack implementation, refer to <ulink url="http://snad.ncsl.nist.gov/proj/iptel/jain-sip-1.2/javadoc/gov/nist/javax/sip/SipStackImpl.html">Class SipStackImpl page on nist.gov</ulink>.
						</para>
					</note>
				</step>
				<step>
					<title>Configure the <filename>server.xml</filename> configuration files</title>
					<para>
						Ensure the following attributes are configured for the <literal>&lt;service&gt;</literal> element in <filename>server.xml</filename>.
					</para>
					<itemizedlist>
						<listitem>
							<para>
								The <literal>className</literal> attribute must have the value <literal>org.mobicents.servlet.sip.startup.failover.SipStandardBalancerNodeService</literal> instead of <literal>org.mobicents.servlet.sip.startup.SipStandardService.</literal>
							</para>
						</listitem>
						<listitem>
							<para>
								The <literal>balancers</literal> attribute must contain a IP address (or list of addresses) of the SIP load balancer(s) to which heartbeat information will be sent.
							</para>
						</listitem>
					</itemizedlist>
				</step>
			</procedure>
			
			<note>
				<title>Configuration File Locations</title>
				<para>
					On MSS for Tomcat server installations, <filename>server.xml</filename> is located in <filename>&lt;install_directory&gt;/conf</filename>.
				</para>
				<para>
					On MSS for JBoss server installations, the default <filename>server.xml</filename> configuration file is located in <filename>server/default/deploy/jboss-web.deployer</filename>.
				</para>
				<para>
					On MSS for JBoss installations, with JBoss clustering support enabled, the "all" <filename>server.xml</filename> file must be configured. It is located in <filename>server/all/deploy/jboss-web.deployer</filename>.
				</para>
				<para>
					To determine what profile should be altered for each MSS for JBoss installation, refer to <xref linkend="ssfjcs-SS_for_JBoss-Clustering_Support"/>.
				</para>
			</note>
			<formalpara>
				<title>Easy Node Configuration with JMX</title>
				<para>
					Both SIP Servlet-enabled JBoss and Tomcat have <acronym>JMX</acronym> (Java Management Extensions) interfaces that allow for easy server configuration. The JMX Console is available once the server has been started by navigating to <ulink url="http://localhost:8080/jmx-console/"/>.
				</para>
			</formalpara>
			<para>
				Both the <literal>balancers</literal> and <literal>heartBeatInterval</literal> attribute values are available under <literal>serviceName=jboss.web,type=Service</literal> in the JMX Console.
				<variablelist>
					<varlistentry>
						<term>balancers</term>
						<listitem>
							<para>
								Host names of the SIP load balancer(s) with corresponding <literal>addBalancerAddress</literal> and <literal>removeBalancerAddress</literal> methods.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>heartBeatInterval</term>
						<listitem>
							<para>
								Interval at which each heartbeat is sent to the SIP load balancer(s).
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</para>
			<section>
				<title>Converged Load Balancing</title>
				<para>
					The MSS SIP load balancer can work in concert with HTTP load balancers such as <literal>mod_jk</literal>. Whenever an HTTP session is bound to a particular node, an instruction is sent to the SIP load balancer to direct the SIP calls from the same application session to the same node.
				</para>
				<para>
					It is sufficient to configure <literal>mod_jk</literal> to work for HTTP in JBoss in order to enable cooperative load balancing. MSS will read the configuration and will use it without any extra configuration. You can read more about configuring <literal>mod_jk</literal> with JBoss in your JBoss Application Server documentation.
				</para>
			</section>

		</section>
		
		<section id="sslb-binary-SIP_Load_Balancer-Running">
			<title>Running</title>
			<procedure id="sslb-Running_the_SIP_Load_Balancer_and_Servlet_Server_Nodes">
				<title>Running the SIP Load Balancer and Servlet Server Nodes</title>
				<step>
					<title>Start the SIP Load Balancer</title>
					<para>
						Start the SIP load balancer, ensuring the Configuration Properties file (<filename>lb.properties</filename> in this example) is specified. In the Linux terminal, or using the Windows Command Prompt, the SIP Load Balancer is started by issuing a command similar to this one:
					</para>
					
<screen>java -jar sip-balancer-1.0-20080829.103906-21-jar-with-dependencies.jar lb-configuration.properties
</screen>
					<para>
						Executing the SIP load balancer produces output similar to the following example:
					</para>
					
<screen>home]$ java -jar sip-balancer-1.0-20080829.103906-21-jar-with-dependencies.jar lb-configuration.properties 
Oct 21, 2008 1:10:58 AM org.mobicents.tools.sip.balancer.SIPBalancerForwarder start
INFO: Sip Balancer started on address 127.0.0.1, external port : 5060, port : 5065
Oct 21, 2008 1:10:59 AM org.mobicents.tools.sip.balancer.NodeRegisterImpl startServer
INFO: Node registry starting...
Oct 21, 2008 1:10:59 AM org.mobicents.tools.sip.balancer.NodeRegisterImpl startServer
INFO: Node expiration task created
Oct 21, 2008 1:10:59 AM org.mobicents.tools.sip.balancer.NodeRegisterImpl startServer
INFO: Node registry started
</screen>
					<para>
						The output shows the IP address on which the SIP load balancer is listening, as well as the external and internal listener ports.
					</para>
				</step>
				<step>
					<title>Configure SIP Servlet Server Nodes</title>
					<para>
						SIP Servlets Server nodes can run on the JBoss Application Server, or the Tomcat Servlet Container. The SIP Servlets Server binary distributions define the type of SIP Servlets Server nodes used, and should already be installed from <xref linkend="sslb-binary-SIP_Load_Balancer-Software_Prerequisites"/>.
					</para>
					<para>
						The <filename>server.xml</filename> file specifies the nodes used. Because there is more then one client node specified, unique listener ports must be specified for each node to monitor HTTP and/or SIP connections. <xref linkend="sslb-Changing_the_SIP_Connector_Port_for_Servlet_Server_Nodes"/> describes the affected element in the <filename>server.xml</filename> file.
					</para>
					<note>
						<title>Configuration File Location</title>
						<para>
							For the JBoss SIP Servlets Server binary distribution, <filename>server.xml</filename> is located in the <filename>&lt;install_directory&gt;/server/all/deploy/jboss-web.deployer/</filename> directory. For the Tomcat binary distribution, <filename>server.xml</filename> is located in the <filename>&lt;install_directory&gt;/conf/</filename> directory.
						</para>
					</note>
					<example id="sslb-Changing_the_SIP_Connector_Port_for_Servlet_Server_Nodes">
						<title>Changing the SIP Connector Port for Servlet Server Nodes in server.xml</title>
						
<programlisting linenumbering="unnumbered" role="XML">
&lt;!-- Define a SIP Connector --&gt;
&lt;Connector port="5080"
</programlisting>
					</example>
				</step>
				<step>
					<title>Start Load Balancer Client Nodes</title>
					<para>
						Start all SIP load balancer client nodes.
					</para>
					<!-- Issue #822 Editor Comment - What command would you execute to start all the client nodes? -->
				</step>
			</procedure>

		</section>
		
		<!-- <section
   id="sslb-binary-SIP_Load_Balancer-Using">
   <title>Using</title>
   <para>&nbsp;</para>
  </section --> <section id="sslb-binary-SIP_Load_Balancer-Testing">
			<title>Testing</title>
			<para>
				To test load balancing, the same application must be deployed manually on each node. Two SIP Softphones must be installed.
			</para>
			<procedure>
				<title>Testing Load Balancing</title>
				<step>
					<title>Deploy an Application</title>
					<para>
						Ensure that for each node, the DAR file location is specified in the <filename>server.xml</filename> file.
					</para>
					<para>
						Deploy the Location service manually on both nodes.
					</para>
				</step>
				<step>
					<title>Start the "Sender" SIP softphone</title>
					<para>
						Start a SIP softphone client with the SIP address of <userinput>sip:sender@sip-servlets-com</userinput>, listening on port 5055. The outbound proxy must be specified as the sip-balancer (http://127.0.0.1:5060)
					</para>
				</step>
				<step>
					<title>Start the "Receiver" SIP softphone</title>
					<para>
						Start a SIP softphone client with the SIP address of <userinput>sip:receiver-failover@sip-servlets-com</userinput>, listening on port 5090.
					</para>
				</step>
				<step>
					<title>Initiate two calls from "Sender" SIP softphone</title>
					<para>
						Initiate one call from <userinput>sip:sender@sip-servlets-com</userinput> to <userinput>sip:receiver-failover@sip-servlets-com</userinput>. Tear down the call once completed.
					</para>
					<para>
						Initiate a second call using the same SIP address, and tear down the call once completed. Notice that the call is handled by the second node.
					</para>
				</step>
			</procedure>

		</section>
		
		<section id="sslb-binary-SIP_Load_Balancer-Stopping">
			<title>Stopping</title>
			<para>
				Assuming that you started the JBoss Application Server as a foreground process in the Linux terminal, the easiest way to stop it is by pressing the <keycombo action="simul"><keycap>Ctrl</keycap><keycap>C</keycap></keycombo> key combination in the same terminal in which you started it.
			</para>
			<para>
				This should produce similar output to the following:
			</para>
			
<screen>^COct 21, 2008 1:11:57 AM org.mobicents.tools.sip.balancer.SipBalancerShutdownHook run
INFO: Stopping the sip forwarder
</screen>
		</section>
		
		<section id="sslb-binary-SIP_Load_Balancer-Uninstalling">
			<title>Uninstalling</title>
			<para>
				To uninstall the SIP load balancer, delete the JAR file you installed.
			</para>
		</section>

	</section>
	
	<section>
		<title>IP Load Balancing</title>
		<section>
			<title>IP Load Balancers</title>
			<para>
				An IP load-balancer is a network appliance that distributes traffic to an application server (or actual servers) using a load-balancing algorithm. IP load-balancing is often used when the other load-balancers' capacity is exceeded and can not scale further without hardware upgrades.
			</para>
			<para>
				Routing decisions are made based on OSI Layer 2, 3 or 4 data. This type of load balancer only examines low-level TCP, UDP or ethernet packet structures including MAC addresses, IP addresses, ports, and protocol types (TCP or UDP or other).
			</para>
			<para>
				An IP load balancer never reads the payload of the TCP/IP packets and therefore never parses SIP or HTTP (or any protocol above OSI Layer 4). Because an IP load balancing device is not SIP or HTTP aware in any way, it is much more performant than <literal>mod_jk</literal> or the MSS SIP load-balancer.
			</para>
		</section>
		
		<section>
			<title>Technical overview</title>
			<para>
				In its simplest form, the IP load-balancer usually "owns" the public-facing IP address (known as a VIP). <!-- Issue #822 Editor Comment - VIP = Virtual IP? --> The traffic is routed to actual servers in it's private network similar to NAT. It is also possible to not change the IP address and just work on the MAC address by assuming that all actual servers are configured to accept packets for the VIP address. The features offered by the IP load balancer depend largely on the vendor.
			</para>
			<para>
				Some examples of Linux-based software load balancers include <ulink url="http://www.redhat.com/cluster_suite/">Red Hat Cluster Suite (RHCS)</ulink> and <ulink url="http://www.linuxvirtualserver.org/">Linux Virtual Server (LVS)</ulink>. There are many hardware vendors as well.
			</para>
			<para>
				One main drawback relating to IP load balancers is that they can not make routing decisions based on SIP messages and (with some exceptions) they can not work cooperatively with HTTP or other load balancers.
			</para>
		</section>
		
		<section>
			<title>Configuring MSS Cluster with IP Load Balancers</title>
			<!-- Issue #822 Editor Comment - This paragraph block needs to be converted into a <procedure>. --> <para>
				First you need to remove the SIP load balancers from any configuration in MSS. In particular the <literal>balancers</literal> attribute in <filename>server.xml</filename>. and edit the jboss.web engine tag. You should remove the balancers attribute from the Service tag of jboss.web service. This simply removes the default load balancer from the system and the traffic bypasses the SIP load-balancer. Next you must configure MSS to put the IP load balancer IP address in the <literal>Via</literal>, <literal>Contact</literal> and other system headers where the IP address of the server machine is required. This will ensure that any responses or subsequent SIP requests follow the same path, but always hit the load balancer instead of particular cluster node that may fail. To specify the IP load balancer address in MSS your should edit this file <filename>JBOSS_HOME/server/all/deploy/jboss-web.deployer/server.xml</filename> and specify <literal>staticServerAddress</literal> such as:
			</para>
			
<programlisting>&lt;Connector port="5080" 
     ipAddress = "${jboss.bind.address}"
     ...
staticServerAddress="122.122.122.122" staticServerPort="44" 
useStaticAddress="true"/&gt;
</programlisting>
			<note>
				<para>
					Depending on your reliability requirements you can omit the configation described in this section and let the servers use their own IP address in the SIP messages.
				</para>
			</note>
		</section>

	</section>

</section>
	</chapter>
	<chapter id="emom-Enterprise-Monitoring-Operations-Management" lang="en-US">
	<title>Enterprise Monitoring and Management</title>
	<para>
		Jopr is an enterprise management solution for JBoss middleware projects and other application technologies. This pluggable project provides administration, monitoring, alerting, operational control and configuration in an enterprise setting with fine-grained security and an advanced extension model.
	</para>
	<para>
		It provides support for monitoring base operating system information on six operating systems as well as management of Apache, JBoss Application Server (JBoss AS) and other related projects. See the <ulink url="http://www.jboss.org/jopr">Jopr website</ulink> for more information or see the <ulink url="http://www.jboss.org/embjopr">Jopr embedded website</ulink>
	</para>
	<section>
		<title>Mobicents Sip Servlets Monitoring and Management</title>
		<para>
			This chapter provides information on how to enable the management of Mobicents Sip Servlets Servers through Jopr with our custom Jopr plug in. Two versions of Jopr are available: an embedded version, which is better suited to development environments; and a full version, which is better suited to production environments.
		</para>
		<para>
			The Mobicents Sip Servlet Jopr plug in provides a facility to view metrics related to the deployed applications, metrics related to the SIP Servlets Server. Additionally, the plugin provides the option to manage the Congestion and Concurrency settings of the SIP Servlets Server.
		</para>
		<section>
			<title>Installation of the Enterprise Monitoring and Management Console</title>
			<section>
				<title>Jopr for Development</title>
				<para>
					The Embedded Jopr (also known as the JBoss Administration Console) is pre-installed as an application deployed in the Mobicents SIP Servlets Server.
				</para>
			</section>
			
			<section>
				<title>Jopr for Production</title>
				<!-- Ticket #709 - Editor Comment - this list should be a procedure, and expanded to explain the process a bit more thoroughly. --> <itemizedlist>
					<listitem>
						<para>
							Follow the <ulink url="http://jboss.org/community/docs/DOC-12828">Jopr installation instructions</ulink> to install the latest version of Jopr.
						</para>
					</listitem>
					<listitem>
						<para>
							Stop the Jopr server and agent if they are running.
						</para>
					</listitem>
					<listitem>
						<para>
							Get the Mobicents Sip Servlets Jopr Plug in from here : <ulink url="http://repository.jboss.com/maven2/org/mobicents/servlet/sip/jopr-mobicents-sip-servlets-plugin/1.3/jopr-mobicents-sip-servlets-plugin-1.3.jar">http://repository.jboss.com/maven2/org/mobicents/servlet/sip/jopr-mobicents-sip-servlets-plugin/1.3/jopr-mobicents-sip-servlets-plugin-1.3.jar</ulink>
						</para>
					</listitem>
					<listitem>
						<para>
							Copy the jopr-mobicents-sip-servlets-plugin-1.3.jar just downloaded to the <filename>jopr-server/jbossas/server/default/deploy/rhq.ear/rhq-downloads/rhq-plugins/</filename> directory
						</para>
					</listitem>
					<listitem>
						<para>
							Start the Jopr server then the agent.
						</para>
					</listitem>
					<listitem>
						<para>
							Start the Mobicents Sip Servlets Server on JBoss, and ensure the binding address is specified
						</para>
						<para>
							<userinput>sh run.sh -b 192.168.0.10</userinput> (the Server will not get recognized on localhost)
						</para>
					</listitem>
				</itemizedlist>
			</section>

		</section>
		
		<section>
			<title>Usage Instructions</title>
			<!-- Issue #706 Editor Note - if you made these <sections> into <procedures>, (for example "Using Jopr for Development" and "Using Jopr for Production") you would avoid some of the 5 level headings you have here.  Also consider the usage of images in this section.  Do they *really* enhance the user's understanding of the step?  Think about writing about the images and documenting the critical fields that the user must complete. --> <section id="emom-Embedded-Jopr">
				<title>Jopr for Development</title>
				<itemizedlist>
					<listitem>
						<para>
							Log in to the Jopr console on <ulink url="http://localhost:8080/admin-console">http://localhost:8080/admin-console</ulink> and login as admin (user=admin, password=admin).
						</para>
					</listitem>
					<listitem>
						<para>
							From the tree on the left side of the screen, under Services , click on <guimenuitem>MobicentsSipServlets</guimenuitem> link, then click on the <guimenuitem>jboss.web:type=SipApplicationDispatcher</guimenuitem> link to view the incoming metrics.
						</para>
						<!-- Issue #706 Editor note - I have converted  all screenshots from <mediaobjects> to <figures> for you :)  I've also set the width attribute to 700 (<imagedata width="700") (usually, the limit for good formatting in HTML is 450).  The images, due to their size, were scaling off the html page.  For massive screenshots like this, consider capturing only the section of the screen that you are discussing in each step.  It will mean the information in the screenshot is more useful to the reader. --> <figure>
							<title>SIP Application Dispatcher Metrics</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-embjopr-home.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<para>
							Click on the Configuration Tab to tune the Congestion Controls parameters as defined in <xref linkend="sscacc-MSS_Concurrency_and_Congestion_Control"/>
						</para>
						<figure>
							<title>SIP Application Dispatcher Congestion Control Parameters Configuration</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-embjopr-config.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<para>
							Click on the <guilabel>Control Tab</guilabel> to set the Concurrency Control Mode and Congestion Control Policy as defined in <xref linkend="sscacc-MSS_Concurrency_and_Congestion_Control"/>
						</para>
						<figure>
							<title>SIP Application Dispatcher Congestion Control Parameters Configuration</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-embjopr-control.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<para>
							To begin metrics collection, and see them on the monitoring application, you must use an example application (such as location service) so that the SIP Servlets Server processes SIP Messages.
						</para>
						<figure>
							<title>Selected Application Metrics</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-embjopr-metrics.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<para>
							To see metrics for the application, click on the application under the Converged SIP/Web Application (SAR/WAR) link.
						</para>
						<figure>
							<title>Specific Application Metrics</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-jopr-applications.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<para>
							Then select the <guilabel>Metrics</guilabel> tab to actually see the metrics for the application.
						</para>
						<figure>
							<title>Specific Application Metrics Detail</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-embjopr-session-metrics.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
				</itemizedlist>
			</section>
			
			<section id="emom-Jopr4Production">
				<title>Jopr For Production</title>
				<!-- Issue #706 Editor Comment - these figures must have information about each figure in the <title> tag.  Please complete. --><!-- Issue #706 Editor Comment - make the step wording the same as Jopr for Development (for consistency) --> <itemizedlist>
					<listitem>
						<para>
							Log in to the Jopr console on <ulink type="" url="http://localhost:7080/">http://localhost:7080</ulink>
						</para>
						<para>
							From the <guilabel>Dashboard</guilabel> tab, in the Auto Discovery portlet, import your server (for example, deruelle-laptop JBossAS 4.2.3.GA default (192.168.0.12:1099)) from under localhost.
						</para>
						<figure>
							<title/>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-jopr-auto-disc.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<para>
							From the Dashboard, in the Recently Added Resources portlet, click on the server.
						</para>
						<figure>
							<title/>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-jopr-resources.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<para>
							On the new Monitor view click on the JBossWeb Server link.
						</para>
						<figure>
							<title/>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-jopr-monitor.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<para>
							Click on the SipApplicationDispatcher link to see the metrics coming in.
						</para>
						<figure>
							<title/>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-jopr-jboss-web.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<para>
							Click on the <guilabel>Configuration</guilabel> tab to tune the Congestion Control parameters as defined in <xref linkend="sscacc-MSS_Concurrency_and_Congestion_Control"/>
						</para>
						<figure>
							<title>SIP Application Dispatcher Congestion Control Parameters Configuration</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-jopr-queue.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<para>
							Click on the Control Tab to be able to set the Concurrency Control Mode and Congestion Control Policy as defined in <xref linkend="sscacc-MSS_Concurrency_and_Congestion_Control"/>
						</para>
						<figure>
							<title>SIP Application Dispatcher Congestion Control Parameters Configuration</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-jopr-concurrency.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<para>
							To get the metrics coming in, you will need to use an example application such as location service by example so that the SipApplicationDispatcher process requests.
						</para>
						<figure>
							<title/>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-jopr-metrics.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<para>
							To see Metrics about your application, click on the Converged SIP/Web Application (SAR/WAR) link.
						</para>
						<figure>
							<title/>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-jopr-sip-apps.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<para>
							Then click on your application.
						</para>
						<figure>
							<title/>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-jopr-applications.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<para>
							Click on the <guilabel>Configure</guilabel> link for the <guilabel>Monitor</guilabel> tab to select the metric data to view.
						</para>
						<figure>
							<title/>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-jopr-configure-metrics.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
					<listitem>
						<para>
							Select the <guilabel>MetaData</guilabel> tab to see the metrics of your application.
						</para>
						<figure>
							<title/>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/mss-jopr-session-metrics.png" format="PNG" scalefit="1" width="700"/>
								</imageobject>
							</mediaobject>
						</figure>
					</listitem>
				</itemizedlist>
			</section>

		</section>

	</section>
	
	<section>
		<title>SIP Load Balancer Monitoring and Management</title>
		<para>
			This documentation provides information on how to enable the management of Mobicents SIP Load Balancer through Jopr with our custom SIP Load Balancer Jopr plug in.
		</para>
		<para>
			With the Mobicents Sip Load Balancer Jopr plug in, you can currently see metrics, configure and manage the Mobicents Sip Load Balancer.
		</para>
		<!-- Issue #706 Editor Comment - consider changing the sections to <procedures>. --> <section>
			<title>Installation of the Enterprise Monitoring and Management Console</title>
			<!-- Issue #706 Editor comment - Don't forget: Itemised list para items should be complete sentences, therefore they should be finished with a full stop.  Likewise, they should start with a capital letter :) --> <itemizedlist>
				<listitem>
					<para>
						Follow the <ulink url="http://jboss.org/community/docs/DOC-12828">Jopr installation instructions</ulink> to install the latest version of Jopr.
					</para>
				</listitem>
				<listitem>
					<para>
						Stop the Jopr server and agent if they are running.
					</para>
				</listitem>
				<listitem>
					<para>
						Get the Mobicents Sip Load Balancer Jopr Plug in from JBoss maven repository at <ulink url="http://repository.jboss.org/maven2/org/mobicents/tools/sip-balancer-jopr-plugin/1.0/sip-balancer-jopr-plugin-1.0.jar">http://repository.jboss.org/maven2/org/mobicents/tools/sip-balancer-jopr-plugin/1.0/sip-balancer-jopr-plugin-1.0.jar</ulink>
					</para>
				</listitem>
				<listitem>
					<para>
						Copy the Mobicents Sip Load Balancer Jopr Plug in jar to the following directory:
					</para>
					<para>
						<filename>jopr-server/jbossas/server/default/deploy/rhq.ear/rhq-downloads/rhq-plugins/</filename>
					</para>
				</listitem>
				<listitem>
					<para>
						Start the Jopr server then the agent.
					</para>
				</listitem>
				<listitem>
					<para>
						Start your Mobicents Sip Load Balancer as explained here (and one node that connect to it to see it appear in the list of nodes).
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<!-- Issue #706 Editor Comment - consider changing the sections to <procedures>. --> <section>
			<title>Usage Instructions</title>
			<!-- Issue #706 Editor Comment - Remember, try to keep one succinct step per procedural step.  Too many substeps in a single step confuses the reader.  Also, usage instructions like this should be numbered (which would be automatic in a <procedure> to assist the reader. :) --> <itemizedlist>
				<listitem>
					<para>
						Log in to the Jopr console from the <guilabel>Dashboard</guilabel> tab, in the Auto Discovery portlet, import your Mobicents SIP Load Balancer (by example Mobicents SIP Load Balancer 1.0-SNAPSHOT) from under localhost.
					</para>
					<figure>
						<title/>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/mss-jopr-lb-dashboard.png" format="PNG" scalefit="1" width="700"/>
							</imageobject>
						</mediaobject>
					</figure>
				</listitem>
				<!-- Issue #706 Editor Comment - Avoid using "Then do this..." to start a step.  The reader knows that each step is sequential, and these extra words are not required :) --> <listitem>
					<para>
						From the Dashboard, in the Recently Added Resources portlet, click on the Mobicents SIP Load Balancer.
					</para>
					<!-- Issue #706 Editor Comment - because you have described the location of the item so well, you don't actually need the screenshot here.  Save maintenance and use this writing technique in as many procedures as you can. --> <figure>
						<title/>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/mss-jopr-lb-dash-added.png" format="PNG" scalefit="1" width="700"/>
							</imageobject>
						</mediaobject>
					</figure>
				</listitem>
				<listitem>
					<para>
						In the new Monitor view, click on the <guimenuitem>mobicents:name=LoadBalancer,type=LoadBalancer</guimenuitem> link
					</para>
					<figure>
						<title/>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/mss-jopr-lb-monitor.png" format="PNG" scalefit="1"/>
							</imageobject>
						</mediaobject>
					</figure>
				</listitem>
				<listitem>
					<para>
						You can now see the metrics coming in
					</para>
					<figure>
						<title/>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/mss-jopr-lb-metrics.png" format="PNG" scalefit="1"/>
							</imageobject>
						</mediaobject>
					</figure>
				</listitem>
				<listitem>
					<para>
						To configure the Load Balancer and see the list of nodes in the cluster it is connected to, click on the <guilabel>Configure</guilabel> tab.
					</para>
					<figure>
						<title/>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/mss-jopr-lb-config.png" format="PNG" scalefit="1"/>
							</imageobject>
						</mediaobject>
					</figure>
				</listitem>
				<listitem>
					<para>
						To start and stop the Load Balancer, click on the <guilabel>Operations</guilabel> tab.
					</para>
					<figure>
						<title/>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/mss-jopr-lb-ops.png" format="PNG" scalefit="1"/>
							</imageobject>
						</mediaobject>
					</figure>
				</listitem>
			</itemizedlist>
		</section>

	</section>

</chapter>
	<chapter id="afotsss-Advanced_Features_of_the_SIP_Servlets_Server" lang="en-US">
	<!--  chapter id nickname: afotsss  --><title>Advanced Features of the SIP Servlets Server</title>
	<para>
		The advanced features of <application condition="mob">Mobicents</application> SIP Servlets include Concurrency and Congestion Control, Load Balancing with the Mobicents Load Balancer, and, exclusively for MSS for JBoss, clustering and failover support.
	</para>
	<section id="mipbx-Media_Support" lang="en-US">
	<title>Media Support</title>
	<para>
		Mobicents Sip Servlets by implementing the Sip Servlets 1.1 specification is providing natively support for applications to setup calls through SIP Support.
	</para>
	<para>
		But since most Telco services have the need for managing and controlling media, by example to play announcements, mixing calls, recognize DTMF, ... Mobicents Sip Servlets allows applications to control media in 2 ways.
	</para>
	<section>
		<title>JSR 309 : Media Server Control API</title>
		<para>
			This Specification is a protocol agnostic API for Media Server Control. It provides a portable interface to create media rich applications with IVR, Conferencing, Speech Recognition, and similar features.
		</para>
		<para>
			Mobicents Media Server provides an implementation of the JSR 309 specification (currently in public review) using the MGCP protocol to allow controlling any Media Server (located in the same Virtual Machine or on a remote server) supporting MGCP.
		</para>
		<para>
			It is better demonstrated in the <ulink url="http://www.mobicents.org/mss-jsr309-demo.html">JSR 309 example application</ulink> provided with Mobicents Sip Servlets on JBoss 5
		</para>
	</section>
	
	<section>
		<title>Mobicents Media Server Control API (MSC API)</title>
		<para>
			Since JSR 309 is not final yet, the Mobicents Media Server provides it's own client API so that any applications within Mobicents Sip Servlets can interact with the Mobicents Media Server. One limitation with this API is that you can only control the Media Server if it's located in the same JVM as the Mobicents Sip Servlets container.
		</para>
		<para>
			The documentation of the API is provided <ulink url="http://hudson.jboss.org/hudson/job/MobicentsBooks/lastSuccessfulBuild/artifact/media/index.html#captms-MMS_Control_API">in the Mobicents Media Server user guide</ulink>
		</para>
		<para>
			The following examples demonstrate its usage :
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<ulink url="http://www.mobicents.org/media-demo.html">Media Example</ulink> : a Sip Servlet application showing how to use media capabilities (Media playback, Text to Speech with FreeTTS and DTMF detection).
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://www.mobicents.org/conference-demo.html">Conference Demo</ulink> : a Conference Media Server demo application built on GWT with server-push updates.
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://www.mobicents.org/shopping-demo.html">Shopping Example</ulink> : a Converged JEE Application showing SEAM integration, JEE, Media integration with TTS and DTMF support.
				</para>
			</listitem>
		</itemizedlist>
	</section>

</section>
	<section id="sscacc-MSS_Concurrency_and_Congestion_Control" lang="en-US">
	<!--  chapter id nickname: sscacc  --><title>Concurrency and Congestion Control</title>
	<para>
		Concurrency and Congestion control refer to settings you can tune that define the way in which messages are processed under heavy load. Needless to say, such configurable settings become highly-important in production environments. Tuning the concurrency control mode changes the way in which the SIP Servlets Server processes messages. Tuning the congestion control parameter means increasing or decreasing the point at which the server begins rejecting new requests. Both of these parameters can be set in one of four different ways: through the SIP Servlets Management Console; by editing the server's <filename>server.xml</filename> configuration file; from the <literal>dispatcher</literal> MBean; or from the Embedded Jopr integrated management platform.
	</para>
	<formalpara>
		<title>Concurrency Control</title>
		<para>
			Although the JSR 289 expert group could not agree on a concurrency control mechanism for JSR 289, leaving the details up to individual implementors, we believe that concurrency control as implemented in the Mobicents SIP Servlets Servers provides a highly-useful feature necessary in production environments. Concurrency control is implemented in both Mobicents Sip Servlets for JBoss and Mobicents Sip Servlets for Tomcat as a configurable mode which defines the way in which the SIP Servlets Server processes messages. There are a total of three different modes to choose from, based upon the individual requirements of your setup:
		</para>
	</formalpara>
	<variablelist>
		<varlistentry>
			<term>None</term>
			<listitem>
				<para>
					All SIP messages are processed as soon as possible in a thread from the global thread pool. Note that when using the <literal>None</literal> concurrency control mode, two messages belonging to the same <literal>SipSession</literal> can be processed simultaneously, so you must take measures to ensure that access to a shared resource such as the session attribute is synchronized in a thread-safe manner.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>SipSession</term>
			<listitem>
				<para>
					SIP messages are processed as soon as possible except that two messages from the same <literal>SipSession</literal> are guaranteed never to be processed simultaneously. Messages from the same <literal>SipSession</literal> are processed sequentially in their order-of-arrival. However, two (or more) messages from different <literal>SipSession</literal>s in the same <literal>SipApplicationSession</literal> may be processed simultaneously, in which case you should take measures to ensure shared resource synchronization. You should also pay special attention to Back-to-Back User Agent (B2BUA) cases in which each leg of the B2BUA consists of a different <literal>SipSession</literal> in the same <literal>SipApplicationSession</literal>.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>SipApplicationSession</term>
			<listitem>
				<para>
					SIP messages are processed as soon as possible with the guarantee that no two messages from the same <literal>SipSession</literal> <emphasis>or</emphasis> from the same <literal>SipApplicationSession</literal> will ever be processed simultaneously: they are instead processed sequentially in their order-of-arrival. This mode is the most thread-safe. However, you must still be careful if you are accessing shared resources in an unmanaged way, such as by accessing a <literal>SipSession</literal> attribute from an unmanaged thread, or from an Enterprise JavaBean. If you do so, be aware that such access will not be synchronized.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<formalpara>
		<title>Congestion Control</title>
		<para>
			Mobicents Sip Servlets currently defines two different congestion control mechanisms :
		</para>
	</formalpara>
	<itemizedlist>
		<listitem>
			<para>
				All SIP messages which cannot be processed immediately are put into a queue, and therein wait for either a free thread or for the lock on their session to be released. The exact size of this SIP message queue is a tunable parameter, and it currently defaults to <literal>1500</literal>. If the SIP Message queue becomes full, the container immediately begins rejecting any new SIP requests with either SIP error code 503 until the server catches up or drop any incoming messages depending of the congestion control policy chosen until the queue is once again diminished.
			</para>
		</listitem>
		<listitem>
			<para>
				If the percentage of memory currently used by the container goes over a configurable threshold (90% per default), the container will start rejecting any new SIP requests with either SIP error code 503 until the server catches up or drop any incoming messages depending of the congestion control policy chosen until the percentage of memory used by the container goes back below the threshold.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		Note that either situation, only new SIP requests are rejected; SIP responses which arrive in the milieu of a full queue are appropriately stored and are processed eventually.
	</para>
	<para>
		A background task is running at regular intervals within Mobicents Sip Servlets to gather information about the current server congestion and the interval can be adjusted in the configuration. This background task can be stopped and congestion control deactivated by setting the interval to 0 or a negative value.
	</para>
	<para>
		Also the congestion control policy, what to do with an incoming message when the server is overloaded, is configurable and the possible values are :
	</para>
	<itemizedlist>
		<listitem>
			<para>
				DropMessage - drop any incoming message
			</para>
		</listitem>
		<listitem>
			<para>
				ErrorResponse - send a 503 - Service Unavailable response to any incoming request (Default).
			</para>
		</listitem>
	</itemizedlist>
	<formalpara id="sscacc-Configuring_the_Concurrency_and_Congestion_Control_Settings">
		<title>Configuring the Concurrency and Congestion Control Settings</title>
		<para>
			The concurrency and congestion control settings can be configured through the SIP Servlets Management Console, by editing the server's <filename>server.xml</filename> configuration file, from the <literal>dispatcher</literal> MBean, or from the Embedded Jopr integrated management platform. Instructions for each method are given below.
		</para>
	</formalpara>
	<variablelist>
		<varlistentry>
			<term>Tuning Parameters with the SIP Servlets Management Console</term>
			<listitem>
				<para>
					The easiest way to configure the <guilabel>SIP Message Queue Size</guilabel> and <guilabel>Concurrency Control Mode</guilabel> tunable parameters is to open the <literal>SIP Servlets Management Console</literal> in your browser (by going to <ulink url="http://localhost:8080/sip-servlets-management"/>), making your changes, and then <guibutton>Apply</guibutton>ing them. Note that configuring the settings in the SIP Servlets Management Console does not persist across reboots. To make your settings changes permanent, you should edit your server's <filename>server.xml</filename> configuration file; instructions for doing so follow.
				</para>
				<mediaobject id="sscacc-sas-MSSSManagementConsole-ss-ServerSettings-1">
					<imageobject>
						<imagedata align="center" fileref="images/mss-MSSSManagementConsole-ss-ServerSettings.png" format="PNG" scalefit="1" width="440"/>
					</imageobject>
					<caption>
					<para>
						Tuning the concurrency and congestion control settings in the SIP Servlets Management Console
					</para>
					</caption>
				</mediaobject>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Tuning Parameters Permanently by Editing <filename>server.xml</filename></term>
			<listitem>
				<para>
					Alternatively, you can edit your server's <filename>server.xml</filename> configuration file, which has the benefit of making your chosen settings changes permanent. Instructions follow, grouped by the SIP Servlets Server you are running:
				</para>
				<procedure>
					<title>Tuning Mobicents Sip Servlets for JBoss Server Settings for Concurrency and Congestion Control</title>
					<step>
						<para>
							Open the <filename><envar>$JBOSS_HOME</envar>/server/default/deploy/jboss-web.deployer/server.xml</filename> configuration file in a text editor.
						</para>
					</step>
					<step>
						<para>
							Find the <literal>Service</literal> element and add a <literal>concurrencyControlMode</literal> and/or a <literal>sipMessageQueueSize</literal> attribute to it.
						</para>
						<para>
							The default value of the <literal>sipMessageQueueSize</literal> attribute is <replaceable>1500</replaceable>, of the congestion control checking interval is <emphasis>30000 millisecs (3O seconds)</emphasis>, of the default memory threshold is <emphasis>90%</emphasis> and the congestion control policy is <emphasis>ErrorResponse</emphasis>. Those are the default values which are used even if the attribute is not present in <filename>server.xml</filename>. You will need to play around with this setting for the optimal value, which depends on the hardware running your SIP Servlets Server.
						</para>
						<para>
							Possible values for the <literal>concurrencyControlMode</literal> attribute include: <replaceable>None</replaceable>, <replaceable>SipSession</replaceable> or <replaceable>SipApplicationSession</replaceable>. <replaceable>SipSession</replaceable> is the value of this attribute when it is not present—and overridden—in <filename>server.xml</filename>.
						</para>
						<example id="sscacc-MSSJ-Permanently_Changing_Tunable_Parameters_by_Editing_server.xml">
							<title>Permanently Changing Tunable Parameters by Editing JBoss's server.xml</title>
							
<programlisting role="XML">&lt;Service
 name="jboss.web"
 className="org.mobicents.servlet.sip.startup.SipStandardService"
 sipApplicationDispatcherClassName="org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl"
 darConfigurationFileLocation="conf/dars/mobicents-dar.properties"
 concurrencyControlMode="SipApplicationSession"
 sipMessageQueueSize="1600"
 congestionControlCheckingInterval="2000"
 congestionControlPolicy="DropMessage"
 memoryThreshold="80"&gt;
</programlisting>
						</example>
					</step>
				</procedure>
				
				<procedure>
					<title>Tuning Mobicents Sip Servlets for Tomcat Server Settings for Concurrency and Congestion Control</title>
					<step>
						<para>
							Open the <filename><envar>$CATALINA_HOME</envar>/conf/server.xml</filename> configuration file in your text editor.
						</para>
					</step>
					<step>
						<para>
							Find the <literal>Service</literal> element and add a <literal>concurrencyControlMode</literal> and/or a <literal>sipMessageQueueSize</literal> attribute to it.
						</para>
						<para>
							The default value of the <literal>sipMessageQueueSize</literal> attribute is <replaceable>1500</replaceable>, of the congestion control checking interval is <emphasis>30000 millisecs (3O seconds)</emphasis>, of the default memory threshold is <emphasis>90%</emphasis> and the congestion control policy is <emphasis>ErrorResponse</emphasis>. Those are the default values which are used even if the attribute is not present in <filename>server.xml</filename>. You will need to play around with this setting for the optimal value, which depends on the hardware running your SIP Servlets Server.
						</para>
						<para>
							Possible values for the <literal>concurrencyControlMode</literal> attribute include: <replaceable>None</replaceable>, <replaceable>SipSession</replaceable> or <replaceable>SipApplicationSession</replaceable>. <replaceable>SipSession</replaceable> is the value of this attribute if when it is not present and overridden in <filename>server.xml</filename>.
						</para>
						<example id="sscacc-MSST-Permanently_Changing_Tunable_Parameters_by_Editing_server.xml">
							<title>Permanently Changing Tunable Parameters by Editing Tomcat's server.xml</title>
							
<programlisting linenumbering="unnumbered" role="XML">&lt;Service
 name="jboss.web"
 className="org.mobicents.servlet.sip.startup.SipStandardService"
 sipApplicationDispatcherClassName="org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl"
 darConfigurationFileLocation="conf/dars/mobicents-dar.properties"
 concurrencyControlMode="SipApplicationSession"
 sipMessageQueueSize="1600"
 congestionControlCheckingInterval="2000"
 congestionControlPolicy="DropMessage"
 memoryThreshold="80"&gt;
</programlisting>
						</example>
					</step>
				</procedure>

			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Tuning Parameters from the dispatcher MBean</term>
			<listitem>
				<para>
					You can navigate to the <literal>dispatcher</literal> MBean from Mobicents Sip Servlets for JBoss's JMX console. All changes performed at run time are effective immediately, but are not persisted across reboots (which, if you want to happen, would require editing your server's <filename>server.xml</filename> configuration file as well, or instead).
				</para>
				<para>
					When editing the <literal>dispatcher</literal> MBean from Mobicents Sip Servlets for JBoss's JMX console, values allowed for the concurrency control mode are <userinput>None</userinput>, <userinput>SipSession</userinput> or <userinput>SipApplicationSession</userinput>.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Tuning Parameters from Enterprise Monitoring and Managent Console</term>
			<listitem>
				<para>
					Finally, once you have installed the Enterprise Monitoring and Managenemt console as described in <xref linkend="emom-Enterprise-Monitoring-Operations-Management"/>, you can change the tunable parameters, follow instructions given in <xref linkend="emom-Embedded-Jopr"/> or <xref linkend="emom-Jopr4Production"/>
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
</section>
	<section id="sss-SIP_Servlet_Security" lang="en-US">
	<title>SIP Servlets Application Security</title>
	<para>
		The information present in SIP requests often contains sensitive user information. To protect user information, SIP Security can be enabled on the server, and within the SIP application to mitigate the risk of unauthorised access to the information.
	</para>
	<para>
		Application security varies depending on the server type used. The following procedures describe how to configure the JBoss Application Server, and the Tomcat server.
	</para>
	<procedure>
		<title>Enable SIP Application Security in JBoss Application Server</title>
		<step>
			<title>Add Security Policy to Server</title>
			<orderedlist>
				<listitem>
					<para>
						Open a terminal and navigate to the conf directory:
					</para>
					
<programlisting>home]$ cd server/default/conf/
</programlisting>
				</listitem>
				<listitem>
					<para>
						Open <literal>login-config.xml</literal> (using your preferred editor) and append the security policy to the file:
					</para>
					
<programlisting role="XML">
&lt;application-policy name="sip-servlets"&gt;
&lt;authentication&gt;
  &lt;login-module code="org.jboss.security.auth.spi.UsersRolesLoginModule" 
    flag = "required"&gt;
  &lt;module-option name="usersProperties"&gt;props/sip-servlets-
    users.properties&lt;/module-option&gt;
  &lt;module-option name="rolesProperties"&gt;props/sip-servlets-
    roles.properties&lt;/module-option&gt;
  &lt;module-option name="hashAlgorithm"&gt;MD5&lt;/module-option&gt;
  &lt;module-option name="hashEncoding"&gt;rfc2617&lt;/module-option&gt;
  &lt;module-option name="hashUserPassword"&gt;false&lt;/module-option&gt;
  &lt;module-option name="hashStorePassword"&gt;true&lt;/module-option&gt;
  &lt;module-option name="passwordIsA1Hash"&gt;true&lt;/module-option&gt;
  &lt;module-option name="storeDigestCallback"&gt;
    org.jboss.security.auth.spi.RFC2617Digest&lt;/module-option&gt;
  &lt;/login-module&gt;
&lt;/authentication&gt;
&lt;/application-policy&gt;
</programlisting>
				</listitem>
			</orderedlist>
		</step>
		<step>
			<title>Update SIP Server user properties file</title>
			<orderedlist>
				<listitem>
					<para>
						Open a terminal and navigate to the /props directory:
					</para>
					
<programlisting>home]$ cd server/default/props/
</programlisting>
				</listitem>
				<listitem>
					<para>
						Open <literal>sip-servlets-users.properties</literal> and append the user lines to the file:
					</para>
					
<programlisting> 
  # A sample users.properties file, this line creates user "admin" with 
  # password "admin" for "sip-servlets-realm"
  admin=&lt;A1_cryptographic_string&gt;
</programlisting>
				</listitem>
				<listitem>
					<para>
						To create &lt;A1_cryptographic_string&gt;, execute the following command in a terminal:
					</para>
					
<programlisting>home]$ java -cp ../server/default/lib/jbosssx.jar
</programlisting>
				</listitem>
				<listitem>
					<para>
						Copy the A1 hash, and paste it into the admin parameter in the previous step.
					</para>
				</listitem>
				<listitem>
					<para>
						Save and close <literal>sip-servlets-users.properties</literal>.
					</para>
				</listitem>
			</orderedlist>
		</step>
		<step>
			<title>Update SIP Server roles file</title>
			<orderedlist>
				<listitem>
					<para>
						Open a terminal and navigate to the /props directory:
					</para>
					
<programlisting>home]$ cd server/default/props/
</programlisting>
				</listitem>
				<listitem>
					<para>
						Open <literal>sip-servlets-roles.properties</literal> (using your preferred editor) and append the following information to the file:
					</para>
					
<programlisting> 
# A sample roles.properties file for use with some roles
# Each line in this file assigns roles to the users defined in 
# sip-servlets-users.properties
admin=caller,role1,role2,..
</programlisting>
				</listitem>
			</orderedlist>
		</step>
		<step>
			<title>Add the security domain to the SIP application</title>
			<orderedlist>
				<listitem>
					<para>
						Open the <literal>jboss-web.xml</literal> file for the SIP application to which security is required.
					</para>
				</listitem>
				<listitem>
					<para>
						Add &lt;security-domain&gt; to the &lt;jboss-web&gt; element:
					</para>
					
<programlisting role="XML">
&lt;jboss-web &gt;
&lt;!--Uncomment the security-domain to enable security. You will need to edit the htmladaptor--&gt;
&lt;!--login configuration to setup the login modules used to authentication users.--&gt;
  &lt;security-domain&gt;java:/jaas/sip-servlets&lt;/security-domain&gt;
&lt;/jboss-web &gt;
</programlisting>
				</listitem>
			</orderedlist>
		</step>
		<step>
			<title>Add security constraints to the SIP application</title>
			<orderedlist>
				<listitem>
					<para>
						Open the <literal>sip.xml</literal> file for the SIP application.
					</para>
				</listitem>
				<listitem>
					<para>
						Add &lt;security-domain&gt; to the &lt;jboss-web&gt; element:
					</para>
					
<programlisting role="XML">
&lt;security-constraint&gt;
  &lt;display-name&gt;REGISTER Method Security Constraint&lt;/display-name&gt;
  &lt;resource-collection&gt;
    &lt;resource-name&gt;SimpleSipServlet&lt;/resource-name&gt;
    &lt;description&gt;Require authenticated REGISTER requests&lt;/description&gt;
    &lt;servlet-name&gt;SimpleSipServlet&lt;/servlet-name&gt;
    &lt;sip-method&gt;REGISTER&lt;/sip-method&gt;
  &lt;/resource-collection&gt;
  &lt;auth-constraint&gt;
    &lt;role-name&gt;caller&lt;/role-name&gt;
  &lt;/auth-constraint&gt;
&lt;/security-constraint&gt;
&lt;login-config&gt;
  &lt;auth-method&gt;DIGEST&lt;/auth-method&gt;
  &lt;realm-name&gt;sip-servlets-realm&lt;/realm-name&gt;
&lt;/login-config&gt;
</programlisting>
				</listitem>
			</orderedlist>
		</step>
	</procedure>
	
	<procedure>
		<title>Enable SIP Application Security in Tomcat Server</title>
		<step>
			<title>Activate the Memory Realm in Catalina:</title>
			<orderedlist>
				<listitem>
					<para>
						Open a terminal and navigate to the /conf directory:
					</para>
					
<programlisting>home]$ cd server/default/&lt;tomcat_home&gt;/conf/
</programlisting>
				</listitem>
				<listitem>
					<para>
						Open <literal>server.xml</literal> and uncomment the following line:
					</para>
					
<programlisting role="XML">&lt;!--&lt;Realm className="org.apache.catalina.realm.MemoryRealm"/&gt;--&gt;
</programlisting>
				</listitem>
			</orderedlist>
		</step>
		<step>
			<title>Update SIP Server user properties file</title>
			<orderedlist>
				<listitem>
					<para>
						In the /conf directory, open <literal>tomcat-users.xml</literal> (using your preferred editor) and append the following &lt;user&gt; sub-element:
					</para>
					
<programlisting role="XML">&lt;user name="user" password="password" roles="caller"/&gt;
</programlisting>
				</listitem>
			</orderedlist>
		</step>
		<step>
			<title>Add security constraints to the SIP application</title>
			<orderedlist>
				<listitem>
					<para>
						Open the <literal>sip.xml</literal> file for the SIP application to which security is required.
					</para>
				</listitem>
				<listitem>
					<para>
						Add &lt;security-domain&gt; to the &lt;jboss-web&gt; element:
					</para>
					
<programlisting role="XML">
&lt;security-constraint&gt;
  &lt;display-name&gt;REGISTER Method Security Constraint&lt;/display-name&gt;
  &lt;resource-collection&gt;
    &lt;resource-name&gt;SimpleSipServlet&lt;/resource-name&gt;
    &lt;description&gt;Require authenticated REGISTER requests&lt;/description&gt;
    &lt;servlet-name&gt;SimpleSipServlet&lt;/servlet-name&gt;
    &lt;sip-method&gt;REGISTER&lt;/sip-method&gt;
  &lt;/resource-collection&gt;
  &lt;auth-constraint&gt;
    &lt;role-name&gt;caller&lt;/role-name&gt;
  &lt;/auth-constraint&gt;
&lt;/security-constraint&gt;
&lt;login-config&gt;
  &lt;auth-method&gt;DIGEST&lt;/auth-method&gt;
  &lt;realm-name&gt;sip-servlets-realm&lt;/realm-name&gt;
&lt;/login-config&gt;
</programlisting>
				</listitem>
			</orderedlist>
		</step>
	</procedure>

</section>
	<section id="mssstun-MSS_STUN" lang="en-US">
	<title>STUN Support</title>
	<para>
		The Session Traversal Utilities for NAT (STUN) prococol is used in Network Address Translation (NAT) traversal for real-time voice, video, messaging, and related interactive IP application communications. This light-weight, client-server protocol allows applications passing through a NAT to obtain the public IP address for the UDP connections the application uses to connect to remote hosts.
	</para>
	<para>
		STUN support is provided at the SIP connector level, using the <ulink url="https://stun4j.dev.java.net/">STUN for Java</ulink> project. The STUN for Java project provides a Java implementation of the STUN Protocol (RFC 3489), which allows each SIP connector to select whether it should use STUN to discover a public IP address, and use this address in the SIP messages sent through the connector.
	</para>
	<para>
		To make a SIP connector STUN-enabled, three attributes must be appended to the &lt;connector&gt; tag in the <filename>server.xml</filename> file. The properties are: 
		<itemizedlist>
			<listitem>
				<para>
					useStun="true"
				</para>
				<para>
					Enables STUN support for this connector. Ensure that the <literal>ipAddress</literal> attribute is not set to <literal>127.0.0.1</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					stunServerAddress="&lt;Public_STUN_Server&gt;"
				</para>
				<para>
					STUN server address used to discover the public IP address of this SIP Connector. See the table below for a suggested list of public STUN servers.
				</para>
			</listitem>
			<listitem>
				<para>
					stunServerPort="3478"
				</para>
				<para>
					STUN server port of the STUN server used in the <literal>stunServerAddress</literal> attribute. Both TCP and UDP protocols communicate with STUN servers using this port only.
				</para>
			</listitem>
		</itemizedlist>
	</para>
	<note>
		<para>
			A complete list of available SIP connector attributes and their descriptions is located in the <xref linkend="bsssc-binary-SIP_Servlets_Server-Adding_SIP_Connectors"/> section of this guide.
		</para>
	</note>
	<para>
		A number of public STUN servers are available, and can be specified in the stunServerAddress. Depending on the router firmware used, the STUN reply packets' MAPPED_ADDRESS may be changed to the router's WAN port. To alleviate this problem, certain public STUN servers provide XOR_MAPPED_ADDRESS support. <xref linkend="tab-pss-Public_STUN_Servers"/> provides a selection of public STUN servers.
	</para>
	<table frame="all" id="tab-pss-Public_STUN_Servers">
		<title>Public STUN Servers</title>
		<tgroup align="left" cols="3" colsep="1" rowsep="1">
			<colspec colname="c1"/>
			<colspec colname="c2"/>
			<colspec colname="c3"/>
			<thead>
				<row>
					<entry align="center">
						Server Address
					</entry>
					<entry align="center">
						XOR Support
					</entry>
					<entry align="center">
						DNS SRV Record
					</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>
						stun.ekiga.net
					</entry>
					<entry>
						Yes
					</entry>
					<entry>
						Yes
					</entry>
				</row>
				<row>
					<entry>
						stun.fwdnet.net
					</entry>
					<entry>
						No
					</entry>
					<entry>
						Yes
					</entry>
				</row>
				<row>
					<entry>
						stun.ideasip.com
					</entry>
					<entry>
						No
					</entry>
					<entry>
						Yes
					</entry>
				</row>
				<row>
					<entry>
						stun01.sipphone.com
					</entry>
					<entry>
						Yes
					</entry>
					<entry>
						No
					</entry>
				</row>
				<row>
					<entry>
						stun.softjoys.com
					</entry>
					<entry>
						No
					</entry>
					<entry>
						No
					</entry>
				</row>
				<row>
					<entry>
						stun.voipbuster.com
					</entry>
					<entry>
						No
					</entry>
					<entry>
						No
					</entry>
				</row>
				<row>
					<entry>
						stun.voxgratia.org
					</entry>
					<entry>
						No
					</entry>
					<entry>
						No
					</entry>
				</row>
				<row>
					<entry>
						stun.xten.com
					</entry>
					<entry>
						Yes
					</entry>
					<entry>
						Yes
					</entry>
				</row>
				<row>
					<entry>
						stunserver.org
					</entry>
					<entry>
						Yes
					</entry>
					<entry>
						Yes
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<note>
		<para>
			Please make sure to read our Best Practices regarding NAT Traversal as described in <xref linkend="bp-Best_Practices_NAT"/>
		</para>
	</note>
</section>
	<section id="stf-Seam_Telco_Framework" lang="en-US">
	<title>Seam Telco Framework</title>
	<para>
		The Seam Telco Framework (STF) is a telecommunications application framework based on the JSR-289 specification, and JBoss Seam. The framework plugs the SIP Servlets 1.1 stack and the Media Server Control API into new or existing JBoss Seam applications. This allows Seam components to implement both the Web and telecommunication logic of the applications.
	</para>
	<para>
		The primary goals of the STF are to:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Unify Web, SIP, and media telecommunication applications.
			</para>
		</listitem>
		<listitem>
			<para>
				Allow complex enterprise applications to be built using the same programming model.
			</para>
		</listitem>
		<listitem>
			<para>
				Keep logical associations between SIP, Media and Web sessions.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		From an integration perspective, JBoss Seam provides access to different frameworks. These frameworks are made available to the telecommunication-specific applications for a particular role using the same context. The STF manages SipServletRequests and Media Server events while utilising existing JBoss Seam framework benefits, including: 
		<itemizedlist>
			<listitem>
				<para>
					Bijection
				</para>
			</listitem>
			<listitem>
				<para>
					Inversion of Control (IoC)
				</para>
			</listitem>
			<listitem>
				<para>
					Interceptors
				</para>
			</listitem>
			<listitem>
				<para>
					Scoping
				</para>
			</listitem>
			<listitem>
				<para>
					Transaction management
				</para>
			</listitem>
		</itemizedlist>
	</para>
	<para>
		Other advantages associated with the STF include: 
		<itemizedlist>
			<listitem>
				<para>
					Enterprise Java Beans (EJB) and Plain Old Java Objects (POJO) support.
				</para>
			</listitem>
			<listitem>
				<para>
					Loosely-coupled, asynchronous telecommunicaton component support.
				</para>
			</listitem>
			<listitem>
				<para>
					Web-layer interaction support.
				</para>
			</listitem>
			<listitem>
				<para>
					Synchronous and asynchronous light-weight message passing using @Observer-annotated methods.
				</para>
			</listitem>
			<listitem>
				<para>
					Integration with existing Seam IDE tools and infrastructure syntax.
				</para>
			</listitem>
		</itemizedlist>
	</para>
	<para>
		More information about the STF can be found on the <ulink url="http://groups.google.com/group/mobicents-public/web/seam-telco-framework-for-sip-servlets">STF homepage</ulink>. For information about JBoss Seam, refer to the <ulink url="http://docs.jboss.com/seam/latest/reference/en-US/html/index.html">community documentation</ulink>.
	</para>
</section>
	<section id="ssds-Diameter_Support" lang="en-US">
	<title>Diameter Support</title>
	<para>
		The Diameter Base Protocol (<ulink url="http://www.ietf.org/rfc/rfc3588.txt">RFC 3588</ulink>) is a computer networking protocol for Authentication, Authorization, and Accounting (AAA). Diameter can be used as a stand-alone solution, or within the JAIN SLEE Server environment using Resource Adapters.
	</para>
	<para>
		For more information regarding Diameter support, refer to the <ulink url="http://groups.google.com/group/mobicents-public/web/mobicents-diameter">Diameter Home Page</ulink>. For a list of Resource Adapter examples, refer to <xref linkend="ssea-SIP_Servlet_Example_Applications"/>.
	</para>
</section>
	<section id="saimse-SIP_and_IMS_Extensions" lang="en-US">
	<title>SIP and IMS Extensions</title>
	<para>
		SIP Extensions in the SIP Servlets Server are based on Internet Engineering Task Force (IETF) Request for Comments (RFC) protocol recommendatons. <xref linkend="tab-sse-Supported_SIP_Extensions"/> lists the supported RFCs for the SIP Servlets Server.
	</para>
	<table frame="all" id="tab-sse-Supported_SIP_Extensions">
		<title>Supported SIP Extensions</title>
		<tgroup align="left" cols="3" colsep="1" rowsep="1">
			<colspec colname="c1"/>
			<colspec colname="c2"/>
			<colspec colname="c3"/>
			<thead>
				<row>
					<entry align="center">
						Extension
					</entry>
					<entry align="center">
						RFC Number
					</entry>
					<entry align="center">
						Description
					</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>
						DNS
					</entry>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3263.txt">RFC 3263</ulink>
					</entry>
					<entry>
						SIP: Locating SIP Servers
					</entry>
				</row>
				<row>
					<entry>
						INFO
					</entry>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc2976.txt">RFC 2976</ulink>
					</entry>
					<entry>
						The SIP INFO Method
					</entry>
				</row>
				<row>
					<entry>
						IPv6
					</entry>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc2460.txt">RFC 2460</ulink>
					</entry>
					<entry>
						Internet Protocol, Version 6 (IPv6) Specification
					</entry>
				</row>
				<row>
					<entry>
						JOIN
					</entry>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3911.txt">RFC 3911</ulink>
					</entry>
					<entry>
						The SIP "Join" Header
					</entry>
				</row>
				<row>
					<entry>
						MESSAGE
					</entry>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3428.txt">RFC 3428</ulink>
					</entry>
					<entry>
						SIP Extension for Instant Messaging
					</entry>
				</row>
				<row>
					<entry>
						PATH
					</entry>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3327.txt">RFC 3327</ulink>
					</entry>
					<entry>
						SIP Extension Header Field for Registering Non-adjacent Contacts
					</entry>
				</row>
				<row>
					<entry>
						PRACK
					</entry>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3262.txt">RFC 3262</ulink>
					</entry>
					<entry>
						Reliability of Provisional Responses in the SIP
					</entry>
				</row>
				<row>
					<entry>
						PUBLISH
					</entry>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3903.txt">RFC 3903</ulink>
					</entry>
					<entry>
						SIP Extension for Event State Publication
					</entry>
				</row>
				<row>
					<entry>
						REASON
					</entry>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3326.txt">RFC 3515</ulink>
					</entry>
					<entry>
						The Reason Header Field for the Session Initiation Protocol (SIP)
					</entry>
				</row>
				<row>
					<entry>
						REFER
					</entry>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3515.txt">RFC 3515</ulink>
					</entry>
					<entry>
						The SIP Refer Method
					</entry>
				</row>
				<row>
					<entry>
						REPLACES
					</entry>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3891.txt">RFC 3891</ulink>
					</entry>
					<entry>
						The SIP "Replaces" Header
					</entry>
				</row>
				<row>
					<entry>
						STUN
					</entry>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3489.txt">RFC 3489</ulink>
					</entry>
					<entry>
						STUN - Simple Traversal of User Datagram Protocol (UDP) through Network Address Translators (NATs)
					</entry>
				</row>
				<row>
					<entry>
						SUBSCRIBE/NOTIFY
					</entry>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3265.txt">RFC 3265</ulink>
					</entry>
					<entry>
						SIP-specific Event Notification
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<para>
		IMS Private Header (P-Header) Extensions are provided according to the recommendations of the <ulink url="http://www.3gpp.org/">3rd Generation Partnering Project (3GPP)</ulink>, and the IETF. P-Header extensions are primarily used to store information about the networks a call traverses, including (but not limited to) security or call charging details.
	</para>
	<para>
		<xref linkend="tab-sse-IMS_P-Header_Extensions"/> describes the list of supported P-Headers, including links to the relevant ITEF memorandum where available.
	</para>
	<table frame="all" id="tab-sse-IMS_P-Header_Extensions">
		<title>IMS P-Header Extensions</title>
		<tgroup align="left" cols="2" colsep="1" rowsep="1">
			<colspec colname="c1"/>
			<colspec colname="c2"/>
			<thead>
				<row>
					<entry align="center">
						Extension
					</entry>
					<entry align="center">
						Description
					</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>
						AuthorizationHeaderIMS
					</entry>
					<entry>
						Defines a new auth-param for the Authorization header used in REGISTER requests.
					</entry>
				</row>
				<row>
					<entry>
						PAccessNetworkInfoHeader
					</entry>
					<entry>
						Contains information regarding the access network the User Agent (UA) uses to connect to the SIP Proxy. The information contained in this header may be sensitive, such as the cell ID, so it is important to secure all SIP application that interface with this header.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3324.txt">PAssertedIdentityHeader</ulink>
					</entry>
					<entry>
						Contains an identity resulting from an authentication process, derived from a SIP network intermediary. The identity may be based on SIP Digest authentication.
					</entry>
				</row>
				<row>
					<entry>
						PAssertedServiceHeader
					</entry>
					<entry>
						Contains information used by "trust domains", according to Spec(T) specifications detailed in <ulink url="http://www.ietf.org/rfc/rfc3324.txt">RFC 3324</ulink>.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3455.txt">PAssociatedURIHeader</ulink>
					</entry>
					<entry>
						Contains a list of URIs that are allocated to the user. The header is defined in the 200 OK response to a REGISTER request. It allows the User Agent Client (UAC) to determine the URIs the service provider has associated to the user's address-of-record URI.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3327.txt">PathHeader</ulink>
					</entry>
					<entry>
						SIP Extension header, with syntax similar to the RecordRoute header. Used in conjunction with SIP REGISTER requests and 200 class messages in response to REGISTER responses.
					</entry>
				</row>
				<row>
					<entry>
						PCalledPartyIDHeader
					</entry>
					<entry>
						Typically inserted en-route into an INVITE request by the proxy, the header is populated with the Request_URI received by the proxy in the request. The header allows the User Agent Server (UAS) to identify which address-of-record the invitation was sent to, and can be used to render distinctive audio-visual alert notes based on the URI.
					</entry>
				</row>
				<row>
					<entry>
						PChargingFunctionAddressesHeader
					</entry>
					<entry>
						Contains a list of one or more of the Charging Collection Function (CCF) and the Event Charging Function (ECF) addresses. The CCF and ECF addresses may be passed during the establishment of a dialog, or in a standalone transaction.
					</entry>
				</row>
				<row>
					<entry>
						PChargingVectorHeader
					</entry>
					<entry>
						Contains a unique charging identifier and correlation information, which is used by network operators to correctly charge for routing events through their networks.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3313.txt">PMediaAuthorizationHeader</ulink>
					</entry>
					<entry>
						Contains one or more session-specific media authorization tokens, which are used for QoS of the media streams.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3325.txt">PPreferredIdentityHeader</ulink>
					</entry>
					<entry>
						Contains a SIP URI and an optional display-name. For example, "James May" &lt;sip:james@domain.com&gt;. This header is used by trusted proxy servers to identify the user to other trusted proxies, and can be used to select the correct SIP URI in the case of multiple user identities.
					</entry>
				</row>
				<row>
					<entry>
						PPreferredServiceHeader
					</entry>
					<entry>
						Used by the PAssertedService Header to determine the preferred user service. Multiple PPreferreedService headers may be present in a single request.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc5002.txt">PProfileKeyHeader</ulink>
					</entry>
					<entry>
						Contains a key used by a proxy to query the user database for a given profile. The key may contain wildcards that are used as part of the query into the database.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3323.txt">PrivacyHeader</ulink>
					</entry>
					<entry>
						Contains values that determine whether particular header information is deemed as private by the UA for requests and responses.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc5502.txt">PServedUserHeader</ulink>
					</entry>
					<entry>
						Contains an identity of the user that represents the served user. The header is added to the initial requests for a dialog or standalone request, which are then routed between nodes in a trusted domain.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc4457.txt">PUserDatabaseHeader</ulink>
					</entry>
					<entry>
						Contains the address of the HSS handling the user that generated the request. The header field is added to request routed from an Interrogating Call Session Control Function (I-CSCF) to a Serving Call Session Control Function (S-CSCF)
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3455.txt">PVisitedNetworkIDHeader</ulink>
					</entry>
					<entry>
						Contains the identifier of a visited network. The identifier is a text string or token than it known by both the registrar or the home proxy at the home network, and the proxies in the visited network.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3329.txt">SecurityClientHeader, SecurityServerHeader, SecurityVerifyHeader</ulink>
					</entry>
					<entry>
						Contains information used to negotiate the security mechanisms between a UAC, and other SIP entities including UAS, proxy and registrar.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://www.ietf.org/rfc/rfc3608.txt">ServiceRouteHeader</ulink>
					</entry>
					<entry>
						Contains a route vector that will direct requests through a specified sequence of proxies. The header may be included by a registrar in response to a REGISTER request.
					</entry>
				</row>
				<row>
					<entry>
						<ulink url="http://snad.ncsl.nist.gov/proj/iptel/jain-sip-1.2/javadoc/gov/nist/javax/sip/header/ims/WWWAuthenticateHeaderIms.html">WWWAuthenticateHeaderIms</ulink>
					</entry>
					<entry>
						Extends the WWWAuthenticateResponse header functionality by defining an additional authorization parameter (auth-param).
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
</section>
	<section id="jruby-telco-integration" lang="en-US">
	<title>JRuby/Rails Integration with Torquebox Telco Framework</title>
	<para>
		Mobicents Sip Servlets is compatible with the <ulink url="http://torquebox.org/">Torquebox</ulink> Telco Framework JRuby on Rails integration. The framework allows you to create powerful, pure or converged VoIP JRuby on Rails applications.
	</para>
	<para>
		JRuby features a powerful and well deployed scripting language that allows you to modify your application at runtime (this is true even for the SIP and Media part that Mobicents Sip Servlets offer) without restarting the server. In addition, TorqueBox is a new kind of Ruby application platform that integrates popular technologies such as Ruby-on-Rails, while extending the footprint of Ruby applications to include support for Job Scheduling, Task Queues, SOAP Handling, and other capabilities.
	</para>
	<para>
		To obtain more information about building pure JRuby-Rails applications that leverage Mobicents SIP Servlets SIP and mediat capabilities, refer to the <ulink url="http://torquebox.org/documentation/browse/LATEST/telecom.html">Torquebox User Documentation</ulink>.
	</para>
	<para>
		Check this <ulink url="http://jeanderuelle.blogspot.com/2009/03/my-jruby-rails-app-on-jboss-can-make.html">blog post</ulink> to help you create your first pure Torquebox JRuby Telco application and our <ulink url="http://www.mobicents.org/mss-pure-jruby-telco.html">pure JRuby on Rails TorqueBox Telco example</ulink> showcasing this integration.
	</para>
</section>
	<section id="ss_jslee_interop" lang="en-US">
	<title>Sip Servlets - JAIN SLEE Interoperability</title>
	<para>
		<!-- Issue #818 Editor Comment - Hmm, this reads like marketing copy, not really information that is suitable for user documentation. 

Language like "religion war" is not the sort of stuff that belongs in user docs, right? :)

To fix this, I would suggest including the information about JAIN SLEE advantages and disadvantages and creating a table that lists these clearly for the reader. 

Instead of linking readers to the pdf, which is essentially marketing copy as well, perhaps extract the key points out of this document and list them in this section.  Approach the information you extract from the user perspective; what would they really want to know about from that document.

Describe to the user how JAIN SLEE and SIP Servlets Servers play nicely together. -->Why implement both specifications ? There is a religion war raging between Sip Servlets and JAIN-SLEE and most see them as competing specifications/products and try to choose between one or the other.
	</para>
	<para>
		Our take at JBoss, the only vendor to implement both technologies, is that they don't need to compete since they complete each other very well and it has been one of the leitmotiv behind building Mobicents Sip Servlets.
	</para>
	<para>
		JAIN SLEE is a more complex specification than SIP Servlets, and it has been know as heavyweight and with a steep learning curve. However JAIN SLEE has standardized a high performing event driven application server, an execution environment with a good concurrency model and powerful protocol agnostic capabilities thus covering a variety of Telco protocols.
	</para>
	<para>
		SIP Servlets on the other is way much simple and easier to get started with. Its focus is currently on SIP + HTTP/JEE only and is more of a programming model while JAIN SLEE is more of an application environment, a platform. The fact that Sip Servlets is focused on SIP+JEE makes it a natural fit to build JEE converged applications and way much simpler than JAIN SLEE.
	</para>
	<para>
		To us it feels like JAIN SLEE and Sip Servlets target different audiences, different needs. We wanted to leverage the power of both and make them work hand in hand to build an application that could leverage standards all the way without resorting to vendor proprietary extensions. <ulink url="http://mobicents.googlecode.com/files/deruelle-JSleeSipServletsInteroperability-final.pdf">Our "JSLEE and SIP-Servlets Interoperability with Mobicents Communication Platform" paper</ulink> describes our approach and the possible different approaches we have identified to achieve the goal of interoperability between Sip Servlets and JSLEE.
	</para>
	<para>
		You can also use our <ulink url="http://www.mobicents.org/jslee-sips-interop-demo.html">JSLEE/SIP Servlets interoperability example</ulink> showcasing our approach.
	</para>
</section>
	<section>
		<title>Eclipse IDE Tools</title>
		<para>
			The Mobicents Sip Servlets Eclipse Tools assist developers in creating JSR 289 applications with Mobicents. You can use the Dynamic Web Project wizard for Converged Applications to get started with an empty project and then you can test your application with a real SIP Phone right from the IDE.
		</para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/mss-ide-screen.png" format="PNG"/>
			</imageobject>
			<caption>SIP Servlets Eclipse IDE Tools</caption>
		</mediaobject>
		<section>
			<title>Pre-Install requirements</title>
			<para>
				Eclipse 3.4 is required.
			</para>
		</section>
		
		<section>
			<title>Installation</title>
			<para>
				The standard Eclipse Update Site installation mechanism is leveraged. The Mobicents Update Site is at the following location: <ulink url="http://mobicents.googlecode.com/svn/downloads/sip-servlets-eclipse-update-site">http://mobicents.googlecode.com/svn/downloads/sip-servlets-eclipse-update-site</ulink> After adding this update site to Eclipse you can proceed with regular Eclipse Plug-in Installation. If you need help the process is demonstrated in <ulink url="http://www.youtube.com/watch?v=LZOmLEC2IeQ">this video</ulink>.
			</para>
		</section>
		
		<section>
			<title>Sip Servlets Core Plug-in</title>
			<para>
				This Plug-in allows you to create Dynamic Web Projects with SIP Facet. There are a number of new Dynamic Web Project configurations for Converged applications. It's best to use the ones marked as "recommended". After you complete the wizards a complete converged project skeleton will be generated. Working with this type of project is similar to working with normal Web projects. You can see a demo <ulink url="http://people.redhat.com/vralev/mss-eclipse-plugin-demo/mss-eclipse.htm">here</ulink>.
			</para>
		</section>
		
		<section>
			<title>Sip Phone Plug-in</title>
			<para>
				The SIP Phone plug-in integrates a SIP phone inside your Eclipse IDE. You can use the phone to test your SIP or Media applications. The Phone uses the Microphone and the Speakers on your computer and allows to simulate real-world scenarios.
			</para>
		</section>

	</section>

</chapter>
	<chapter id="bp-Best_Practices" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Best Practices</title>
	<para>
		This chapter discusses Best Practices related to Mobicents Sip Servlets usage in real world deployments.
	</para>
	<section id="bp-Best_Practices_Perf_Tips">
		<title>Mobicents Sip Servlets Performance Tips</title>
		<para>
			Because the default profile of Mobicents Sip Servlets is targeted at a development environment, some tuning is required to make the server performance suitable for a production environment.
		</para>
		<section>
			<title>Tuning JBoss</title>
			<para>
				To ensure the server is finely tuned for a production envirionment, certain configuration must be changed. Visit the <ulink url="http://wiki.jboss.org/wiki/Wiki.jsp?page=JBossASTuningSliming">JBoss Application Server Tuning</ulink> wiki page to learn about optimization techniques.
			</para>
			<para>
				While it is preferrable to have a fast Application Server, most of the information doesn't apply to Mobicents. In summary, the most important optimization technique is to remove logs, leaving only what is required.
			</para>
			<para>
				Check the log configuration file in the following location and review the information.
			</para>
			<para>
				<filename>$JBOSS_HOME/server/default/conf/jboss-log4j.xml</filename>
			</para>
		</section>
		
		<section>
			<title>Tuning Mobicents Sip Servlets</title>
			<!-- Issue #838 Editor Comment - consider using a <variablelist> here.  You can put headings such as "Congestion Control" in the <term> element, and describe the tuning recommendations in a <listitem><para> element. --> <itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">Congestion Control</emphasis><!-- Issue #838 Editor Note - so how would a user determine whether they *should* turn this off?  What metrics would they use to make this decision?

Would it be better to say "It is recommended that this feature is enabled and the sipMessageQueueSize and memoryThreshold parameters are tuned according to <section reference>."  --> : You can turn it off if you don't think it's needed (though not advisable) or fine tune the <emphasis>sipMessageQueueSize</emphasis> and <emphasis>memoryThreshold</emphasis> parameters described in <xref linkend="sscacc-MSS_Concurrency_and_Congestion_Control"/>
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis role="bold">Concurrency</emphasis> : <emphasis>Default Value : None.</emphasis> For better performance, it is recommended to leave this value set to <userinput>None</userinput>.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<section>
			<title>Tuning The JAIN SIP Stack</title>
			<para>
				The stack can be fine-tuned by altering the following SIP stack properties, as defined in the external properties file.<!-- Issue #838 Editor Note - so where is this file located?  Is the information documented in another chapter/section that you can reference to? -->
			</para>
			<!-- Issue #838 Editor Note - Do not apply emphasis types to <emphasis> tags.  Let Publican and Maven decide how to format the text in the <emphasis> tag.  Remember that XML has the advantage of separating format from content.  Applying specific emphasis types to text defeats the main purpose of XML authoring :) --> <itemizedlist>
				<listitem>
					<para>
						<emphasis>gov.nist.javax.sip.THREAD_POOL_SIZE</emphasis>
					</para>
					<para>
						<emphasis>Default value: 64</emphasis>
					</para>
					<para>
						This thread pool is responsible for parsing SIP messages received from socket messages into objects.
					</para>
					<para>
						A smaller value will make the stack less responsive, since new messages have to wait in a queue for free threads. In UDP, this can lead to more retransmissions.
					</para>
					<para>
						Large thread pool sizes result in allocating resources that are otherwise not required.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>gov.nist.javax.sip.REENTRANT_LISTENER</emphasis>
					</para>
					<para>
						<emphasis>Default value: true</emphasis>
					</para>
					<para>
						This flag indicates whether the SIP stack listener is executed by a single thread, or concurrently by the threads that parse the messages.
					</para>
					<para>
						Mobicents Sip Servlets expects this flag to be set to <userinput>true</userinput>, therefore do not change the value.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>gov.nist.javax.sip.LOG_MESSAGE_CONTENT</emphasis>
					</para>
					<para>
						<emphasis>Default value: true</emphasis>
					</para>
					<para>
						Set the parameter to <userinput>false</userinput> to disable message logging.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>gov.nist.javax.sip.TRACE_LEVEL=0</emphasis>
					</para>
					<para>
						<emphasis>Default value: true</emphasis>.
					</para>
					<para>
						Set the parameter to <userinput>false</userinput> to disable JAIN SIP stack logging.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				The full list of JAIN SIP stack properties is available from <ulink url="http://snad.ncsl.nist.gov/proj/iptel/jain-sip-1.2/javadoc/javax/sip/SipStack.html">the SIP Stack Properties Home Page</ulink> and the full list of implementation specific properties are available from the <ulink url="http://snad.ncsl.nist.gov/proj/iptel/jain-sip-1.2/javadoc/gov/nist/javax/sip/SipStackImpl.html">SIP Stack Implementation Home Page</ulink>.
			</para>
		</section>
		
		<section>
			<title>Tuning The JVM</title>
			<para>
				The following tuning information applies to Sun JDK 1.6, however the information should also apply to Sun JDK 1.5.
			</para>
			<note>
				<para>
					For more information on performance, refer to the <ulink url="http://java.sun.com/performance/reference/whitepapers/6_performance.html">Performance White Paper</ulink>.
				</para>
			</note>
			<para>
				To pass arguments to the JVM, change <filename>$JBOSS_HOME/bin/run.conf</filename> (Linux) or <filename>$JBOSS_HOME/bin/run.bat</filename> (Windows).
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">Garbage Collection</emphasis>
					</para>
					<para>
						JVM ergonomics automatically attempt to select the best garbage collector. The default behaviour is to select the throughput collector, however a disadvantage of the throughput collector is that it can have long pauses times, which ultimately blocks JVM processing.
					</para>
					<para>
						For low-load implementations, consider using the incremental, low-pause, garbage collector (activated by specifying <emphasis><userinput>-XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode</userinput></emphasis>). Many SIP applications can benefit from this garbage collector type because it reduces the retransmission amount.
					</para>
					<para>
						For more information please read: <ulink url="http://java.sun.com/javase/technologies/hotspot/gc/gc_tuning_6.html">Garbage Collector Tuning </ulink>
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis role="bold">Heap</emphasis> <emphasis role="bold">Size</emphasis>
					</para>
					<para>
						Heap size is an important consideration for garbage collection. Having an unnecessarily large heap can stop the JVM for seconds, to perform garbage collection.
					</para>
					<para>
						Small heap sizes are not recommended either, because they put unnecessary pressure on the garbage collection system.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<section>
			<title>Tuning The Operating System</title>
			<para>
				The following tuning information is provided for Red Hat Enterprise Linux (RHEL) servers that are running high-load configurations. The tuning information should also apply to other Linux distributions.
			</para>
			<para>
				After you have configured RHEL with the tuning information, you must restart the operating system. You should see improvements in I/O response times. With SIP, the performance improvement can be as high as 20%.
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">Large Memory Pages</emphasis>
					</para>
					<para>
						Setting large memory pages can reduce CPU utilization by up to 5%.
					</para>
					<para>
						Ensure that the option <emphasis><userinput>-XX:+UseLargePages</userinput></emphasis> is passed and ensure that the following Java HotSpot(TM) Server VM warning does not occur:
					</para>
					<para>
						<literal>Failed to reserve shared memory (errno = 22)" when starting JBoss.</literal><!-- Issue #838 Editor Comment - what shoud the user do if they do encounter this error? -->
					</para>
					<para>
						To learn more about large memory pages, and how to configure them, refer to <ulink url="http://java.sun.com/javase/technologies/hotspot/largememory.jsp">Java Support for Large Memory Pages</ulink>.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis role="bold">Network buffers</emphasis>
					</para>
					<para>
						You can increase the network buffers size by adding the following lines to your <!-- Issue #838 Editor Comment - for all paths, and filename information, enclose the text in <filename> tags.  Publican and Maven make these entries monospaced, which is the common formatting people are used to for path and filename info. :) --><filename>/etc/sysctl.conf</filename> file:
					</para>
					<itemizedlist>
						<listitem>
							<para>
								<userinput>net.core.rmem_max = 16777216</userinput>
							</para>
						</listitem>
						<listitem>
							<para>
								<userinput>net.core.wmem_max = 16777216</userinput>
							</para>
						</listitem>
						<listitem>
							<para>
								<userinput>net.ipv4.tcp_rmem = 4096 87380 16777216</userinput>
							</para>
						</listitem>
						<listitem>
							<para>
								<userinput>net.ipv4.tcp_wmem = 4096 65536 16777216</userinput>
							</para>
						</listitem>
						<listitem>
							<para>
								<userinput>net.core.netdev_max_backlog = 300000</userinput>
							</para>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<!-- Issue #838 Editor Comment - I had to add a lead-in sentence to this point, because it was just a command with no context.  Is my interpretation of the command, and what it does, correct? --> <para>
						Execute the following command to set the network interface address:
					</para>
					<para>
						<command>sudo ifconfig [eth0] txqueuelen 1000 # </command>
					</para>
					<para>
						Replace [eth0] with the address of the actual network interface.
					</para>
				</listitem>
			</itemizedlist>
		</section>

	</section>
	
	<section id="bp-Best_Practices_NAT">
		<title>NAT Traversal</title>
		<para>
			In a production environment, it is common to see SIP and Media data passing through different kinds of Network Address Translation (NAT) to reach the required endpoints. Because NAT Traversal is a complex topic, refer to the following best practices<!-- Issue #838 Editor Comment - after reading the sections on ICE, TURN, and STUN, they read more like "pros and cons", not really "best practices".  Consider rewording this lead-in sentence to better reflect the information contained in the proceeding sections.  --> to help determine the most effective method to handle NAT issues.
		</para>
		<section>
			<title>STUN</title>
			<para>
				STUN (Session Traversal Utilities for NAT) is not generally considered a viable solution for enterprises because STUN cannot be used with symmetric NATs.
			</para>
			<para>
				Most enterprise-grade firewalls are symmetric, therefore STUN support must be provided in the SIP Clients themselves.
			</para>
			<para>
				Most of the proxy and media gateways installed by VoIP providers recognize the public IP address the packets have originated from. When both SIP end points are behind a NAT, they can act as gateways to clients behind NAT.
			</para>
		</section>
		
		<section>
			<title>TURN</title>
			<para>
				TURN (Traversal Using Relay NAT) is an IETF standard, which implements media relays for SIP end-points. The standard overcomes the problems of clients behind symmetric NATs which cannot rely on STUN to solve NAT traversal.
			</para>
			<para>
				TURN connects clients behind a NAT to a single peer, providing the same protection offered by symmetric NATs and firewalls. The TURN server acts as a relay; any data received is forwarded.
			</para>
			<para>
				This type of implementation is not ideal. It assumes the clients have a trust relationship with a TURN server, and a request session allocation based on shared credentials.
			</para>
			<para>
				This can result in scalability issues, and requires changes in the SIP clients. It is also impossible to determine when a direct, or TURN, connection is appropriate.
			</para>
		</section>
		
		<section>
			<title>ICE</title>
			<para>
				ICE (Interactive Connection Establishment) leverages both STUN and TURN to solve the NAT traversal issues.
			</para>
			<para>
				It allows devices to probe for multiple paths of communication, by attempting to use different port numbers and STUN techniques. If ICE support is present in both devices, it is quite possible that the devices can initiate and maintain communication end-to-end, without any intermediary media relay.
			</para>
			<para>
				Additionally, ICE can detect cases where direct communication is impossible and automatically initiate fall-back to a media relay.
			</para>
			<para>
				ICE is not currently in widespread use in SIP devices, because ICE capability must be embedded within the SIP devices.
			</para>
			<para>
				Depending on the negotiated connection, a reINVITE may be required during a session, which adds more load to the SIP network and more latency to the call.
			</para>
			<para>
				If the initiating ICE client attempts to call a non-ICE client, then the call setup-process will revert to a conventional SIP call requiring NAT traversal to be solved by other means.
			</para>
		</section>
		
		<section>
			<title>Other Approaches</title>
			<!-- Issue #838 Editor comment - After reading this section, I got the impression that STUN, TURN, and ICE are not recommended solutions.  

So if these are not the right methods, what should a user be configuring?  

Can you link to other sections in the guide that can show the reader what they should be considering? --> <para>
				Other approaches include using proxy and media that can act as gateways, Session Border Controllers, enhanced Firewall with Application Layer Gateway (ALG) and Tunnelling.<!-- Issue #838 Editor Comment - is there more information available on some websites that the reader can refer to? -->
			</para>
		</section>

	</section>

</chapter>
	<appendix lang="en-US">
	<title>Revision History</title>
	<simpara>
		<revhistory>
			<revision>
				<revnumber>3.0</revnumber>
				<date>Thu Jun 11 2009</date>
				<author>
					<firstname>Jared</firstname>
					<surname>Morgan</surname>
					<email>jmorgan@redhat.com</email>
				</author>
				<revdescription>
					<simplelist>
						<member>Second release of the "parameterized" documentation.</member>
					</simplelist>
				</revdescription>
			</revision>
			<revision>
				<revnumber>2.0</revnumber>
				<date>Fri Mar 06 2009</date>
				<author>
					<firstname>Douglas</firstname>
					<surname>Silas</surname>
					<email>dhensley@redhat.com</email>
				</author>
				<revdescription>
					<simplelist>
						<member>First release of the "parameterized", and much-improved JBCP documentation.</member>
					</simplelist>
				</revdescription>
			</revision>
		</revhistory>
	</simpara>
</appendix>
	<!-- <index /> -->
</book>

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Diameter_User_Guide.ent">
<!ENTITY PRODUCT "JBoss_Communications_Platform">
<!ENTITY BOOKID "doc-Diameter_User_Guide">
<!ENTITY YEAR "2009">
<!ENTITY HOLDER "Red Hat Inc">
]>
<book lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><bookinfo id="dug-Diameter_User_Guide" lang="en-US">
	<!--  chapter id nickname: sssug  --><title>Diameter User Guide</title>
	<subtitle>The Guide to the Mobicents Diameter Adapter</subtitle>
	<productname>Mobicents Platform</productname>
	<productnumber>1.2.1</productnumber>
	<edition>1.0</edition>
	<pubsnumber>1</pubsnumber>
	<abstract>
		<para><application condition="mob">The Mobicents Platform</application> is the first and only open source <acronym>VoIP</acronym> platform certified for <acronym>JAIN SLEE</acronym> 1.0 and <acronym>SIP</acronym> Servlets 1.1 compliance. <application condition="mob">Mobicents</application> serves as a high-performance core for Service Delivery Platforms (<acronym>SDP</acronym>s) and <acronym>IP</acronym> Multimedia Subsystems (<acronym>IMS</acronym>s) by leveraging <acronym>J2EE</acronym> to enable the convergence of data and video in Next-Generation
Intelligent Network (<acronym>NGIN</acronym>) applications.</para>
			<para>The <application condition="mob">Mobicents Platform</application> enables the composition of predefined Service Building Blocks (<acronym>SBB</acronym>s) such as Call-Control, Billing, User-Provisioning, Administration
and Presence-Sensing. Out-of-the-box monitoring and management of <application condition="mob">Mobicents</application> components is achieved through <acronym>JMX</acronym> Consoles. <acronym>JSLEE</acronym> allows popular protocol stacks such as <acronym>SIP</acronym> to be plugged in as Resource Adapters (<acronym>RA</acronym>s), and Service Building Blocks—which share many similarities with <acronym>EJB</acronym>s—allow the easy accommodation and integration of enterprise
applications with end points such as the Web, Customer Relationship
Management (<acronym>CRM</acronym>) systems and Service-Oriented Architectures (<acronym>SOA</acronym>s). The <application condition="mob">Mobicents Platform</application> is the natural choice for telecommunication Operations Support
Systems (OSSs) and Network Management Systems (NMSs).</para>
				<para>In addition to the telecommunication industry, the <application condition="mob">Mobicents Platform</application> is suitable for a variety of problem domains demanding an
Event-Driven Architecture (<acronym>EDA</acronym>) for high-volume, low-latency signaling, such as financial
trading, online gaming, (<acronym>RFID</acronym>) sensor network integration, and distributed control.</para></abstract>
					<corpauthor>
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="Common_Content/images/title_logo.svg" format="SVG"/>
							</imageobject>
							<textobject>
								<phrase>Logo</phrase>
							</textobject>
						</inlinemediaobject>
					</corpauthor>
					<copyright>
						<year>2009</year>
						<holder>Red Hat Inc</holder>
					</copyright>
					<!-- ORIGINAL:
 <xi:include
  href="Common_Content/Legal_Notice.xml"
  xmlns:xi="http://www.w3.org/2001/XInclude" /> --><!-- FOR JDOCBOOK: --><!-- <xi:include
  xmlns:xi="http://www.w3.org/2001/XInclude"
  href="Common_Content/Legal_Notice.xml">
  <xi:fallback
   xmlns:xi="http://www.w3.org/2001/XInclude">
   <xi:include
    href="fallback_content/Legal_Notice.xml"
    xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>
  </xi:fallback>
 </xi:include> --> <authorgroup lang="en-US">
	<author>
		<firstname>Alexandre</firstname>
		<surname>Mendonça</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">brainslog@gmail.com</email>
	</author>
	<author>
		<firstname>Bartosz</firstname>
		<surname>Baranowski</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">baranowb@gmail.com</email>
	</author>
	<author>
		<firstname>Jared</firstname>
		<surname>Morgan</surname>
		<contrib>Technical Writer and Editor</contrib>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv>Engineering Content Services</orgdiv>
		</affiliation>
		<email>jmorgan@redhat.com</email>
	</author>
</authorgroup>
				</bookinfo>
	<preface lang="en-US">
	<title>Preface</title>
	<para>
		 
	</para>
	<section lang="en-US" xml:base="fallback_content/Conventions.xml">
	<title>Document Conventions</title>
	<para>
		This manual uses several conventions to highlight certain words and phrases and draw attention to specific pieces of information.
	</para>
	<para>
		In PDF and paper editions, this manual uses typefaces drawn from the <ulink url="https://fedorahosted.org/liberation-fonts/">Liberation Fonts</ulink> set. The Liberation Fonts set is also used in HTML editions if the set is installed on your system. If not, alternative but equivalent typefaces are displayed. Note: Red Hat Enterprise Linux 5 and later includes the Liberation Fonts set by default.
	</para>
	<section>
		<title>Typographic Conventions</title>
		<para>
			Four typographic conventions are used to call attention to specific words and phrases. These conventions, and the circumstances they apply to, are as follows.
		</para>
		<para>
			<literal>Mono-spaced Bold</literal>
		</para>
		<para>
			Used to highlight system input, including shell commands, file names and paths. Also used to highlight key caps and key-combinations. For example:
		</para>
		<blockquote>
			<para>
				To see the contents of the file <filename>my_next_bestselling_novel</filename> in your current working directory, enter the <command>cat my_next_bestselling_novel</command> command at the shell prompt and press <keycap>Enter</keycap> to execute the command.
			</para>
		</blockquote>
		<para>
			The above includes a file name, a shell command and a key cap, all presented in Mono-spaced Bold and all distinguishable thanks to context.
		</para>
		<para>
			Key-combinations can be distinguished from key caps by the hyphen connecting each part of a key-combination. For example:
		</para>
		<blockquote>
			<para>
				Press <keycap>Enter</keycap> to execute the command.
			</para>
			<para>
				Press <keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap><keycap>F1</keycap></keycombo> to switch to the first virtual terminal. Press <keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap><keycap>F7</keycap></keycombo> to return to your X-Windows session.
			</para>
		</blockquote>
		<para>
			The first sentence highlights the particular key cap to press. The second highlights two sets of three key caps, each set pressed simultaneously.
		</para>
		<para>
			If source code is discussed, class names, methods, functions, variable names and returned values mentioned within a paragraph will be presented as above, in <literal>Mono-spaced Bold</literal>. For example:
		</para>
		<blockquote>
			<para>
				File-related classes include <classname>filesystem</classname> for file systems, <classname>file</classname> for files, and <classname>dir</classname> for directories. Each class has its own associated set of permissions.
			</para>
		</blockquote>
		<para>
			<application>Proportional Bold</application>
		</para>
		<para>
			This denotes words or phrases encountered on a system, including application names; dialogue box text; labelled buttons; check-box and radio button labels; menu titles and sub-menu titles. For example:
		</para>
		<blockquote>
			<para>
				Choose <guimenu>System &gt; Preferences &gt; Mouse</guimenu> from the main menu bar to launch <application>Mouse Preferences</application>. In the <guilabel>Buttons</guilabel> tab, click the <guilabel>Left-handed mouse</guilabel> check box and click <guibutton>Close</guibutton> to switch the primary mouse button from the left to the right (making the mouse suitable for use in the left hand).
			</para>
			<para>
				To insert a special character into a <application>gedit</application> file, choose <guimenu>Applications &gt; Accessories &gt; Character Map</guimenu> from the main menu bar. Next, choose <guimenu>Search &gt; Find…</guimenu> from the <application>Character Map</application> menu bar, type the name of the character in the <guilabel>Search</guilabel> field and click <guibutton>Next</guibutton>. The character you sought will be highlighted in the <guilabel>Character Table</guilabel>. Double-click this highlighted character to place it in the <guilabel>Text to copy</guilabel> field and then click the <guibutton>Copy</guibutton> button. Now switch back to your document and choose <guimenu>Edit &gt; Paste</guimenu> from the <application>gedit</application> menu bar.
			</para>
		</blockquote>
		<para>
			The above text includes application names; system-wide menu names and items; application-specific menu names; and buttons and text found within a GUI interface, all presented in Proportional Bold and all distinguishable by context.
		</para>
		<para>
			Note the <guimenu>&gt;</guimenu> shorthand used to indicate traversal through a menu and its sub-menus. This is to avoid the difficult-to-follow 'Select <guimenuitem>Mouse</guimenuitem> from the <guimenu>Preferences</guimenu> sub-menu in the <guimenu>System</guimenu> menu of the main menu bar' approach.
		</para>
		<para>
			<command><replaceable>Mono-spaced Bold Italic</replaceable></command> or <application><replaceable>Proportional Bold Italic</replaceable></application>
		</para>
		<para>
			Whether Mono-spaced Bold or Proportional Bold, the addition of Italics indicates replaceable or variable text. Italics denotes text you do not input literally or displayed text that changes depending on circumstance. For example:
		</para>
		<blockquote>
			<para>
				To connect to a remote machine using ssh, type <command>ssh <replaceable>username</replaceable>@<replaceable>domain.name</replaceable></command> at a shell prompt. If the remote machine is <filename>example.com</filename> and your username on that machine is john, type <command>ssh john@example.com</command>.
			</para>
			<para>
				The <command>mount -o remount <replaceable>file-system</replaceable></command> command remounts the named file system. For example, to remount the <filename>/home</filename> file system, the command is <command>mount -o remount /home</command>.
			</para>
			<para>
				To see the version of a currently installed package, use the <command>rpm -q <replaceable>package</replaceable></command> command. It will return a result as follows: <command><replaceable>package-version-release</replaceable></command>.
			</para>
		</blockquote>
		<para>
			Note the words in bold italics above — username, domain.name, file-system, package, version and release. Each word is a placeholder, either for text you enter when issuing a command or for text displayed by the system.
		</para>
		<para>
			Aside from standard usage for presenting the title of a work, italics denotes the first use of a new and important term. For example:
		</para>
		<blockquote>
			<para>
				When the Apache HTTP Server accepts requests, it dispatches child processes or threads to handle them. This group of child processes or threads is known as a <firstterm>server-pool</firstterm>. Under Apache HTTP Server 2.0, the responsibility for creating and maintaining these server-pools has been abstracted to a group of modules called <firstterm>Multi-Processing Modules</firstterm> (<firstterm>MPMs</firstterm>). Unlike other modules, only one module from the MPM group can be loaded by the Apache HTTP Server.
			</para>
		</blockquote>
	</section>
	
	<section>
		<title>Pull-quote Conventions</title>
		<para>
			Two, commonly multi-line, data types are set off visually from the surrounding text.
		</para>
		<para>
			Output sent to a terminal is set in <computeroutput>Mono-spaced Roman</computeroutput> and presented thus:
		</para>
		
<screen>
books        Desktop   documentation  drafts  mss    photos   stuff  svn
books_tests  Desktop1  downloads      images  notes  scripts  svgs
</screen>
		<para>
			Source-code listings are also set in <computeroutput>Mono-spaced Roman</computeroutput> but are presented and highlighted as follows:
		</para>
		
<programlisting language="JAVA">
package org.jboss.book.jca.ex1;

import javax.naming.InitialContext;

public class ExClient
{
   public static void main(String args[]) 
       throws Exception
   {
      InitialContext iniCtx = new InitialContext();
      Object         ref    = iniCtx.lookup("EchoBean");
      EchoHome       home   = (EchoHome) ref;
      Echo           echo   = home.create();

      System.out.println("Created Echo");

      System.out.println("Echo.echo('Hello') = " + echo.echo("Hello"));
   }
   
}
</programlisting>
	</section>
	
	<section>
		<title>Notes and Warnings</title>
		<para>
			Finally, we use three visual styles to draw attention to information that might otherwise be overlooked.
		</para>
		<warning>
			<title>Warning</title>
			<para>
				A Warning should not be ignored. Ignoring warnings will most likely cause data loss.
			</para>
		</warning>
		<important>
			<title>Important</title>
			<para>
				Important boxes detail things that are easily missed: configuration changes that only apply to the current session, or services that need restarting before an update will apply. Ignoring Important boxes won't cause data loss but may cause irritation and frustration.
			</para>
		</important>
		<note>
			<title>Note</title>
			<para>
				A note is a tip or shortcut or alternative approach to the task at hand. Ignoring a note should have no negative consequences, but you might miss out on a trick that makes your life easier.
			</para>
		</note>
	</section>

</section>
	<section lang="en-US" xml:base="fallback_content/Feedback.xml">
	<title>We Need Feedback!</title>
	<para>
		If you find a typographical error in this manual, or if you have thought of a way to make this manual better, we would love to hear from you! Please submit a report in Bugzilla: <ulink url="http://bugzilla.redhat.com/bugzilla/">http://bugzilla.redhat.com/bugzilla/</ulink> against the product <application>JBoss_Communications_Platform.</application>
	</para>
	<para>
		When submitting a bug report, be sure to mention the manual's identifier: <citetitle>doc-Diameter_User_Guide</citetitle>
	</para>
	<para>
		If you have a suggestion for improving the documentation, try to be as specific as possible when describing it. If you have found an error, please include the section number and some of the surrounding text so we can find it easily.
	</para>
</section>
</preface>
	<chapter lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Introduction</title>
	<para>
		Diameter is a computer networking protocol for AAA (Authentication, Authorization and Accounting) defined in RFC 3588. It is a successor to RADIUS (and its name is a reference to it, a diameter is twice the radius) offering the following advantages:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Reliable transport protocols (TCP or SCTP, not UDP)
			</para>
		</listitem>
		<listitem>
			<para>
				Network or transport level security (IPsec or TLS)
			</para>
		</listitem>
		<listitem>
			<para>
				Transition support for RADIUS, although Diameter is not fully compatible with RADIUS
			</para>
		</listitem>
		<listitem>
			<para>
				Larger address space for attribute-value pairs (AVPs) and identifiers (32 bits instead of 8 bits)
			</para>
		</listitem>
		<listitem>
			<para>
				Client-server protocol, with exception of supporting some server-initiated messages as well
			</para>
		</listitem>
		<listitem>
			<para>
				Both stateful and stateless models can be used
			</para>
		</listitem>
		<listitem>
			<para>
				Dynamic discovery of peers (using DNS SRV and NAPTR)
			</para>
		</listitem>
		<listitem>
			<para>
				Capability negotiation
			</para>
		</listitem>
		<listitem>
			<para>
				Supports application layer acknowledgements, defines failover methods and state machines (RFC 3539)
			</para>
		</listitem>
		<listitem>
			<para>
				Error notification
			</para>
		</listitem>
		<listitem>
			<para>
				Better roaming support
			</para>
		</listitem>
		<listitem>
			<para>
				More easily extended; new commands and attributes can be defined
			</para>
		</listitem>
		<listitem>
			<para>
				Aligned on 32-bit boundaries
			</para>
		</listitem>
		<listitem>
			<para>
				Basic support for user-sessions and accounting
			</para>
		</listitem>
	</itemizedlist>
	<para>
		It was designed in a way to be compatible with RADIUS but also to be easily extended with new use cases within AAA scenario and other IMS scenarios. Extensions are called "Applications".
	</para>
	<para>
		Each application introduces new kind of messages, message and AVP codes (assigned by IANA) and state machines. Moreover each application has its own Application-Id and Vendor-Id which distinguishes its messages from messages of another application. In addition, application code gives means of telling other peers what operations are supported by connecting peer (Capabilities Exchange).
	</para>
	<section>
		<title>Message Format</title>
		<para>
			Each message that is sent and received using Diameter is comprised according to a consistent structure. A Diameter message always contains message headers, and the message payload.
		</para>
		<figure>
			<title>Diameter Message Structure</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/dia-Introduction-dia-DiameterPacketFormat.png" format="PNG" scalefit="1"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>
			Within the message, several headers are present:
		</para>
		<variablelist>
			<title>Message Headers</title>
			<varlistentry>
				<term>Version</term>
				<listitem>
					<para>
						Indicates the Diameter protocol version. This value is always set to <literal>1</literal>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Message Length</term>
				<listitem>
					<para>
						Indicates the Diameter message length, including the header fields.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Command Flags</term>
				<listitem>
					<para>
						Bits, which specify the type of message. The first four bits are occupied with any one of the following values:
					</para>
					<itemizedlist>
						<listitem>
							<para>
								R = Message is a request
							</para>
						</listitem>
						<listitem>
							<para>
								P = Message is proxiable
							</para>
						</listitem>
						<listitem>
							<para>
								E = Message is an error message
							</para>
						</listitem>
						<listitem>
							<para>
								T = Message is potentially retransmitted
							</para>
						</listitem>
					</itemizedlist>
					<para>
						The last four bits are reserved for future use, and should be set to <literal>0</literal>
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Command Code</term>
				<listitem>
					<para>
						Indicates the command associated with the message, such as what type of message it is.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Application ID</term>
				<listitem>
					<para>
						Identifies which application the message is applicable to. The application can be an authentication, accounting, or vendor-specific application.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Hop-by-Hop ID</term>
				<listitem>
					<para>
						Unique ID that is used to match requests and replies. The Answer message must ensure this header field contains the same value present in the corresponding request.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>End-to-End ID</term>
				<listitem>
					<para>
						Time-limited unique ID that is used to to detect duplicate mesages. The ID must be unique for at least four minutes. The Answer message originator must ensure that this header contains the same value present in the corresponding request.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			The message contents (payload) is comprised of Attribute Value Pairs (AVPs), which also have their own header and data.
		</para>
		<figure>
			<title>Payload Structure</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/dia-Introduction-dia-DiameterAVPLayout.png" format="PNG" scalefit="1"/>
				</imageobject>
			</mediaobject>
		</figure>
		<variablelist>
			<title>Payload AVPs</title>
			<varlistentry>
				<term>AVP Code</term>
				<listitem>
					<para>
						Uniquely identifies the attribute, by combining the specified code with the value contained witing the Vendor-ID header field.
					</para>
					<para>
						AVP numbers 1 to 255 are reserved for RADIUS backwards compatibility, and do not require the Vendor-ID header field. AVP numbers 256 and above are used exclusively for the Diameter protocol, and are allocated by <orgname>IANA</orgname>
						.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>AVP Flags</term>
				<listitem>
					<para>
						Flags, which specify how each attribute must be handled. The first three bits are occupied with any one of the following values:
					</para>
					<itemizedlist>
						<listitem>
							<para>
								V = Message is an error message.
							</para>
						</listitem>
						<listitem>
							<para>
								M = Message is proxiable.
							</para>
						</listitem>
						<listitem>
							<para>
								P = Message is a request.
							</para>
						</listitem>
					</itemizedlist>
					<para>
						The last 5 bits are reserved for future use, and should be set to <literal>0</literal>
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>AVP Length</term>
				<listitem>
					<para>
						Indicates the number of octets in the AVP, including the following information:
					</para>
					<itemizedlist>
						<listitem>
							<para>
								AVP Code
							</para>
						</listitem>
						<listitem>
							<para>
								AVP Length
							</para>
						</listitem>
						<listitem>
							<para>
								AVP Flags
							</para>
						</listitem>
						<listitem>
							<para>
								Vendor-ID field (if present)
							</para>
						</listitem>
						<listitem>
							<para>
								AVP Data
							</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Vendor-ID</term>
				<listitem>
					<para>
						Optional field that identifies which application the message is applicable to. The application can be either an authentication, accounting, or vendor-specific application.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>

</chapter>
	<chapter lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Installation</title>
	<para>
		Text
	</para>
	<section>
		<title>Installing Resource Adapters</title>
		<para>
			Two options are available for installing Resource Adapters (RAs) that are compatible with Mobicents Diameter:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					Installing from the binary
				</para>
			</listitem>
			<listitem>
				<para>
					Building from source code.
				</para>
			</listitem>
		</itemizedlist>
		<para>
			For new users, it is recommended that you install the Base RA from the binary. If you are an advanced user, who is comfortable with building from source, you can choose to build the RA from source code.
		</para>
		<formalpara>
			<title>Install From The Binary</title>
			<para>
				The binary package is available from the Mobicents Diameter SourceForge page (<ulink url="http://sourceforge.net/projects/mobicents/files/Mobicents%20Diameter/">http://sourceforge.net/projects/mobicents/files/Mobicents%20Diameter/</ulink>)
			</para>
		</formalpara>
		<para>
			Select the Resource Adapter file that you want to install from the list, and download the archive.
		</para>
		<para>
			Extract the files and deploy the diameter-base-ra-
		</para>
	</section>

</chapter>
	<chapter lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Architecture</title>
	<para>
		The Diameter architecture consists of the following core components:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Stack
			</para>
		</listitem>
		<listitem>
			<para>
				Multiplexer (MUX)
			</para>
		</listitem>
		<listitem>
			<para>
				Message Validator and Dictionary
			</para>
		</listitem>
	</itemizedlist>
	<section>
		<title>Stack</title>
		<para>
			The Diameter Stack is the primary component of the Diameter solution. The Stack governs the mechanisms that control message sending and receiving, peer management, and session management. The stack manages these resources using State Machines.
		</para>
		<section>
			<title>Configuring the Stack</title>
			<para>
				The stack is configured using an XML file that contains the options set during initialization. The top level structure of the file is described below. Further explanation of each child element, and the applicable attributes is provided later in this section.
			</para>
			
<programlisting role="XML">&lt;Configuration xmlns="http://www.jdiameter.org/jdiameter-server"&gt;
  &lt;LocalPeer&gt;&lt;/LocalPeer&gt;
  &lt;Parameters&gt;&lt;/Parameters&gt;
  &lt;Network&gt;&lt;/Network&gt;
  &lt;Extensions&gt;&lt;/Extensions&gt;
&lt;/Configuration&gt;
</programlisting>
			
<programlisting role="XML">&lt;LocalPeer&gt;
   &lt;URI value="aaa://127.0.0.1:1812"/&gt;
   &lt;IPAddresses&gt;
     &lt;IPAddress value="127.0.0.1"/&gt;
   &lt;/IPAddresses&gt;
   &lt;Realm value="mobicents.org"/&gt;
   &lt;VendorID value="193"/&gt;
   &lt;ProductName value="jDiameter"/&gt;
   &lt;FirmwareRevision value="1"/&gt;
   &lt;OverloadMonitor&gt;
     &lt;Entry index="1" lowThreshold="0.5" highThreshold="0.6"&gt;
       &lt;ApplicationID&gt;
         &lt;VendorId value="193"/&gt;
         &lt;AuthApplId value="0"/&gt;
         &lt;AcctApplId value="19302"/&gt;
       &lt;/ApplicationID&gt;
     &lt;/Entry&gt;
   &lt;/OverloadMonitor&gt;
&lt;/LocalPeer&gt;
</programlisting>
			<para>
				The &lt;LocalPeer&gt; element contains parameters that affect the local Diameter peer. The available elements and attributes are listed for reference.
			</para>
			<variablelist>
				<title>&lt;LocalPeer&gt; Elements and Attributes</title>
				<varlistentry>
					<term>&lt;URI&gt;</term>
					<listitem>
						<para>
							Specifies the URI for the local peer.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;IPAddresses&gt;</term>
					<listitem>
						<para>
							Contains one or more child &lt;IPAddress&gt; elements that contain a single, valid IP address for the local peer.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;Realm&gt;</term>
					<listitem>
						<para>
							Specifies the realm of the local peer, using the <literal>value</literal> attribute.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;VendorID&gt;</term>
					<listitem>
						<para>
							Specifies a numeric identifier that corresponds to the vendor ID allocated by IANA.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;ProductName&gt;</term>
					<listitem>
						<para>
							Specifies the name of the local peer product name.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;FirmwareRevision&gt;</term>
					<listitem>
						<para>
							Specifies the version of the firmware.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;OverloadMonitor&gt;</term>
					<listitem>
						<para>
							Optional parent element containing child elements that specify settings relating to the Overload Monitor.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;Entry&gt;</term>
					<listitem>
						<para>
							Specifies three attributes that control the overload element index, overload low threshold and overload high threshold.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;ApplicationID&gt;</term>
					<listitem>
						<para>
							Parent element containing child elements that specify information about the application
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;AuthAppId&gt;</term>
					<listitem>
						<para>
							The Authentication Application ID.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;AcctAplId&gt;</term>
					<listitem>
						<para>
							The Account Application ID
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			
<programlisting role="XML">&lt;Parameters&gt;
   &lt;AcceptUndefinedPeer value="true"/&gt;
   &lt;DuplicateProtection value="true"/&gt;
   &lt;DuplicateTimer value="240000"/&gt;
   &lt;UseUriAsFqdn value="true"/&gt; &lt;!-- Needed for Ericsson SDK Emulator --&gt;
   &lt;QueueSize value="10000"/&gt;
   &lt;MessageTimeOut value="60000"/&gt;
   &lt;StopTimeOut value="10000"/&gt;
   &lt;CeaTimeOut value="10000"/&gt;
   &lt;IacTimeOut value="30000"/&gt;
   &lt;DwaTimeOut value="10000"/&gt;
   &lt;DpaTimeOut value="5000"/&gt;
   &lt;RecTimeOut value="10000"/&gt;
&lt;/Parameters&gt;
</programlisting>
			<para>
				The &lt;Parameters&gt; element contains elements that specify parameters for the Diameter stack. The available elements and attributes are listed for reference.
			</para>
			<!-- TODO: 20090916 - Need to obtain better definitions for the Parameter Elements and Attributes.  information present at the moment is not that helpful to readers. --> <variablelist>
				<title>&lt;Parameter&gt; Elements and Attributes</title>
				<varlistentry>
					<term>&lt;AcceptUndefinedPeer&gt;</term>
					<listitem>
						<para>
							Specifies whether the stack will accept connections from unidentified peers. The defalut value is <literal>false</literal>.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;DuplicateProtection&gt;</term>
					<listitem>
						<para>
							Specifies whether duplicate message protection is enabled. The defalut value is <literal>false</literal>.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;DuplicateTimer&gt;</term>
					<listitem>
						<para>
							Specifies the time each duplicate message is valid for. The default, minimum value is <literal>240000</literal> (4 minutes in milliseconds)
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;UseUriAsFqdn&gt;</term>
					<listitem>
						<para>
							Specifies whether the Ericcson SDK Emulator. The defalut value is <literal>true</literal>.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;QueueSize&gt;</term>
					<listitem>
						<para>
							In milliseconds
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;MessageTimeOut&gt;</term>
					<listitem>
						<para>
							In milliseconds
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;StopTimeOut&gt;</term>
					<listitem>
						<para>
							In milliseconds
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;CeaTimeOut&gt;</term>
					<listitem>
						<para>
							In milliseconds
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;IacTimeOut&gt;</term>
					<listitem>
						<para>
							In milliseconds
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;DwaTimeOut&gt;</term>
					<listitem>
						<para>
							In milliseconds
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;DpaTimeOut&gt;</term>
					<listitem>
						<para>
							In milliseconds
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;RecTimeOut&gt;</term>
					<listitem>
						<para>
							In milliseconds
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			
<programlisting role="XML">&lt;Network&gt;
   &lt;Peers&gt;
   &lt;!-- This peer is a server, if it's a client attempt_connect should be set to false --&gt;
     &lt;Peer name="aaa://127.0.0.1:3868" attempt_connect="true" rating="1"/&gt;
   &lt;/Peers&gt;
   &lt;Realms&gt;
     &lt;Realm name="mobicents.org" peers="127.0.0.1" local_action="LOCAL" dynamic="false" exp_time="1"&gt;
       &lt;ApplicationID&gt;
         &lt;VendorId value="193"/&gt;
         &lt;AuthApplId value="0"/&gt;
         &lt;AcctApplId value="19302"/&gt;
       &lt;/ApplicationID&gt;
     &lt;/Realm&gt;
   &lt;/Realms&gt;
&lt;/Network&gt;
</programlisting>
			<para>
				The &lt;Network&gt; element contains elements that specify parameters for external peers. The available elements and attributes are listed for reference.
			</para>
			<variablelist>
				<title>&lt;Network&gt; Elements and Attributes</title>
				<varlistentry>
					<term>&lt;Peers&gt;</term>
					<listitem>
						<para>
							Parent element containing child elements that specify external peers and the way they connect.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;Peer&gt;</term>
					<listitem>
						<para>
							Specifies the name of the external peer, whether the peer should be treated as a server or client, and what rating the peer has externally.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;Realms&gt;</term>
					<listitem>
						<para>
							Parent element containing child elements that specify all realms that connect into the Diameter network.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;Realm&gt;</term>
					<listitem>
						<para>
							Child element containing attributes and elements that describe the different realms configured for the Core.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<!-- TODO: Need more information about what might go into the extensions element. --> 
<programlisting>&lt;Extensions/&gt;
</programlisting>
		</section>

	</section>

</chapter>
	<chapter lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Resource Adapter Components</title>
	<para>
		Diameter provides the following Resource Adapter (RA) components that are used to connect to the JAIN SLEE Server:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Base
			</para>
		</listitem>
		<listitem>
			<para>
				Mobicents Diameter Sh (Client)
			</para>
		</listitem>
		<listitem>
			<para>
				Mobicents Diameter Sh (Server)
			</para>
		</listitem>
		<listitem>
			<para>
				Mobicents Diameter Ro
			</para>
		</listitem>
		<listitem>
			<para>
				Mobicents Diameter Rf
			</para>
		</listitem>
		<listitem>
			<para>
				Mobicents Diameter CCA
			</para>
		</listitem>
	</itemizedlist>
	<section lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Mobicents Diameter Base</title>
	<para>
		The Base RA provides the Base application layer to SLEE, and base factories to resource adaptors in other applications. Therefore Base is a dependency for any other Diameter resource adaptor.
	</para>
	<para>
		The Base RA is responsible for managing the connection between peers and provides basic authentication, accounting, and session management. Diameter Base can be extended to function with other applications because its factories provide methods for creating raw messages and AVPs. In order for the application to be compliant with the specification, state machines should be implemented at some level within the implementation.
	</para>
	<para>
		Diameter Base provides a number of message commands that can be used within the application.
	</para>
	<table frame="all" pgwide="1">
		<title>Diameter Messages</title>
		<tgroup cols="4" colsep="1">
			<colspec colname="c1"/>
			<colspec colname="c2"/>
			<colspec colname="c3"/>
			<colspec colname="c4"/>
			<thead>
				<row>
					<entry>
						Command Name
					</entry>
					<entry>
						Class
					</entry>
					<entry>
						Abbreviation
					</entry>
					<entry>
						Code
					</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>
						Abort-Session-Request
					</entry>
					<entry>
						Session Management
					</entry>
					<entry>
						ASR
					</entry>
					<entry>
						274
					</entry>
				</row>
				<row>
					<entry>
						Abort-Session-Answer
					</entry>
					<entry>
						Session Management
					</entry>
					<entry>
						ASA
					</entry>
					<entry>
						274
					</entry>
				</row>
				<row>
					<entry>
						Accounting-Request
					</entry>
					<entry>
						Accounting
					</entry>
					<entry>
						ACR
					</entry>
					<entry>
						271
					</entry>
				</row>
				<row>
					<entry>
						Accounting-Answer
					</entry>
					<entry>
						Accounting
					</entry>
					<entry>
						ACA
					</entry>
					<entry>
						271
					</entry>
				</row>
				<row>
					<entry>
						Capabilities-Exchange-Request
					</entry>
					<entry>
						Peer Management
					</entry>
					<entry>
						CER
					</entry>
					<entry>
						257
					</entry>
				</row>
				<row>
					<entry>
						Capabilities-Exchange-Answer
					</entry>
					<entry>
						Peer Management
					</entry>
					<entry>
						CEA
					</entry>
					<entry>
						257
					</entry>
				</row>
				<row>
					<entry>
						Device-Watchdog-Request
					</entry>
					<entry>
						Peer Management
					</entry>
					<entry>
						DWR
					</entry>
					<entry>
						280
					</entry>
				</row>
				<row>
					<entry>
						Device-Watchdog-Answer
					</entry>
					<entry>
						Peer Management
					</entry>
					<entry>
						DWA
					</entry>
					<entry>
						280
					</entry>
				</row>
				<row>
					<entry>
						Disconnect-Peer-Request
					</entry>
					<entry>
						Peer Management
					</entry>
					<entry>
						DPR
					</entry>
					<entry>
						282
					</entry>
				</row>
				<row>
					<entry>
						Disconnect-Peer-Answer
					</entry>
					<entry>
						Peer Management
					</entry>
					<entry>
						DPA
					</entry>
					<entry>
						282
					</entry>
				</row>
				<row>
					<entry>
						Re-Auth-Request
					</entry>
					<entry>
						Authentication
					</entry>
					<entry>
						RAR
					</entry>
					<entry>
						258
					</entry>
				</row>
				<row>
					<entry>
						Re-Auth-Answer
					</entry>
					<entry>
						Authentication
					</entry>
					<entry>
						RAA
					</entry>
					<entry>
						258
					</entry>
				</row>
				<row>
					<entry>
						Session-Termination-Request
					</entry>
					<entry>
						Session Management
					</entry>
					<entry>
						STR
					</entry>
					<entry>
						275
					</entry>
				</row>
				<row>
					<entry>
						Session-Termination-Answer
					</entry>
					<entry>
						Session Management
					</entry>
					<entry>
						STA
					</entry>
					<entry>
						275
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<section>
		<title>Configuration</title>
		<para>
			Base RA entity supports four configuration properties that must be correctly configured before the RA can fucntion correctly. Properties are grouped in pairs, and each property contains a comma separated list of values (of type long).
		</para>
		<para>
			The following property pairs are available for the Base RA:
		</para>
		<para>
			<itemizedlist>
				<listitem>
					<para>
						<literal>authVendorIds</literal> and <literal>authAppIds</literal>
					</para>
				</listitem>
				<listitem>
					<para>
						<literal>acctVendorIds</literal> and <literal>acctAppIds</literal>
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>
			The configuration property pairs can be configured using the following methods:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					Using Java XML Mapping (JXM) operations, available through the Management Console.
				</para>
			</listitem>
			<listitem>
				<para>
					Manually declaring the property pairs in the <filename>resource-adaptor-jar.xml</filename> file within the <filename>base-ra-<replaceable>[version]</replaceable>-DU.jar</filename>, <filename>base-ra-<replaceable>[version]</replaceable>.jar</filename>, or <filename>META-INF</filename> files.
				</para>
			</listitem>
		</itemizedlist>
		<para>
			Regardless of the configuration method used, the length of the property pairs must be equal. For example, <literal>acctVendorIds.split(",").length == acctAppIds.split(",").length</literal>. The application vendor ID and application ID are matched based on index of occurance. For example, <literal>ApplicationId(acctVendorIds[index],acctAppIds[index])</literal>. If no vendor is specified, the value must be set to <literal>0</literal>.
		</para>
		<example>
			<title>Configuring </title>
			<para>
				The following XML sample demonstrates how to configure an authentication application and two accounting applications in the <filename>resource-adaptor-jar.xml</filename>. Note that each configuration property pair contains an equal value pair length.
			</para>
			
<programlisting role="XML">&lt;config-property&gt;
    &lt;config-property-name&gt;authVendorIds&lt;/config-property-name&gt;
    &lt;config-property-type&gt;java.lang.String&lt;/config-property-type&gt;
    &lt;config-property-value&gt;0&lt;/config-property-value&gt;
&lt;/config-property&gt;
&lt;config-property&gt;
    &lt;config-property-name&gt;authAppIds&lt;/config-property-name&gt;
    &lt;config-property-type&gt;java.lang.String&lt;/config-property-type&gt;
    &lt;config-property-value&gt;4&lt;/config-property-value&gt;
&lt;/config-property&gt;
&lt;config-property&gt;
    &lt;config-property-name&gt;acctVendorIds&lt;/config-property-name&gt;
    &lt;config-property-type&gt;java.lang.String&lt;/config-property-type&gt;
    &lt;config-property-value&gt;193,14&lt;/config-property-value&gt;
&lt;/config-property&gt;
&lt;config-property&gt;
    &lt;config-property-name&gt;acctAppIds&lt;/config-property-name&gt;
    &lt;config-property-type&gt;java.lang.String&lt;/config-property-type&gt;
    &lt;config-property-value&gt;19302,15&lt;/config-property-value&gt;
&lt;/config-property&gt;
</programlisting>
		</example>
	</section>
	
	<section>
		<title>Resource Adapter Type</title>
		<para>
			The resource adapter provides the following types:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					Activities
				</para>
			</listitem>
			<listitem>
				<para>
					Provider
				</para>
			</listitem>
			<listitem>
				<para>
					Message Factory
				</para>
			</listitem>
		</itemizedlist>
		<formalpara>
			<title>Activities</title>
			<para>
				The following activities are available, with the API definition listed for reference. The API defines methods to easily create and send answers and requests for a certain activity, in addition to retrieving session-specific data.
			</para>
		</formalpara>
		<para>
			The lifecycle of an activity depends on the type of received request and the application interaction. In the case of a subscription activity, the activity timeout is taken into consideration because the subscription may be time-based.
		</para>
		<variablelist>
			<title>Diameter Base Activities</title>
			<varlistentry>
				<term>AccountingClientSessionActivity</term>
				<listitem>
					<para>
						Client accounting activity, which is created for each ACR request. The activity ends when an answer is received, or the request times out.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		
<programlisting role="JAVA">package net.java.slee.resource.diameter.base;

import java.io.IOException;

import net.java.slee.resource.diameter.base.events.AccountingRequest;

public interface AccountingClientSessionActivity extends
                AccountingSessionActivity {

        /**
         * Send Account Request to Server
         * @param request
         * @throws IOException 
         */
         void   sendAccountRequest(AccountingRequest request) throws IOException;        
}
</programlisting>
		<variablelist>
			<varlistentry>
				<term>AuthClientSessionActivity</term>
				<listitem>
					<para>
						Client authorization activity, which is created for each RAR request. The activity ends when an answer is received, or the request times out.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		
<programlisting role="JAVA">package net.java.slee.resource.diameter.base;

import java.io.IOException;

import net.java.slee.resource.diameter.base.events.AbortSessionAnswer;
import net.java.slee.resource.diameter.base.events.DiameterMessage;
import net.java.slee.resource.diameter.base.events.ReAuthAnswer;
import net.java.slee.resource.diameter.base.events.SessionTerminationRequest;

public interface AuthClientSessionActivity extends AuthSessionActivity{

        /**
         * Send abort session answer to server
         *
         * @param answer
         * @throws IOException
         */
        void sendAbortSessionAnswer(AbortSessionAnswer answer) throws IOException;

        /**
         * Send authentication session request to server FIXME: baranowb; whats
         * this?
         *
         * @param request
         * @throws IOException
         */
        void sendAuthRequest(DiameterMessage request) throws IOException;

        /**
         * Send re-authentication session answer to server
         *
         * @param answer
         * @throws IOException
         */
        void sendReAuthAnswer(ReAuthAnswer answer) throws IOException;

        /**
         * Send session termination request to server
         *
         * @param request
         * @throws IOException
         */
        void sendSessionTerminationRequest(SessionTerminationRequest request) throws IOException;
       
}
</programlisting>
		<variablelist>
			<varlistentry>
				<term>AccountingServerSessionActivity</term>
				<listitem>
					<para>
						Server accounting activity, which is created for eash ACR request. The activity ends when an answer is sent, or the request times out.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		
<programlisting role="JAVA">package net.java.slee.resource.diameter.base;

import java.io.IOException;

import net.java.slee.resource.diameter.base.events.AccountingAnswer;

public interface AccountingServerSessionActivity extends
                AccountingSessionActivity {

        /**
         * Sends generated answer back to client
         * @param answer
         * @throws IOException
         */
        void sendAccountAnswer(AccountingAnswer answer) throws IOException;

        
}
</programlisting>
		<variablelist>
			<varlistentry>
				<term>AuthServerSessionActivity</term>
				<listitem>
					<para>
						Server authorization activity, which is created for each RAR request. The activity ends when an answer is sent, or the request times out.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		
<programlisting role="JAVA">package net.java.slee.resource.diameter.base;

import java.io.IOException;

import net.java.slee.resource.diameter.base.events.AbortSessionRequest;
import net.java.slee.resource.diameter.base.events.DiameterMessage;
import net.java.slee.resource.diameter.base.events.ReAuthRequest;
import net.java.slee.resource.diameter.base.events.SessionTerminationAnswer;

public interface AuthServerSessionActivity extends AuthSessionActivity {

        /**
         * Send session abort session request to client
         * 
         * @param request
         * @throws IOException 
         */
        void sendAbortSessionRequest(AbortSessionRequest request) throws IOException;

        /**
         * Send authenticate answer to client
         * 
         * @param answer
         * @throws IOException 
         */
        void sendAuthAnswer(DiameterMessage answer) throws IOException;

        /**
         * Send re-authenticate request to client
         * 
         * @param request
         * @throws IOException 
         */
        void sendReAuthRequest(ReAuthRequest request) throws IOException;

        /**
         * Send session termination answer to client
         * 
         * @param request
         * @throws IOException 
         */
        void sendSessionTerminationAnswer(SessionTerminationAnswer request) throws IOException;

}
</programlisting>
		<formalpara>
			<title>Provider</title>
			<para>
				Provider defines the basic features that must be supported by all other providers. Service Building Blocks (SBBs) create activities on demand and retrieve AVP and message factories. The connection information is retrieved from the connected peers.
			</para>
		</formalpara>
		<!-- JLM - I was going to include the API directly in the documentation, but the API is over 300 lines which would break the publish, or look really bad.  If you want to include the API, then you may want to break up the program listing into logical chunks.   --> <para>
			The API for the DiameterProvider is more than 100 lines, and therefore can not be included directly for reference. To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/base/ratype/src/main/java/net/java/slee/resource/diameter/base/DiameterProvider.java">DiameterProvider.java in the source code</ulink>.
		</para>
		<formalpara>
			<title>Message Factory</title>
			<para>
				The Message Factory creates events that can be executed within the JAIN SLEE Server. Depending on the situation, Message Factory completes some AVPs for the session using the information made available to it.
			</para>
		</formalpara>
		<para>
			The API for the DiameterMessageFactory is more than 300 lines, and therefore can not be included directly for reference. To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/base/ratype/src/main/java/net/java/slee/resource/diameter/base/DiameterMessageFactory.java">DiameterMessageFactory.java in the source code</ulink>.
		</para>
	</section>
	
	<section>
		<title>API Usage Examples</title>
		<para>
			The following examples demonstrate basic usage examples for the Resource Adapter (RA) API.
		</para>
		<example>
			<title>Send ACR</title>
			<para>
				The following code demonstrates how to configure a Send ACR.
			</para>
			
<programlisting role="JAVA">AccountingClientSessionActivity activity = 
 provider.createAccountingActivity();

List&lt;DiameterAvp&gt; avps = new ArrayList&lt;DiameterAvp&gt;();

avps.add(avpFactory.createAvp(Avp.SESSION_ID,
 activity.getSessionId().getBytes()));

DiameterAvp avpVendorId = avpFactory.createAvp(Avp.VENDOR_ID, 193);

DiameterAvp avpAcctApplicationId = avpFactory.createAvp(Avp.
 ACCT_APPLICATION_ID, 19302);

avps.add(avpFactory.createAvp(Avp.VENDOR_SPECIFIC_APPLICATION_ID, 
 new DiameterAvp[] { avpVendorId, avpAcctApplicationId }));

avps.add(avpFactory.createAvp(Avp.ORIGIN_HOST,
 "aaa://127.0.0.1:1812".getBytes()));

avps.add(avpFactory.createAvp(Avp.ORIGIN_REALM,
 "mobicents.org".getBytes()));

avps.add(avpFactory.createAvp(Avp.DESTINATION_HOST,
 "aaa://127.0.0.1:21812".getBytes()));
            
avps.add(avpFactory.createAvp(Avp.DESTINATION_REALM,
 "mobicents.org".getBytes()));

// Subscription ID
DiameterAvp subscriptionIdType = avpFactory.createAvp(193, 555, 0);
 DiameterAvp subscriptionIdData = avpFactory.createAvp(193, 554, 
 "00001000");
            
avps.add(avpFactory.createAvp(193, 553, new DiameterAvp[] {
 subscriptionIdType, subscriptionIdData }));

// Requested Service Unit
DiameterAvp unitType = avpFactory.createAvp(193, 611, 2);

DiameterAvp valueDigits = avpFactory.createAvp(193, 617, 10L);

DiameterAvp unitValue = avpFactory.createAvp(193, 612, 
 new DiameterAvp[] { valueDigits });
            
avps.add(avpFactory.createAvp(193, 606, new DiameterAvp[] { unitType, unitValue }));

// Record Number and Type
avps.add(avpFactory.createAvp(Avp.ACC_RECORD_NUMBER, 0));

avps.add(avpFactory.createAvp(Avp.ACC_RECORD_TYPE, 1));

// Requested action
avps.add(avpFactory.createAvp(193, 615, 0));

// Service Parameter Type
DiameterAvp serviceParameterType = avpFactory.createAvp(193, 608, 0);

DiameterAvp serviceParameterValue = avpFactory.createAvp(193, 609, "510");

avps.add(avpFactory.createAvp(193, 607, new DiameterAvp[] {
 serviceParameterType, serviceParameterValue }));

// Service Parameter Type
DiameterAvp serviceParameterType2 = avpFactory.createAvp(193, 608, 14);

DiameterAvp serviceParameterValue2 = avpFactory.createAvp(193, 609, "20");

avps.add(avpFactory.createAvp(193, 607, new DiameterAvp[] {
 serviceParameterType2, serviceParameterValue2 }));

DiameterAvp[] avpArray = new DiameterAvp[avps.size()];

avpArray = avps.toArray(avpArray);
   if (logger.isInfoEnabled())
       logger.info("Creating Custom Message...");

   AccountingRequest ms = messageFactory.createAccountingRequest
    (avpArray);
   if (logger.isInfoEnabled()) {
       logger.info("Created Custom Message[" + ms + "]");
       logger.info("Sending Custom Message...");
       }
           
//setters examples
ms.setUserName("sip:xxx@overrideusername.com");
           
activity.sendAccountRequest(ms);
   if (logger.isInfoEnabled())
       logger.info("Sent Custom Message[" + ms + "]");
</programlisting>
		</example>
		<example>
			<title>Receive ACR</title>
			<para>
				The following code demonstrates how to configure a Receive ACR.
			</para>
			
<programlisting role="JAVA">public void onAccountingRequest(net.java.slee.resource.
 diameter.base.events.AccountingRequest acr, 
 ActivityContextInterface aci) {
   long start = System.currentTimeMillis();
    if (logger.isInfoEnabled())
        logger.info("Accounting-Request received. [" + acr + "]");
        if (aci.getActivity() instanceof 
         AccountingServerSessionActivityImpl) {
            AccountingServerSessionActivityImpl assa = 
             (AccountingServerSessionActivityImpl) aci.getActivity();

            AccountingAnswer ans = assa.createAccountAnswer(acr,
             ResultCode.SUCCESS);
               if (logger.isInfoEnabled())
                   logger.info("Sending Accounting-Answer [" + ans + "]");

            assa.sendAccountAnswer(ans);
               if (logger.isInfoEnabled())
        logger.info("Accounting-Answer sent.");
    }
}
</programlisting>
		</example>
	</section>
	
	<section>
		<title>Examples</title>
		<para>
			The sample application provided for Diameter Base is a simple application that interacts with the Ericsson Diameter Software Development Kit (SDK). The application provides both client and server interaction. The following use cases are provided as part of the example:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					Application acting as a client
				</para>
			</listitem>
			<listitem>
				<para>
					Application acting as a server
				</para>
			</listitem>
			<listitem>
				<para>
					Application acting as a relay or proxy.
				</para>
			</listitem>
		</itemizedlist>
		<formalpara>
			<title>Application acting as a client</title>
			<para>
				In this example, the application acts as a Diameter Accounting Client, which issues a Debit or Refund request to the Ericsson Diameter Server (EDS). If the message is correctly built, the server will send an answer back to the application stating that the operation was executed correctly. If the message is incorrectly built, the EDS sends an error message back to the application.
			</para>
		</formalpara>
		<para>
			The message flow for the client application is described in <xref linkend="figure-Client_Application_Message_Flow"/>
		</para>
		<figure id="figure-Client_Application_Message_Flow">
			<title>Client Application Message Flow</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/dia-BaseExamples-dia-AppActingAsClient.jpg" format="JPG" scalefit="1"/>
				</imageobject>
			</mediaobject>
		</figure>
		<formalpara>
			<title>Application acting as a server</title>
			<para>
				In this example, the Ericsson SDK acts as the client and the application Service Building Block (SBB) acts as the server. When the request is received from the client, the SBB checks a pre-loaded set of user data and verifies the user exists, and that there is sufficient credit to complete the debit request.
			</para>
		</formalpara>
		<para>
			If both requirements are met, the SBB sends a response with a 2001 (SUCCESS) Credit-Control-Answer message. If one or all conditions are not met, the appropriate error code is returned:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					No user name match: 5421 (USER_NOT_FOUND)
				</para>
			</listitem>
			<listitem>
				<para>
					Not enough credit to complete the transaction: 4241 (INSUFFICIENT_BALANCE).
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The message flow for the server application is described in <xref linkend="figure-Server_Application_Message_Flow"/>
		</para>
		<figure id="figure-Server_Application_Message_Flow">
			<title>Server Application Message Flow</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/dia-BaseExamples-dia-AppActingAsServer.jpg" format="JPG" scalefit="1"/>
				</imageobject>
			</mediaobject>
		</figure>
		<formalpara>
			<title>Application acting as a relay or proxy</title>
			<para>
				In this example, the application plays the role of a proxy or relay, and handles request and answer message proxying. Both the Ericsson Client and Server SDK are used in this example. The example requires the most configuration of all examples:
			</para>
		</formalpara>
		<itemizedlist>
			<listitem>
				<para>
					Ericsson client SDK is connected as a client to Mobicents Diameter through the Diameter Base RA.
				</para>
			</listitem>
			<listitem>
				<para>
					Ericsson server SDK is connected as a server to Mobicents Diameter through the Diameter SBB.
				</para>
			</listitem>
			<listitem>
				<para>
					Diameter SBB is configured as a proxy.
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The Ericsson Client SDK is used to establish the connection to the Ericsson Server SDK behind the Diameter SBB. In the example, requests received by the SBB are forwarded to the Server SDK, and answers are routed back to the Client SDK.
		</para>
		<section>
			<title>Configuration</title>
			<para>
				To configure the examples, changest must be made to the <filename>example.properties</filename> file in the <filename>/du/main/resources</filename> directory.
			</para>
			<para>
				The following example configuration supports two modes: client, and server. In client mode, the application sends an Accounting Request (ACR). To make the example act as a proxy, settings relating to ACR must be added in order for the application to handle Attribute Value Pairs (AVPs).
			</para>
			<example>
				<title>Setting origin and destination properties</title>
				
<programlisting># Act as "client" or "server" (default: server)
example.mode=server

# The AS IP Address, Port and Realm (default: 127.0.0.1 / 1812 / mobicents.org)
origin.ip=127.0.0.1
origin.port=1812
origin.realm=mobicents.org

# The Remote IP Address, Port and Realm (default: 127.0.0.1 / 21812 / mobicents.org)
destination.ip=127.0.0.1
destination.port=21812
destination.realm=mobicents.org
</programlisting>
			</example>
		</section>

	</section>

</section>
	<section lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Mobicents Diameter Sh (Client)</title>
	<para>
		Text
	</para>
</section>
	<section lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Mobicents Diameter Sh (Server)</title>
	<para>
		Text
	</para>
</section>
	<section lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Mobicents Diameter Ro</title>
	<para>
		Text
	</para>
</section>
	<section lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Mobicents Diameter Rf</title>
	<para>
		Text
	</para>
</section>
	<section lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Mobicents Diameter CCA</title>
	<para>
		Text
	</para>
</section>
</chapter>
	<appendix lang="en-US">
	<title>Revision History</title>
	<simpara>
		<revhistory>
			<revision>
				<revnumber> 0.1</revnumber>
				<date>Thu Sep 11 2009</date>
				<author>
					<firstname>Jared</firstname>
					<surname>Morgan</surname>
					<email>jmorgan@redhat.com</email>
				</author>
				<revdescription>
					<simplelist>
						<member>Created structure of guide and progressively updating content.</member>
					</simplelist>
				</revdescription>
			</revision>
		</revhistory>
	</simpara>
</appendix>
</book>

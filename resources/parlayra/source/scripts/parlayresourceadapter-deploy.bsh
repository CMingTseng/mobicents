/** 
 * A BeanShell script service that deploys Parlay services in Mobicents
 */

import java.io.File;
import javax.management.ObjectName;
import javax.management.MBeanServer;
import javax.slee.management.DeployableUnitID;
import org.jboss.mx.util.MBeanProxyExt;
import org.jboss.system.ServiceMBeanSupport;
import org.jboss.util.StringPropertyReplacer;
import javax.slee.management.DeploymentMBean;
import javax.slee.management.ServiceManagementMBean;
import javax.slee.management.ResourceManagementMBean;
import org.mobicents.slee.container.management.jmx.SleeManagementMBeanImplMBean;
import org.mobicents.slee.container.component.ComponentKey;
import org.mobicents.slee.container.component.ResourceAdaptorIDImpl;
import org.mobicents.slee.container.component.ServiceIDImpl;

private String sleeManagementMBeanName = "slee:service=SleeManagement";

String parlayRATypeURL = "${jboss.server.home.url}/deploy-mobicents/parlay-ra-type.jar";
String parlayRAURL = "${jboss.server.home.url}/deploy-mobicents/parlay-local-ra.jar";
String parlayRAName = "ParlayRA";
ResourceAdaptorIDImpl raID = new ResourceAdaptorIDImpl("parlay", "org.mobicents", "4.2");

DeployableUnitID parlayRATypeDID = null;
DeployableUnitID parlayRADID = null;
DeployableUnitID parlayProxyDID = null;

/**
 * Install and activate components in the correct order
 */
void start()
{

  try {
   
   ctx.log.info("Starting deployment of Parlay services...");

   parlayRATypeDID = sleeDeploymentMBean.install(StringPropertyReplacer.replaceProperties(parlayRATypeURL)); 
   parlayRADID = sleeDeploymentMBean.install(StringPropertyReplacer.replaceProperties(parlayRAURL)); 

   ctx.log.info("Starting deployment of Parlay services...#2");
   ctx.log.info("Starting deployment of Parlay services...ResourceManagementMBean " + resourceManagementMBean);

   java.util.Properties raProperties = new java.util.Properties();
   raProperties.setProperty("org.mobicents.slee.resource.parlay.ipInitialIOR",           "");
   raProperties.setProperty("org.mobicents.slee.resource.parlay.domainID",               "1234");
   raProperties.setProperty("org.mobicents.slee.resource.parlay.authenticationSequence", "TRUSTED");
   raProperties.setProperty("org.mobicents.slee.resource.parlay.ipInitialLocation",      "gwuser/fw/asgFwAppInitial");
   raProperties.setProperty("org.mobicents.slee.resource.parlay.ipInitialURL",           "");
   raProperties.setProperty("org.mobicents.slee.resource.parlay.namingServiceIOR",       "IOR:PUT_NS_IOR_HERE");
   resourceManagementMBean.createResourceAdaptorEntity(raID, parlayRAName, raProperties);

   ctx.log.info("Starting deployment of Parlay services...#3");

   resourceManagementMBean.activateResourceAdaptorEntity(parlayRAName);

   ctx.log.info("Starting deployment of Parlay services...#4");

   resourceManagementMBean.createEntityLink(parlayRAName, parlayRAName);

   ctx.log.info("Finished successfully deployment of Parlay services!");
   
  } catch (Exception e) {
    ctx.log.info("Exception while starting deployment of Parlay services!", e);
  }
}

/**
 * Deactivate and uninstall components in the reverse order of start()
 */
void stop()
{
  try {
   
   ctx.log.info("Stopping Parlay services...");

   //sleeDeploymentMBean.uninstall(parlayProxyDID); 
   ctx.log.info("Stopping Parlay services... #2");

   resourceManagementMBean.removeEntityLink(parlayRAName);
   ctx.log.info("Stopping Parlay services... #3");

   resourceManagementMBean.deactivateResourceAdaptorEntity(parlayRAName);
   ctx.log.info("Stopping Parlay services... #4");

   resourceManagementMBean.removeResourceAdaptorEntity(parlayRAName);
   ctx.log.info("Stopping Parlay services... #5");

   sleeDeploymentMBean.uninstall(parlayRADID); 
   ctx.log.info("Stopping Parlay services... #6");

   sleeDeploymentMBean.uninstall(parlayRATypeDID); 
   ctx.log.info("Stopping Parlay services... #7");

   ctx.log.info("Stopped successfully Parlay services!");

  } catch (Exception e) {
    ctx.log.info("Exception while stopping deployment of Parlay services!", e);
  }
}



/*************************************************************
 * The rest of the script should be rarely modified.
 *************************************************************/


void create()
{
     ctx.log.debug("Creating Parlay services deployer...");
     
     server = global.ctx.getServer();

     ObjectName sleeMgmt = new ObjectName(sleeManagementMBeanName);

     sleeManagementMBean = (SleeManagementMBeanImplMBean)
      	MBeanProxyExt.create(SleeManagementMBeanImplMBean.class,
   	         	sleeMgmt, server);

      sleeDeploymentMBean = (DeploymentMBean)
      	 MBeanProxyExt.create(DeploymentMBean.class,
      	         	sleeManagementMBean.getDeploymentMBean(), server);
      
      resourceManagementMBean  = (ResourceManagementMBean)
         MBeanProxyExt.create(ResourceManagementMBean.class,
                 sleeManagementMBean.getResourceManagementMBean(), server);

     ctx.log.debug("Creating Parlay services deployer...- resourceManagementMBean " + resourceManagementMBean);
      
      serviceManagementMBean = (ServiceManagementMBean)
         MBeanProxyExt.create(ServiceManagementMBean.class,
                 sleeManagementMBean.getServiceManagementMBean(), server);

     ctx.log.info("Created successfully Parlay services deployer!");
}

void destroy()
{
}


   /**
    * Returns the deployed SLEE jars.
    *
    */
   public Iterator getDeployedApplications()
   {
      return deployments.values().iterator();
   }

void setCtx(ServiceMBeanSupport wrapper)
{
   global.ctx = wrapper;
   System.out.println("setCtx: "+ctx);
}


/**
 * script variables
 */

ServiceMBeanSupport ctx = null;

/** reference to the standard SLEE deployment MBean */
private DeploymentMBean sleeDeploymentMBean;

/** reference to the SLEE Resource Adaptor MBean */
private ResourceManagementMBean  resourceManagementMBean;

/** A map of current deployments. */
private ArrayList deployments = new ArrayList();

/** reference to the Mobicents SLEE Management MBean */
private SleeManagementMBeanImplMBean sleeManagementMBean;

private ServiceManagementMBean serviceManagementMBean;

MBeanServer server;
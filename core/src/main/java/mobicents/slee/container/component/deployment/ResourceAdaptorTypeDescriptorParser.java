/*
 * ResourceAdaptorTypeDescriptorParser.java
 * 
 * Created on Dec 15, 2004
 * 
 * Created by: M. Ranganathan
 *
 * The Open SLEE project
 * 
 * A SLEE for the people!
 *
 * The source code contained in this file is in in the public domain.          
 * It can be used in any project or product without prior permission, 	      
 * license or royalty payments. There is  NO WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING, WITHOUT LIMITATION,
 * THE IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, 
 * AND DATA ACCURACY.  We do not warrant or make any representations 
 * regarding the use of the software or the  results thereof, including 
 * but not limited to the correctness, accuracy, reliability or 
 * usefulness of the software.
 */

package org.mobicents.slee.container.component.deployment;

import org.w3c.dom.Element;

import org.mobicents.slee.container.component.ComponentKey;
import org.mobicents.slee.container.management.xml.XMLConstants;
import org.mobicents.slee.container.management.xml.XMLUtils;
import org.mobicents.slee.resource.ActivityContextInterfaceFactoryInterfaceEntry;
import org.mobicents.slee.resource.ActivityTypeEntry;
import org.mobicents.slee.resource.RAClassesEntry;
import org.mobicents.slee.resource.ResourceAdaptorDescriptorImpl;
import org.mobicents.slee.resource.ResourceAdaptorInterfaceEntry;
import org.mobicents.slee.resource.ResourceAdaptorTypeClassEntry;
import org.mobicents.slee.resource.ResourceAdaptorTypeDescriptorImpl;
import org.mobicents.slee.resource.ResourceAdaptorTypeIDImpl;

import java.util.*;

/*
 Parses the following section of the file.
 
 <!--
 The resource-adaptor-type element defines a resource adaptor type component.
 It contains an optional description about the resource adaptor type being
 defined, the name, vendor, and version of the resource adaptor type, mandatory
 information about the resource adaptor type's classes and interfaces, and zero
 or more references to the event types that can beproduced by resource adaptors
 of this resource adaptor type.

 Used in: resource-adaptor-type-jar
 -->
 <!ELEMENT resource-adaptor-type (description?, resource-adaptor-type-name,
 resource-adaptor-type-vendor, resource-adaptor-type-version,
 resource-adaptor-type-classes, event-type-ref*)>

 <!--
 The description element may contain any descriptive text about the parent
 element.

 Used in: resource-adaptor-type-jar, resource-adaptor-type,
 resource-adaptor-type-classes, activity-type,
 activity-context-interface-factory-interface,
 resource-adaptor-interface
 -->
 <!ELEMENT description (#PCDATA)>

 <!--
 The resource-adaptor-type-name element contains the name of the resource
 adaptor type component.

 Used in: resource-adaptor-type

 Example:
 <resource-adaptor-type-name>JCC</resource-adaptor-type-name>
 -->
 <!ELEMENT resource-adaptor-type-name (#PCDATA)>

 <!--
 The resource-adaptor-type-vendor element contains the vendor of the resource
 adaptor type component.

 Used in: resource-adaptor-type

 Example:
 <resource-adaptor-type-vendor>
 javax.csapi.cc.jcc
 </resource-adaptor-type-vendor>
 -->
 <!ELEMENT resource-adaptor-type-vendor (#PCDATA)>

 <!--
 The resource-adaptor-type-version element contains the version of the resource
 adaptor type component.  The version number typically should have the general
 form "major-version.minor-version".

 Used in: resource-adaptor-type

 Example:
 <resource-adaptor-type-version>1.1</resource-adaptor-type-version>
 -->
 <!ELEMENT resource-adaptor-type-version (#PCDATA)>

 <!--
 The resource-adaptor-type-classes element contains an optional description
 about the classes and/or interfaces defined, zero or more activity object type
 declarations, an optional activity context interface factory declaration, and
 an optional resource adaptor interface declaration.

 Used in: resource-adaptor-type
 -->
 <!ELEMENT resource-adaptor-type-classes (description?, activity-type*, 
 activity-context-interface-factory-interface?, 
 resource-adaptor-interface?)>

 <!--
 The activity-type element defines the type of an activity object that may be
 generated by the resource adaptor type.  It contains an optional description
 about the activity type and a mandatory activity type name declaration.

 Used in: resource-adaptor-type-classes
 -->
 <!ELEMENT activity-type (description?, activity-type-name)>

 <!--
 The activity-type-name element contains the fully-qualified name of the class
 or interface implemented by the activity object.

 Used in: activity-type

 Example:
 <activity-type-name>javax.csapi.cc.jcc.JccCall</activity-type-name>
 -->
 <!ELEMENT activity-type-name (#PCDATA)>

 <!--
 The activity-context-interface-factory-interface element defines an activity
 context interface for a resource adaptor type.  It contains an optional
 description about the activity context interface and a mandatory interface
 name declaration.

 Used in: resource-adaptor-type-classes
 -->
 <!ELEMENT activity-context-interface-factory-interface (description?,
 activity-context-interface-factory-interface-name)>

 <!-- 
 The activity-context-interface-factory-interface-name element contains the
 fully-qualified name of the activity context interface factory for the
 resource adaptor type.

 Used in: activity-context-interface-factory-interface

 Example:
 <activity-context-interface-factory-interface-name>
 com.mycompany.jcc.JccActivityContextInterfaceFactory
 </activity-context-interface-factory-interface-name>
 -->
 <!ELEMENT activity-context-interface-factory-interface-name (#PCDATA)>

 <!--
 The resource-adaptor-interface element defines a resource adaptor interface
 for a resource adaptor type.  The resource adaptor interface is the interface
 used by an sbb to interact with resource adaptors of this resource adaptor
 type.  The element contains an optional description about the interface and a
 mandatory interface name declaration.

 Used in: resource-adaptor-type-classes
 -->
 <!ELEMENT resource-adaptor-interface (description?, 
 resource-adaptor-interface-name)>

 <!--
 The resource-adaptor-interface-name element contains the fully-qualified name
 of the resource adaptor interface for the resource adaptor type.

 Used in: resource-adaptor-interface

 Example:
 <resource-adaptor-interface>
 com.mycomponent.jcc.JccProvider
 </resource-adaptor-interface>
 -->
 <!ELEMENT resource-adaptor-interface-name (#PCDATA)>

 <!--
 The event-type-ref element identifies an event type that may be generated by
 resource adaptors of the resource adaptor type.  It contains the name, vendor,
 and version of the event type.

 Used in: resource-adaptor-type
 -->
 <!ELEMENT event-type-ref (event-type-name, event-type-vendor, 
 event-type-version)>

 <!--
 The event-type-name element contains the name of an event type generated by
 the resource adaptor type.

 Used in: event-type-ref

 Example:
 <event-type-name>
 javax.csapi.cc.jcc.JccCallEvent.CALL_CREATED
 </event-type-name>
 -->
 <!ELEMENT event-type-name (#PCDATA)>

 <!--
 The event-type-vendor element contains the vendor of an event type generated
 by the resource adaptor type.

 Used in: event-type-ref

 Example:
 <event-type-vendor>javax.csapi.cc.jcc</event-type-vendor>
 -->
 <!ELEMENT event-type-vendor (#PCDATA)>

 <!--
 The event-type-version element contains the version of an event type generated
 by the resource adaptor type.

 Used in: event-type-ref

 Example:
 <event-type-version>1.1</event-type-version>
 -->
 <!ELEMENT event-type-version (#PCDATA)>


 <!-- 
 The ID mechanism is to allow tools that produce additional deployment
 information (ie. information beyond that contained by the standard SLEE
 deployment descriptors) to store the non-standard information in a separate
 file, and easily refer from those tools-specific files to the information in
 the standard deployment descriptor.  The SLEE architecture does not allow the
 tools to add the non-standard information into the SLEE-defined deployment
 descriptors. 
 -->
 <!ATTLIST resource-adaptor-type-jar id ID #IMPLIED>
 <!ATTLIST resource-adaptor-type id ID #IMPLIED>
 <!ATTLIST description id ID #IMPLIED>
 <!ATTLIST resource-adaptor-type-name id ID #IMPLIED>
 <!ATTLIST resource-adaptor-type-vendor id ID #IMPLIED>
 <!ATTLIST resource-adaptor-type-version id ID #IMPLIED>
 <!ATTLIST resource-adaptor-type-classes id ID #IMPLIED>
 <!ATTLIST activity-type id ID #IMPLIED>
 <!ATTLIST activity-type-name id ID #IMPLIED>
 <!ATTLIST activity-context-interface-factory-interface id ID #IMPLIED>
 <!ATTLIST activity-context-interface-factory-interface-name id ID #IMPLIED>
 <!ATTLIST resource-adaptor-interface id ID #IMPLIED>
 <!ATTLIST resource-adaptor-interface-name id ID #IMPLIED>
 <!ATTLIST event-type-ref id ID #IMPLIED>
 <!ATTLIST event-type-name id ID #IMPLIED>
 <!ATTLIST event-type-vendor id ID #IMPLIED>
 <!ATTLIST event-type-version id ID #IMPLIED>


 *
 */
/**
 * Parser for the Resource Adaptor deployment Descriptor
 * 
 * @author M. Ranganathan
 *  
 */
public class ResourceAdaptorTypeDescriptorParser extends
        AbstractDeploymentDescriptorParser {

    public ResourceAdaptorTypeDescriptorImpl parseResourceAdaptorTypeDescriptor(
            Element node, ResourceAdaptorTypeDescriptorImpl raTypeDescriptor)
            throws Exception {

        String description = XMLUtils.getElementTextValue(node,
                XMLConstants.RESOURCE_ADAPTOR_TYPE_DESCRIPTION);
        String ratypename = XMLUtils.getElementTextValue(node,
                XMLConstants.RESOURCE_ADAPTOR_TYPE_NAME);
        String ratypevendor = XMLUtils.getElementTextValue(node,
                XMLConstants.RESOURCE_ADAPTOR_TYPE_VENDOR);
        String ratypeversion = XMLUtils.getElementTextValue(node,
                XMLConstants.RESOURCE_ADAPTOR_TYPE_VERSION);
        ResourceAdaptorTypeIDImpl raTypeID = new ResourceAdaptorTypeIDImpl(
                new ComponentKey(ratypename, ratypevendor, ratypeversion));
        raTypeDescriptor.setResourceAdaptorTypeID(raTypeID);

        Element ratClassesNode = XMLUtils.getChildElement(node,
                XMLConstants.RESOURCE_ADAPTOR_TYPE_CLASSES);
        String ratClassesNodeDesc = XMLUtils.getElementTextValue(ratClassesNode,
                XMLConstants.DESCRIPTION_ND);

        //Actitity Types
        ArrayList actList = new ArrayList();

        for (Iterator it1 = XMLUtils.getAllChildElements(ratClassesNode,
                    XMLConstants.RESOURCE_ADAPTOR_TYPE_ACTIVITY_TYPE).iterator();
                it1.hasNext();) {
            Element ratACT = (Element) it1.next();
            String ratACTDesc = XMLUtils.getElementTextValue(ratACT,
                    XMLConstants.DESCRIPTION_ND);
            String ratACTName = XMLUtils.getElementTextValue(ratACT,
                    XMLConstants.RESOURCE_ADAPTOR_TYPE_ACTIVITY_TYPE_NAME);
            ActivityTypeEntry actEntry = new ActivityTypeEntry();
            actEntry.setDescription(ratACTDesc);
            actEntry.setActivityTypeName(ratACTName);
            actList.add(actEntry);
        }

        ActivityTypeEntry[] actTypeEntries = new ActivityTypeEntry[actList.size()];
        actList.toArray(actTypeEntries);

        // resource-adaptor-type-activity-context-interface 
        Element ratACI = XMLUtils.getChildElement(ratClassesNode,
                XMLConstants.ACTIVITY_CONTEXT_INTERFACE_FACTORY_INTERFACE);
        String ratACIDesc = null;
        String ratACIName = null;
        if (ratACI != null) // optional ACI subelements
        {
        ratACIDesc = XMLUtils.getElementTextValue(ratACI,
                XMLConstants.DESCRIPTION_ND);
        ratACIName = XMLUtils.getElementTextValue(ratACI,
                XMLConstants.ACTIVITY_CONTEXT_INTERFACE_FACTORY_INTERFACE_NAME);
        }
        ActivityContextInterfaceFactoryInterfaceEntry aciEntry = new ActivityContextInterfaceFactoryInterfaceEntry();
        aciEntry.setDescription(ratACIDesc);
        aciEntry.setInterfaceName(ratACIName);

        // resource adaptor interface 
        Element raInf = XMLUtils.getChildElement(ratClassesNode,
                XMLConstants.RESOURCE_ADAPTOR_INTERFACE);
        String raInfDesc = null;
        String raInfName = null;
        if (raInf != null) // optional ra interface subelements
        {
        raInfDesc = XMLUtils.getElementTextValue(raInf,
                XMLConstants.DESCRIPTION_ND);
        raInfName = XMLUtils.getElementTextValue(raInf,
                XMLConstants.RESOURCE_ADAPTOR_INTERFACE_NAME);
        }
        ResourceAdaptorInterfaceEntry raInfEntry = new ResourceAdaptorInterfaceEntry();
        raInfEntry.setDescription(raInfDesc);
        raInfEntry.setName(raInfName);

        // class entry
        ResourceAdaptorTypeClassEntry raClassEntry = new ResourceAdaptorTypeClassEntry();
        raClassEntry.setDescription(ratClassesNodeDesc);
        raClassEntry.setActivityTypeEntries(actTypeEntries);
        raClassEntry.setAcifInterfaceEntry(aciEntry);
        raClassEntry.setRaInterfaceFactoryEntry(raInfEntry);

        raTypeDescriptor.setRaTypeClassEntry(raClassEntry);

        ArrayList alist = new ArrayList();

        for (Iterator eventTypeRefs = XMLUtils.getAllChildElements(node,
                XMLConstants.EVENT_TYPE_REF_ND).iterator(); eventTypeRefs
                .hasNext();) {
            Element eventTypeRef = (Element) eventTypeRefs.next();
            String evtypename = XMLUtils.getElementTextValue(eventTypeRef,
                    XMLConstants.EVENT_TYPE_NAME_ND);
            String evtypevendor = XMLUtils.getElementTextValue(eventTypeRef,
                    XMLConstants.EVENT_TYPE_VENDOR_ND);
            String evtypeversion = XMLUtils.getElementTextValue(eventTypeRef,
                    XMLConstants.EVENT_TYPE_VERSION_ND);
            ComponentKey eventTypeRefEntry = new ComponentKey(evtypename,
                    evtypevendor, evtypeversion);
            alist.add(eventTypeRefEntry);
        }
        ComponentKey eventTypeRefs[] = new ComponentKey[alist.size()];
        alist.toArray(eventTypeRefs);
        raTypeDescriptor.setEventTypeRefEntries(eventTypeRefs);

        return raTypeDescriptor;
    }
}


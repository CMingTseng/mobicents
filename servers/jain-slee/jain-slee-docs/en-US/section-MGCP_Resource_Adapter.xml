<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd" []>
<section id="mgcpra-MGCP_Resource_Adapter">
  <title>MGCP Resource Adapter</title>
  <para>This section provides information about the Media Gateway Control Protocol (MGCP)  Resource Adapter.  </para>
  <note>
    <para>Before reading this information, you should be familiar with the requirements of the <ulink url="http://tools.ietf.org/html/rfc3435">MGCP protocol</ulink> and the  <ulink url="http://tools.ietf.org/html/rfc3660">basic MGCP packages</ulink>.</para>
  </note>
  <section>
    <title>Activities</title>
<!--In this section, provide the reader with information about any Activity objects, and any extensions available to the Activity objects.  Because of the long naming standards for many java classes, it is better to list these on a single line.  I did consider a table, but I think the interface names would wrap, and look awkward.  I think the best option here might be to use a <variablelist> for each primary activity object.  Then use a <formalpara>, with the <title> being the name of each major extension.  An example is provided for reference.-->    <para>An activity object represents a set of related events in a RA resource.  This RA Type defines the following Activity objects:</para>
<!--This example is taken from the MGCP RA.  Delete the content that is not relevant to your adapter.-->    <variablelist>
      <title>MGCP Activity Objects</title>
      <varlistentry>
        <term>
          <classname role="XML">net.java.slee.resource.mgcp.MgcpConnectionActivity</classname>
        </term>
        <listitem>
          <para>Controls the management of a  connection including  creation, modification, destruction and state audit.  This activity ends implicitly when a DeleteConnection (MGCP server role) or DeleteConnectionResponse (MGCP Call Agent role) event is received. </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <classname role="JAVA">net.java.slee.resource.mgcp.MgcpEndpointActivity</classname>
        </term>
        <listitem>
          <para>Controls the management of an  endpoint including event detection and signal generation, and configuration and state audit.  Because a MGCP endpoint does not have a lifecycle, this activity does not end implicitly on MGCP events.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Interface</title>
    <para>The interface consists of the following methods:</para>
    <variablelist>
      <title>Interface Methods</title>
      <varlistentry>
        <term>
          <classname role="JAVA">public void addJainMgcpListener(JainMgcpListener jainMgcpListener) throws java.util.TooManyListenersException</classname>
        </term>
        <listitem>
          <para>Adds a JAIN MGCP Listener to the list of Event Listeners registered on an implementation of the <interfacename>JainMgcpProvider</interfacename> interface.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <classname role="JAVA">public JainMgcpStack getJainMgcpStack()</classname>
        </term>
        <listitem>
          <para>Returns an object reference to the underlying JAIN MGCP Stack to which this JAIN MGCP Provider is bound.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <classname role="JAVA">public void removeJainMgcpListener(JainMgcpListener jainMgcpListener)</classname>
        </term>
        <listitem>
          <para>Removes a JAIN MGCP Listener from the list of Event Listeners registered on an implementation of the <interfacename>JainMgcpProvider</interfacename> interface. If the object reference to the JainMgcpListener does not correspond to a registered Listener, this method simply returns.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <classname role="JAVA">public void sendMgcpEvents(JainMgcpEvent[] jainMgcpEvents) throws java.lang.IllegalArgumentException</classname>
        </term>
        <listitem>
          <para>Sends a list of MGCP commands and responses into the MGCP stack. The use of a list is intended to facilitate &quot;piggybacking&quot; of messages, all of whose destinations are the same. Specific vendor implementations may impose restrictions on the number of command and response messages, the sequencing of those messages, and other such limitations on the usage of this method.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <formalpara>
      <title>Extensions</title>
      <para>Extensions are the methods used to create and/or retrieve [RA Name] RA Activity Objects.  Extensions also provide useful methods that generate valid and unique [RA Name] event identifiers  while honoring  the RA entity domain. </para>
    </formalpara>
    <variablelist>
      <title>Interface Extensions</title>
      <varlistentry>
        <term>
          <classname>public MgcpConnectionActivity getConnectionActivity(ConnectionIdentifier connectionIdentifier,EndpointIdentifier endpointIdentifier)</classname>
        </term>
        <listitem>
          <para>Retrieves a connection activity for the specified ConnectionIdentifier. The activity is created if does not exists. </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <classname>public MgcpConnectionActivity getConnectionActivity(int transactionHandle,EndpointIdentifier endpointIdentifier)</classname>
        </term>
        <listitem>
          <para>Retrieves a connection activity for an unknown ConnectionIdentifier,  used when sending <classname>CreateConnection</classname> events and receive further related messages from a Mgcp Server. The activity is created if does not exists. The transactionHandle will be used by the Resource Adaptor to learn the returned ConnectionIdentifier and deliver the response in this activity.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <classname>public MgcpEndpointActivity getEndpointActivity(EndpointIdentifier endpointIdentifier)</classname>
        </term>
        <listitem>
          <para>Retrieves an endpoint activity for the specified EndpointIdentifier. The activity is created if does not exists.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <classname>public int getUniqueTransactionHandler()</classname>
        </term>
        <listitem>
          <para>Retrieves an unique transaction handler to be used on mgcp messages.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <classname>public CallIdentifier getUniqueCallIdentifier()</classname>
        </term>
        <listitem>
          <para>Retrieves an unique valid CallIdentifier to be used on mgcp commands.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <classname>public RequestIdentifier getUniqueRequestIdentifier()</classname>
        </term>
        <listitem>
          <para>Retrieves an unique valid RequestIdentifier to be used on NotificationRequest commands.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Events</title>
    <para>Events defined for this RA originate from the net.java.slee.resource.mgcp 1.0 package.</para>
    <para>The events use two different activity objects:</para>
    <itemizedlist>
      <listitem>
        <para><classname>net.java.slee.resource.mgcp.MgcpConnectionActivity</classname></para>
      </listitem>
      <listitem>
        <para><classname>net.java.slee.resource.mgcp.MgcpEndpointActivity</classname></para>
      </listitem>
    </itemizedlist>
    <table frame="all" pgwide="1">
      <title>MgcpConnectionActivity Events </title>
      <tgroup cols="2" colsep="1">
        <colspec colnum="1"/>
        <colspec colnum="2"/>
        <thead>
          <row>
            <entry>Event Name</entry>
            <entry>Class Name</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <classname>CREATE_CONNECTION</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.CreateConnection</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>CREATE_CONNECTION_RESPONSE</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.CreateConnectionResponse</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>MODIFY_CONNECTION</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.ModifyConnection</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>MODIFY_CONNECTION_RESPONSE</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.ModifyConnectionResponse</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>DELETE_CONNECTION</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.DeleteConnection</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>DELETE_CONNECTION_RESPONSE</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.DeleteConnectionResponse</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>AUDIT_CONNECTION</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.AuditConnection</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>AUDIT_CONNECTION_RESPONSE</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.AuditConnectionResponse</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>TRANSACTION_TIMEOUT</classname>
            </entry>
            <entry>
              <classname>net.java.slee.resource.mgcp.message.TransactionTimeout</classname>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table frame="all" pgwide="1">
      <title>MgcpEndpointActivity Events </title>
      <tgroup cols="2" colsep="1">
        <colspec colnum="1"/>
        <colspec colnum="2"/>
        <thead>
          <row>
            <entry>Event Name</entry>
            <entry>Class Name</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <classname>AUDIT_ENDPOINT</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.AuditEndpoint</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>AUDIT_ENDPOINT_RESPONSE</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.AuditEndpointResponse</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>ENDPOINT_CONFIGURATION</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.ModifyConnection</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>ENDPOINT_CONFIGURATION_RESPONSE</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.ModifyConnectionResponse</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>NOTIFICATION_REQUEST</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.DeleteConnection</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>NOTIFICATION_REQUEST_RESPONSE</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.DeleteConnectionResponse</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>NOTIFY</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.AuditConnection</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>NOTIFY_RESPONSE</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.AuditConnectionResponse</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>RESTART_IN_PROGRESS</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.AuditConnectionResponse</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>RESTART_IN_PROGRESS_RESPONSE</classname>
            </entry>
            <entry>
              <classname>jain.protocol.ip.mgcp.message.AuditConnectionResponse</classname>
            </entry>
          </row>
          <row>
            <entry>
              <classname>TRANSACTION_TIMEOUT</classname>
            </entry>
            <entry>
              <classname>net.java.slee.resource.mgcp.message.TransactionTimeout</classname>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section>
    <title>Examples</title>
    <para>The following examples provide a starting point for creating connections, and handling responses with the MGCP RA.</para>
    <example>
      <title>Create a Connection to a New Conference</title>
      <programlisting role="JAVA">// create call identifier to be used on this connection
CallIdentifier callIdentifier = mgcpProvider.getUniqueCallIdentifier();

// save call identifier in cmp
setCallIdentifier(callIdentifier);

// create command to create new connection in a conference,
// first user so asks a free endpoint using $
CreateConnection createConnection = new CreateConnection(this,
      callIdentifier, new EndpointIdentifier(&quot;$&quot;, mgcpServerDomain),
        ConnectionMode.Confrnce);

// set remote sdp if it was provided
if (remoteSdp != null) {
    try {
        createConnection
         .setRemoteConnectionDescriptor(new ConnectionDescriptor(
         remoteSdp));
        } catch (ConflictingParameterException ex) {
                logger.error(e);
                return;
        }
    }

// set transaction handler
int transactionHandler = mgcpProvider.getUniqueTransactionHandler();
createConnection.setTransactionHandle(transactionHandler);

// create activity using transactionHandler - we don&apos;t know yet
// the ConnectionIdentifier - and attach to it&apos;s aci
MgcpConnectionActivity activity = mgcpProvider
  .getConnectionActivity(transactionHandler);
        SbbLocalObject sbbLocalObject = this.sbbContext.getSbbLocalObject();
     try {
         ActivityContextInterface activityAci = mgcpAcif
          .getActivityContextInterface(activity);
         activityAci.attach(sbbLocalObject);
         } catch (Exception e) {
             logger.error(e);

// release activity, it will not be used
            activity.release();
            return;
         }

// send command
        JainMgcpEvent[] events = { createConnection };
        mgcpProvider.sendMgcpEvents(events);</programlisting>
    </example>
    <example>
      <title>Create a Connection to Two Endpoints</title>
      <programlisting role="JAVA">// create call identifier to be used on this connection
CallIdentifier callIdentifier = mgcpProvider.getUniqueCallIdentifier(); 

// create command to create new connection        
CreateConnection createConnection = new CreateConnection(this,
      callIdentifier,
      new EndpointIdentifier(&quot;endpoint1&quot;, mgcpServerHost),
      ConnectionMode.SendRecv);          

// set second endpoint
try {createConnection.setSecondEndpointIdentifier(new
  EndpointIdentifier(&quot;endpoint2&quot;, mgcpServerHost));
    } catch (ConflictingParameterException e) {
        logger.error(e);
        return;
    }

// set transaction handler
int transactionHandler = mgcpProvider.getUniqueTransactionHandler();
createConnection.setTransactionHandle(transactionHandler);

// create activity and attach to it&apos;s aci
MgcpConnectionActivity activity = MgcpProvider.
  getConnectionActivity(transactionHandler);
SbbLocalObject sbbLocalObject = this.sbbContext.getSbbLocalObject();
try {
      ActivityContextInterface activityAci = 
        mgcpAcif.getActivityContextInterface(activity);
      activityAci.attach(sbbLocalObject);
     } catch (Exception e) {                
         logger.error(e);

// release activity, it will not be used
         activity.release();
         return;
     }

// send command
JainMgcpEvent[] events = {createConnection};
mgcpProvider.sendMgcpEvents(events);</programlisting>
    </example>
    <example>
      <title>Handle the Response and Deletion of a Connection</title>
      <programlisting role="JAVA">public void onCreateConnectionResponse(CreateConnectionResponse event, ActivityContextInterface aci) {
       
  if (logger.isInfoEnabled()) {
      logger.info(&quot;onCreateConnectionResponse(event=&quot; + event + &quot;)&quot;);
  }
            
  if(event.getReturnCode().equals(ReturnCode.Transaction_
     Executed_Normally)) {
       
// create and attach to endpoint aci to learn about notification events 
// such as dtmf or announcement playing
     MgcpEndpointActivity activity =  mgcpProvider.
       getEndpointActivity(event.getSpecificEndpointIdentifier());
     SbbLocalObject sbbLocalObject = this.sbbContext.getSbbLocalObject();
         try {ActivityContextInterface activityAci = 
              mgcpAcif.getActivityContextInterface(activity);
              activityAci.attach(sbbLocalObject);
             } catch (Exception e) {
              logger.error(&quot;failed to attach to endpoint activity&quot;,e);
// release activity
              if (activity != null) {
                  activity.release();
             }   
// create command to delete connection
             DeleteConnection deleteConnection = 
               new DeleteConnection(this,getCallIdentifier(),event.
                 getSpecificEndpointIdentifier(), 
                 event.getConnectionIdentifier());
// set transaction handler
             int transactionHandler = mgcpProvider.
               getUniqueTransactionHandler();
             deleteConnection.setTransactionHandle(transactionHandler);
// send command
                JainMgcpEvent[] events = {deleteConnection};
                mgcpProvider.sendMgcpEvents(events);
                return;
             }
           
// store the connection and endpoint identifier in a cmp
        setConnectionIdentifier(event.getConnectionIdentifier());
        setEndpointIdentifier(event.getSpecificEndpointIdentifier());
           
// store server local sdp data
        String localSdp = event.getLocalConnectionDescriptor().toString();
        setLocalSdpDataCMP(localSdp);
           
// TODO send 200 ok with sdp back to sip ua
           
     }
else {
     logger.error(&quot;create connection didn&apos;t succeed&quot;);
     }
}</programlisting>
    </example>
    <example>
      <title>Play an Announcement in an Endpoint</title>
      <programlisting role="JAVA">public void play(String url, EndpointIdentifier endpointIdentifier, ConnectionIdentifier connectionIdentifier) {

   if (logger.isInfoEnabled()) {
       logger.info(&quot;play(url=&quot; + url + &quot;)&quot;);
   }

// consider we are already attached to the endpoint activity   
// create notification request event

   NotificationRequest notificationRequest = new NotificationRequest(new 
    Object(),endpointIdentifier,mgcpProvider.
    getUniqueRequestIdentifier());

// to ask a announcement we add an announcement (ann) event to signal 
// requests, we can use a connection identifier to play in just one 
// connection of the endpoint

   EventName[] signalRequests = {new EventName(PackageName.Announcement,
    MgcpEvent.ann.withParm(url),connectionIdentifier)};
   notificationRequest.setSignalRequests(signalRequests);
       
// to learn when the announcement played or not we add events of and oc, 
// which mean operation failure and operation complete, both with an 
// action to be notified immediately

   RequestedAction[] actions = new RequestedAction[] 
      {RequestedAction.NotifyImmediately}; RequestedEvent[] 
       requestedEvents = {
                new RequestedEvent(new EventName(PackageName.Announcement,
                 MgcpEvent.oc,connectionIdentifier),actions),
                new RequestedEvent(new EventName(PackageName.Announcement,
                 MgcpEvent.of,connectionIdentifier),actions)
                         };
   notificationRequest.setRequestedEvents(requestedEvents);
       
// set tx handle and send event
        notificationRequest.setTransactionHandle(mgcpProvider.
         getUniqueTransactionHandler());
        JainMgcpEvent[] events = {notificationRequest};
        mgcpProvider.sendMgcpEvents(events);
}</programlisting>
    </example>
    <example>
      <title>Stop Announcement</title>
      <programlisting role="JAVA"/>
    </example>
    <example>
      <title>Request a DTMF Using a Digitmap Regular Expression While an Announcement is Played</title>
      <programlisting role="JAVA"/>
    </example>
    <example>
      <title>Handle DTMF Notification</title>
      <para><warning>
          <title>Object Source Parameter Requirement</title>
          <para>When replying to a  MGCP Command event,  it is critical that the Response constructor&apos;s Object source parameter is specified as the command event&apos;s getSource() Object.  An IllegalArgumentException is thrown when sending the response event if this condition is not met. </para>
          <para>Because the JAIN MGCP API can not correlate the command and response in multiple gateway/Call Agent scenarios,  the constructor&apos;s object source parameter must be explicitly stated. </para>
        </warning></para>
      <programlisting role="JAVA"/>
    </example>
  </section>
</section>

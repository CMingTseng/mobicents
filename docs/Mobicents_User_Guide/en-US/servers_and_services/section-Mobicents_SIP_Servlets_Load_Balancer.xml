<?xml version='1.0'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<section
	id="section-Mobicents_SIP_Servlets_Load_Balancer">
	<title>Mobicents SIP Servlets Load Balancer</title>
	<para>The Mobicents SIP load balancer is used to balance the load of SIP-related services in order to achieve performance scalability and high-availability of SIP services. It is a very simple proxy that is useful in SIP-based <acronym>VoIP</acronym> installations where there are multiple ingress proxy servers. The Mobicents SIP load balancer permits the pooling of these servers, thereby eliminating the need to balance user demands for connectivity through a complicated provisioning algorithm.</para>
	<para>All users can send their <literal>INVITE</literal>s and <literal>REGISTER</literal>s to the same SIP URI, and the Load Balancer will assign ingress proxy servers dynamically to each transaction. In this way, the traffic load is balanced over a pool of proxy servers based on the real-time demand for services.</para>
	<para>The Mobicents SIP load balancer distributes requests across the healthy and available instances in the cluster to increase the throughput of the overall system. It can also fail-over mid-call requests from unhealthy and/or inaccessible instances to healthy and available instances.</para>
	<para>The Mobicents SIP load balancer implementation, its installation, configuration and an 	 example application, are detailed below. More information on the SIP load balancer can be found here: <ulink
			url="http://groups.google.com/group/mobicents-public/web/mobicents-sip-balancer">Mobicents SIP High-Availability and Clustering</ulink>.</para>
	<formalpara
		id="formalpara-Mobicents_SIP_Servlets_Load_Balancer-Implementation">
		<title>Implementation of the Mobicents SIP Servlets Load Balancer</title>
		<para>Individual instances of Mobicents SIP Servlet Servers, which may run atop either the JBoss Application Server or the Tomcat Servlet Container (the server pool may also be comprise of a mixture of the two), are responsible for contacting the load balancer and sending their health status as well as heartbeats to it. In fact, only by healthy nodes sending their status and heartbeats to the SIP load balancer does the load balancer recognize that they are available nodes to forward SIP requests to.</para>  
	</formalpara>
	<para>The SIP load balancer first receives SIP requests from endpoints on a port that is specified in its Configuration Properties configuration file. The SIP load balancer, using a round-robin algorithm, then selects a node to which it forwards the SIP requests, using a different port. The SIP load balancer will forward all same-session requests to the node first selected to initiate the session, as long as that node is healthy and available.</para>
		<!-- original
		<para>The Mobicents SIP load balancer receives SIP requests from endpoints on a port that is specified in a configuration file. It then selects nodes to serve the SIP requests using a round-robin algorithm for load-balancing. The nodes are obtained from a list of Mobicents SIP Servlets nodes which is created at runtime. The different nodes are responsible for contacting the load balancer and sending to it both heartbeats and health status.</para>
	<para>The Mobicents SIP load balancer then forwards the SIP requests through a different port to the selected node. It maintains the <quote>stickiness</quote> of requests in a session to a single node as long as the serving node is healthy and available.</para>-->
	<para>The Mobicents SIP load balancer adds itself to the <literal>Via</literal> header of requests so that responses return to the SIP Balancer before they are sent to the orginating endpoint. The Load Balancer also adds itself to the path of subsequent requests by adding Record-Route headers. It can thus handle mid-call failover by forwarding subsequent requests to a different node in the cluster if the node that had originally handled an initial request failed somehow or became unavailable. The SIP load balancer wil immediately fail-over if it stops receiving heartbeats from a node, or receives an <quote>unhealthy</quote> status alert. As mentioned, supplying both of these to the SIP load balancer is the responsibility of the nodes themselves.</para>
	<para>For Mobicents SIP Servlets, this is done by extending the <literal>SipStandardService</literal> class, which itself extends the Tomcat <literal>StandardService</literal> class that implements the Tomcat Service interface. In Tomcat's architecture, a service is an intermediate component which lives inside a server and ties one or more Connectors to exactly one Engine. When the service is started, the new <literal>SipStandardBalancerNodeService</literal> looks up its configuration and gathers the address(es) of the SIP load balancer (of which there could be multiple), and sends a heartbeat and health status to it (or to all of them) so as to identify itself as an available cluster node.</para>
	<para>The parameters of the nodes are configurable through their <literal>MBean</literal> interfaces; information on their configuration is provided in the following sections.</para>
	<!-- SIP Load Balancer -->
	<section
		id="section-binary-SIP_Load_Balancer-Installing_Configuring_and_Running">
		<title>SIP Load Balancer: Installing, Configuring and Running</title>
		<para></para>
		<section
			id="section-binary-SIP_Load_Balancer-PreInstall_Requirements_and_Prerequisites">
			<title>Pre-Install Requirements and Prerequisites</title>
			<para></para>
			<variablelist
				id="variablelist-binary-SIP_Load_Balancer-Software_Prerequisites">
				<title>Software Prerequisites</title>
				<varlistentry>
					<term>A SIP Servlet-Enabled JBoss Application Server or Tomcat Servlet Container</term>
					<listitem>
						<para>Running the SIP load balancer requires at least one SIP Servlets Server as a client node, although you obviously cannot test or do anything interesting with your setup until you start at least two nodes. Therefore, before playing around with the SIP load balancer, we should make sure we've installed a SIP Servlets Server first. The Mobicents SIP load balancer will work with a SIP Servlets-enabled JBoss Application Server <emphasis>or</emphasis> a SIP Servlets-enabled Tomcat Container.</para>
						<para>However, if you intend to cluster multiple nodes for performance, reliability and failover purposes, then you will want to install and set up SIP Servlets-enabled JBoss AS nodes, because only they can be clustered, and not SIP-Servletized Tomcat Containers.</para>
						<itemizedlist>
							<listitem>
								<para>To install a SIP Servlet-enabled JBoss Application Server, follow the instructions here: <xref
										linkend="section-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running"/>.</para>
							</listitem>
							<listitem>
								<para>To install a SIP Servlet-enabled Tomcat Servlet Container, follow these instructions: <xref
										linkend="section-binary-SIP_Servlets_Server_with_Tomcat-Installing_Configuring_and_Running"/>.</para>
							</listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		<section
			id="section-binary-SIP_Load_Balancer-Downloading">
			<title>Downloading</title>
			<para>You should ensure that you have downloaded the following files before installing and configuring:</para>
			<variablelist>
				<varlistentry>
					<term>The SIP load balancer executable JAR file</term>
					<listitem>
						<para>First, you need to download the <ulink
								url="http://snapshots.jboss.org/maven2/org/mobicents/tools/sip-balancer/1.0-SNAPSHOT//sip-balancer-1.0-20080829.103906-21-jar-with-dependencies.jar">Mobicents SIP load balancer executable JAR file</ulink>.</para>
					</listitem>
				</varlistentry>
				<varlistentry id="varlistentry-binary-SIP_Load_Balancer-Configuration_Properties_File">
					<term>The SIP load balancer Configuration Properties file</term>
					<listitem>
						<para>In addition, you must download the default <ulink
								url="http://code.google.com/p/mobicents/source/browse/trunk/tools/sip-balancer/src/test/resources/lb-configuration.properties">Load Balancer Configuration Properties</ulink> file. You will need to invoke the SIP load balancer with a modified copy of this file.</para>
					</listitem>
				</varlistentry>
				<!-- Unnecessary, because the binary distribution has exact copies of these files
				<varlistentry>
					<term>Modified <filename>server.xml</filename> Configuration Files</term>
					<listitem>
						<para>You can use these sample modified <filename>server.xml</filename> configuration files to start either (or both) your SIP Servlet-customized <ulink
								url="http://code.google.com/p/mobicents/source/browse/trunk/servers/sip-servlets/sip-servlets-impl/docs/fialover-server-jboss.xml">JBoss</ulink> or <ulink
								url="http://code.google.com/p/mobicents/source/browse/trunk/servers/sip-servlets/sip-servlets-impl/docs/failover-server-tomcat-6.xml">Tomcat</ulink> container instances.</para>
					</listitem>
				</varlistentry>-->
			</variablelist>
		</section>
		<section
			id="section-binary-SIP_Load_Balancer-Installing">
			<title>Installing</title>
			<para>Installation is simple: put the SIP load balancer executable JAR file anywhere you like.</para>
		</section>
		<section
			id="section-binary-SIP_Load_Balancer-Configuring">
			<title>Configuring</title>
			<para>Configuring the SIP load balancer and the two SIP Servlets-enabled Server nodes is not difficult.</para>
			<procedure
				id="procedure-Configuring_the_Mobicents_SIP_Load_Balancer_and_Servlet_Server_Nodes">
				<title>Configuring the Mobicents SIP Load Balancer and Servlet Server Nodes</title>
				<step>
					<para>First, configure the SIP load balancer's Configuration Properties file which you downloaded by substituting valid values for your personal setup. Here is a sample <filename>lb.properties</filename> file; descriptions of the important lines are provided beneath.</para>
					<example
						id="example-Complete_Sample_lb.properties_File">
	<title>Complete Sample lb.properties File</title>
<programlisting
							id="proglist-Complete_Sample_lb.properties_File"
							linenumbering="numbered">host=127.0.0.1
internalPort=5065
externalPort=5060
#JSIP stack configuration
javax.sip.STACK_NAME = SipBalancerForwarder
javax.sip.AUTOMATIC_DIALOG_SUPPORT = off
// You need 16 for logging traces. 32 for debug + traces.
// Your code will limp at 32 but it is best for debugging.
gov.nist.javax.sip.TRACE_LEVEL = 32
gov.nist.javax.sip.DEBUG_LOG = logs/sipbalancerforwarderdebug.txt
gov.nist.javax.sip.SERVER_LOG = logs/sipbalancerforwarder.xml
gov.nist.javax.sip.THREAD_POOL_SIZE = 64
gov.nist.javax.sip.REENTRANT_LISTENER = true<![CDATA[
]]></programlisting>
</example>
					<variablelist>
						<varlistentry>
							<term>host</term>
							<listitem>
								<para>This is the local IP address, or interface, on which the SIP load balancer will listen for incoming requests.</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>externalPort</term>
							<listitem>
								<para>This is the port on which the SIP load balancer will listen for incoming requests from SIP User Agents.</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>internalPort</term>
							<listitem>
								<para>This is the port on which the SIP load balancer will forward incoming requests to available and healthy SIP Servlets Server cluster nodes.</para>
							</listitem>
						</varlistentry>
					</variablelist>
					<para>The rest of the keys and properties in the Configuration Properties file can be used to tune the JAIN SIP stack, but do not need to be changed for our purposes. If you wish to tune the stack using these properties, refer to the JAIN SIP JavaDoc on the <literal>SipStack</literal> and <literal>SipStackImpl</literal> classes for further information on them.</para>
				</step>
				<step>
					<para>Configure the <filename>server.xml</filename> configuration files for all of your Servlet container nodes according to the following scheme:</para>
					<itemizedlist>
						<listitem>
							<para>the <literal>className</literal> attribute of the <literal>Service</literal> element should have the value <literal>org.mobicents.servlet.sip.startup.failover.SipStandardBalancerNodeService</literal> instead of <literal>org.mobicents.servlet.sip.startup.SipStandardService.</literal>
							</para>
						</listitem>
						<listitem>
							<para>Add an attribute called <quote><literal>balancers</literal>
								</quote> to the <literal>Service</literal> element which has as its values the IP address (or addresses) of the SIP load balancer(s) to which it should send heartbeats.</para>
						</listitem>
					</itemizedlist>
					<sidebar>
						<title>Easy Node Configuration with JMX</title>
						<para>Both SIP Servlet-enabled JBoss and Tomcat have <acronym>JMX</acronym> (Java Management Extensions) interfaces which allow for easy configuration of the server. The JMX Console is available once the server has been started by navigating to <ulink
								url="http://localhost:8080/jmx-console/"/>. Both the <literal>balancers</literal> and <literal>heartBeatInterval</literal> attribute values are available under <literal>serviceName=jboss.web,type=Service</literal> in the JMX Console; here are their descriptions:</para>
						<variablelist>
							<varlistentry>
								<term>balancers</term>
								<listitem>
									<para>The host names of the SIP load balancer(s) with corresponding <literal>addBalancerAddress</literal> and <literal>removeBalancerAddress</literal> methods.</para>
								</listitem>
							</varlistentry>
							<varlistentry>
								<term>heartBeatInterval</term>
								<listitem>
									<para>The interval at which each heartbeat is sent to the SIP load balancer(s).</para>
								</listitem>
							</varlistentry>
						</variablelist>
					</sidebar>
				</step>
			</procedure>
		</section>
		<section
			id="section-binary-SIP_Load_Balancer-Running">
			<title>Running</title>
			<procedure
				id="procedure-Running_the_SIP_Load_Balancer_and_Servlet_Server_Nodes">
				<title>Running the SIP Load Balancer and Servlet Server Nodes</title>
				<step>
					<para>First, start the SIP load balancer, making sure to pass as an argument the name of your Configuration Properties file (<filename>lb.properties</filename> in this example). In the Linux terminal, or using the Windows Command Prompt, you can start the SIP Load Balance by issuing a command similar to this one:</para>
					<screen>java -jar sip-balancer-1.0-20080829.103906-21-jar-with-dependencies.jar lb-configuration.properties</screen>
					<para>Running the SIP load balancer should produce output similar to the following:</para>
					<screen>silas@localhost ~ $ java -jar sip-balancer-1.0-20080829.103906-21-jar-with-dependencies.jar lb-configuration.properties Oct 21, 2008 1:10:58 AM org.mobicents.tools.sip.balancer.SIPBalancerForwarder start
INFO: Sip Balancer started on address 127.0.0.1, external port : 5060, port : 5065
Oct 21, 2008 1:10:59 AM org.mobicents.tools.sip.balancer.NodeRegisterImpl startServer
INFO: Node registry starting...
Oct 21, 2008 1:10:59 AM org.mobicents.tools.sip.balancer.NodeRegisterImpl startServer
INFO: Node expiration task created
Oct 21, 2008 1:10:59 AM org.mobicents.tools.sip.balancer.NodeRegisterImpl startServer
INFO: Node registry started</screen>
					<para>In the output above, you can see the IP address on which the SIP load balancer is listening, as well as on which external and internal ports it is paying attention.</para>
				</step>
				<step>
					<para>All well and good so far, but we're still in need of a pair of SIP Servlet Server nodes&#8212;or ten. Your nodes can run atop either the JBoss Application Server or the Tomcat Servlet Container. You should have already installed the binary distributions for type (or types) of SIP Servlets Server you will run as client nodes of the SIP load balancer (see <xref
							linkend="variablelist-binary-SIP_Load_Balancer-Software_Prerequisites"/> if you have not). And finally, you can simply use your server's <filename>server.xml</filename> configuration file <footnote><para>In the JBoss SIP Servlets Server binary distribution, this file is located inside the <filename>&lt;topmost_directory&gt;/server/all/deploy/jboss-web.deployer/</filename> directory, and in the Tomcat binary distribution, it is located in the <filename>&lt;topmost_directory&gt;/conf/</filename> directory.</para>
						</footnote>, nearly-unchanged, to configure the client nodes. Because you will have more than one client node, you should assign different ports for each of them to listen on for HTTP and/or SIP connections. Here is the relevant portion of the <filename>server.xml</filename> configuration file where you should change the value for each new node you add to the cluster:</para>
					<example
						id="example-Changing_the_SIP_Connector_Port_for_Servlet_Server_Nodes">
	<title>Changing the SIP Connector Port for Servlet Server Nodes in server.xml</title>
<programlisting
							id="proglist-Changing_the_SIP_Connector_Port_for_Servlet_Server_Nodes_in_server.xml"
							linenumbering="numbered"
							role="XML"><![CDATA[<!-- Define a SIP Connector -->
    <Connector port="5080" 
]]></programlisting>
</example>
					<para>Finally, start all of your SIP load balancer client nodes.</para>
				</step>
			</procedure>
		</section>
		<!--<section
			id="section-binary-SIP_Load_Balancer-Using">
			<title>Using</title>
			<para></para>
		</section-->>
		<section
			id="section-binary-SIP_Load_Balancer-Testing">
			<title>Testing</title>
			<para>Deploy the same application, let's say location service on both nodes (you need to deploy the application manually on both nodes, when deployed on one node it won't deploy automatically in the whole cluster for now and don't forget to setup the dar file in the server.xml on both nodes neither)</para>
			<para>Start a sip client with following sip address sip:sender@sip-servlets-com on port 5055, with outbound proxy the sip-balancer 127.0.0.1:5060</para>
			<para>Start a second sip client with following sip address sip:receiver-failover@sip-servlets.com on port 5090</para>
			<para>From first sip client, start a call to sip:receiver-failover@sip-servlets.com. Tear down the call when you're done</para>
			<para>Redo it another, from first sip client, start a call to sip:receiver-failover@sip-servlets.com. Tear down the call when you're done. The request should have been handled by the other node</para>
		</section>
		<section
			id="section-binary-SIP_Load_Balancer-Stopping">
			<title>Stopping</title>
			<para>Assuming that you started the JBoss Application Server as a foreground process in the Linux terminal, the easiest way to stop it is by pressing the <keycombo
					action="simul"><keycap>Ctrl</keycap>
						<keycap>c</keycap>
					</keycombo> key combination in the same terminal in which you started it.
						</para>
			<para>This should produce similar output to the following:</para>
			<screen>^COct 21, 2008 1:11:57 AM org.mobicents.tools.sip.balancer.SipBalancerShutdownHook run
INFO: Stopping the sip forwarder</screen>
		</section>
		<section
			id="section-binary-SIP_Load_Balancer-Uninstalling">
			<title>Uninstalling</title>
			<para>To uninstall the SIP load balancer, simply delete the JAR file you installed.</para>
		</section>
	</section>
</section>

/**
 * Start time:16:54:43 2009-01-19<br>
 * Project: mobicents-jainslee-server-core<br>
 * 
 * @author <a href="mailto:baranowb@gmail.com">baranowb - Bartosz Baranowski
 *         </a>
 * @author <a href="mailto:brainslog@gmail.com"> Alexandre Mendonca </a>
 */
package org.mobicents.slee.container.component.deployment.jaxb.descriptors;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;

import javax.slee.management.DeployableUnitID;
import javax.slee.management.DeploymentException;

import org.mobicents.slee.container.component.ComponentKey;
import org.mobicents.slee.container.component.deployment.DeployedComponent;
import org.mobicents.slee.container.component.deployment.jaxb.descriptors.common.ProfileSpecsReference;
import org.mobicents.slee.container.component.deployment.jaxb.descriptors.common.SecurityPermision;
import org.mobicents.slee.container.component.deployment.jaxb.descriptors.sbb.MActivityContextAttributeAlias;
import org.mobicents.slee.container.component.deployment.jaxb.descriptors.sbb.MEjbRef;
import org.mobicents.slee.container.component.deployment.jaxb.descriptors.sbb.MEnvEntry;
import org.mobicents.slee.container.component.deployment.jaxb.descriptors.sbb.MEventEntry;
import org.mobicents.slee.container.component.deployment.jaxb.descriptors.sbb.MResourceAdaptorTypeBidning;
import org.mobicents.slee.container.component.deployment.jaxb.descriptors.sbb.MSbbAbstractClass;
import org.mobicents.slee.container.component.deployment.jaxb.descriptors.sbb.MSbbActivityContextInterface;
import org.mobicents.slee.container.component.deployment.jaxb.descriptors.sbb.MSbbLocalInterface;
import org.mobicents.slee.container.component.deployment.jaxb.descriptors.sbb.MSbbReference;
import org.mobicents.slee.container.component.deployment.jaxb.descriptors.sbb.MSbbUsageParametersInterface;
import org.mobicents.slee.container.component.deployment.jaxb.descriptors.validators.SbbJarValidator;

import org.mobicents.slee.container.component.deployment.jaxb.slee.sbb.Sbb;
import org.mobicents.slee.container.component.deployment.jaxb.slee.sbb.SbbJar;
import org.mobicents.slee.container.component.deployment.jaxb.slee11.sbb.ActivityContextAttributeAlias;
import org.mobicents.slee.container.component.deployment.jaxb.slee11.sbb.EjbRef;
import org.mobicents.slee.container.component.deployment.jaxb.slee11.sbb.EnvEntry;
import org.mobicents.slee.container.component.deployment.jaxb.slee11.sbb.Event;
import org.mobicents.slee.container.component.deployment.jaxb.slee11.sbb.LibraryRef;
import org.mobicents.slee.container.component.deployment.jaxb.slee11.sbb.ResourceAdaptorTypeBinding;
import org.mobicents.slee.container.component.deployment.jaxb.slee11.sbb.SbbRef;

import org.w3c.dom.Document;

/**
 * Start time:16:54:43 2009-01-19<br>
 * Project: mobicents-jainslee-server-core<br>
 * 
 * @author <a href="mailto:baranowb@gmail.com">baranowb - Bartosz Baranowski
 *         </a>
 * @author <a href="mailto:brainslog@gmail.com"> Alexandre Mendonca </a>
 */
public class SbbDescriptorImpl extends JAXBBaseUtilityClass implements
		DeployedComponent {

	private SbbJar sbbJar = null;
	private org.mobicents.slee.container.component.deployment.jaxb.slee11.sbb.SbbJar llSbbJar = null;

	private Sbb sbb = null;
	private org.mobicents.slee.container.component.deployment.jaxb.slee11.sbb.Sbb llSbb = null;

	/**
	 * Index of this sbb in list generated by JXB
	 */
	private int index = -1;

	
	private String description = null;

	private ComponentKey sbbComponentKey = null;
	private String sbbAlias = null;
	private ArrayList<MSbbReference> sbbRefs = null;
	// Maybe this should be the same as in profiles as reference?
	private HashMap<String, ProfileSpecsReference> profileSpecRefs = null;

	// might be bad, we ommit sbb-classes/description, phew
	private MSbbAbstractClass sbbAbstractClass = null;
	private MSbbLocalInterface sbbLocalInterface = null;
	private MSbbActivityContextInterface sbbActivityContextInterface = null;
	private MSbbUsageParametersInterface sbbUsageParametersInterface = null;
	private String addressProfileSpecAliasRef = null;
	private ArrayList<MEventEntry> events = null;
	private ArrayList<MActivityContextAttributeAlias> activityContextAttributeAliases = null;
	private ArrayList<MEnvEntry> envEntries = null;
	private ArrayList<MResourceAdaptorTypeBidning> resourceAdaptorTypeBindings = null;

	// 1.1 stuff, profile specs refs have alias element, so we need another.
	private ArrayList<ComponentKey> libraryRefs = null;
	private ArrayList<MEjbRef> ejbRefs = null;

	private SecurityPermision securityPermisions = null;

	
	// OTHER
	
	private DeployableUnitID deployableUnitId=null;
	/**
	 * tttttt
	 * 
	 * @param doc
	 * @throws DeploymentException
	 */
	private SbbDescriptorImpl(Document doc) throws DeploymentException {
		super(doc);
		// TODO Auto-generated constructor stub
	}

	private SbbDescriptorImpl(Document doc, SbbJar sbbJar, int index)
			throws DeploymentException {
		super(doc);

		this.index = index;
		this.sbbJar = sbbJar;
		buildDescriptionMap();

	}

	private SbbDescriptorImpl(
			Document doc,
			org.mobicents.slee.container.component.deployment.jaxb.slee11.sbb.SbbJar sbbJar,
			int index) throws DeploymentException {
		super(doc);

		this.index = index;
		this.llSbbJar = sbbJar;
		buildDescriptionMap();

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @seeorg.mobicents.slee.container.component.deployment.jaxb.descriptors.
	 * JAXBBaseUtilityClass#buildDescriptionMap()
	 */
	@Override
	public void buildDescriptionMap()  {
		if (isSlee11()) {
			this.llSbb = this.llSbbJar.getSbb().get(index);
			this.description = llSbb.getDescription() == null ? null
					: this.llSbb.getDescription().getvalue();

			this.sbbAlias = this.llSbb.getSbbAlias().getvalue();

			// Library Refs
			this.libraryRefs = new ArrayList<ComponentKey>();
			if (llSbb.getLibraryRef() != null) {
				for (LibraryRef lr : this.llSbb.getLibraryRef()) {
					this.libraryRefs.add(new ComponentKey(lr.getLibraryName()
							.getvalue(), lr.getLibraryVendor().getvalue(), lr
							.getLibraryVersion().getvalue()));
				}
			}

			// SbbRefs
			this.sbbRefs = new ArrayList<MSbbReference>();
			if (this.llSbb.getSbbRef() != null) {
				for (SbbRef sr : this.llSbb.getSbbRef()) {
					this.sbbRefs.add(new MSbbReference(sr));
				}
			}

			// Profile Refs
			this.profileSpecRefs = new HashMap<String, ProfileSpecsReference>();
			if (this.llSbb.getProfileSpecRef() != null) {
				for (org.mobicents.slee.container.component.deployment.jaxb.slee11.sbb.ProfileSpecRef psr : this.llSbb
						.getProfileSpecRef()) {
					// Second arg == Alias, its depraceted in 1.1
					ProfileSpecsReference p = new ProfileSpecsReference(null,
							psr.getProfileSpecAlias() == null ? null : psr
									.getProfileSpecAlias().getvalue(), psr
									.getProfileSpecName().getvalue(), psr
									.getProfileSpecVendor().getvalue(), psr
									.getProfileSpecVersion().getvalue());
					this.profileSpecRefs.put(
							p.getReferenceKey().getName(), p);
				}
			}
			
			this.sbbAbstractClass=new MSbbAbstractClass(this.llSbb.getSbbClasses().getSbbAbstractClass());
			
			//Optional , 1.1
			if(this.llSbb.getSbbClasses().getSbbLocalInterface()!=null)
			{
				this.sbbLocalInterface=new MSbbLocalInterface(this.llSbb.getSbbClasses().getSbbLocalInterface());
			}
			
			//Optional
			if(this.llSbb.getSbbClasses().getSbbActivityContextInterface()!=null)
			{
				this.sbbActivityContextInterface=new MSbbActivityContextInterface(this.llSbb.getSbbClasses().getSbbActivityContextInterface());
			}
			//Optional
			if(this.llSbb.getSbbClasses().getSbbUsageParametersInterface()!=null)
			{
				this.sbbUsageParametersInterface=new MSbbUsageParametersInterface(this.llSbb.getSbbClasses().getSbbUsageParametersInterface());
			}
			
			//Optional
			if(this.llSbb.getAddressProfileSpecAliasRef()!=null)
			{
				this.addressProfileSpecAliasRef=this.llSbb.getAddressProfileSpecAliasRef().getvalue();
			}
			
			this.events=new ArrayList<MEventEntry>();
			if(this.llSbb.getEvent()!=null)
			{
				for(Event e:this.llSbb.getEvent())
				{
					this.events.add(new MEventEntry(e));
				}
			}
			
			this.activityContextAttributeAliases=new ArrayList<MActivityContextAttributeAlias>();
			if(this.llSbb.getActivityContextAttributeAlias()!=null)
			{
				for(ActivityContextAttributeAlias acaa:this.llSbb.getActivityContextAttributeAlias())
				{
					this.activityContextAttributeAliases.add(new MActivityContextAttributeAlias(acaa));
				}
			}
			this.envEntries=new ArrayList<MEnvEntry>();
			if(this.llSbb.getEnvEntry()!=null)
			{
				for(EnvEntry ee:this.llSbb.getEnvEntry())
				{
					this.envEntries.add(new MEnvEntry(ee));
				}
			}
			
			this.resourceAdaptorTypeBindings=new ArrayList<MResourceAdaptorTypeBidning>();
			if(this.llSbb.getResourceAdaptorTypeBinding()!=null)
			{
				for(ResourceAdaptorTypeBinding ratb: this.llSbb.getResourceAdaptorTypeBinding())
				{
					this.resourceAdaptorTypeBindings.add(new MResourceAdaptorTypeBidning(ratb));
				}
			}
			
			this.ejbRefs=new ArrayList<MEjbRef>();
			if(this.llSbb.getEjbRef()!=null)
			{
				for(EjbRef er:this.llSbb.getEjbRef())
				{
					this.ejbRefs.add(new MEjbRef(er));
				}
			}
			if(this.llSbbJar.getSecurityPermissions()!=null)
			{
				org.mobicents.slee.container.component.deployment.jaxb.slee11.sbb.SecurityPermissions secPerm = this.llSbbJar.getSecurityPermissions();
				this.securityPermisions = new SecurityPermision(secPerm
				.getDescription() == null ? null : secPerm
				.getDescription().getvalue(), secPerm
				.getSecurityPermissionSpec().getvalue());
			}
			
		} else {

			this.sbb = this.sbbJar.getSbb().get(index);
			this.description = sbb.getDescription() == null ? null
					: this.sbb.getDescription().getvalue();

			this.sbbAlias = this.sbb.getSbbAlias().getvalue();

			// Library Refs
			this.libraryRefs = new ArrayList<ComponentKey>();
			

			// SbbRefs
			this.sbbRefs = new ArrayList<MSbbReference>();
			if (this.sbb.getSbbRef() != null) {
				for (org.mobicents.slee.container.component.deployment.jaxb.slee.sbb.SbbRef sr : this.sbb.getSbbRef()) {
					this.sbbRefs.add(new MSbbReference(sr));
				}
			}

			// Profile Refs
			this.profileSpecRefs = new HashMap<String, ProfileSpecsReference>();
			if (this.sbb.getProfileSpecRef() != null) {
				for (org.mobicents.slee.container.component.deployment.jaxb.slee.sbb.ProfileSpecRef psr : this.sbb
						.getProfileSpecRef()) {
					// Second arg == Alias, its depraceted in 1.1
					ProfileSpecsReference p = new ProfileSpecsReference(null,
							psr.getProfileSpecAlias() == null ? null : psr
									.getProfileSpecAlias().getvalue(), psr
									.getProfileSpecName().getvalue(), psr
									.getProfileSpecVendor().getvalue(), psr
									.getProfileSpecVersion().getvalue());
					this.profileSpecRefs.put(
							p.getReferenceKey().getName(), p);
				}
			}
			
			this.sbbAbstractClass=new MSbbAbstractClass(this.sbb.getSbbClasses().getSbbAbstractClass());
			
			//Optional
			if(this.sbb.getSbbClasses().getSbbActivityContextInterface()!=null)
			{
				this.sbbActivityContextInterface=new MSbbActivityContextInterface(this.sbb.getSbbClasses().getSbbActivityContextInterface());
			}
			//Optional
			if(this.sbb.getSbbClasses().getSbbUsageParametersInterface()!=null)
			{
				this.sbbUsageParametersInterface=new MSbbUsageParametersInterface(this.sbb.getSbbClasses().getSbbUsageParametersInterface());
			}
			
			//Optional
			if(this.sbb.getAddressProfileSpecAliasRef()!=null)
			{
				this.addressProfileSpecAliasRef=this.sbb.getAddressProfileSpecAliasRef().getvalue();
			}
			
			this.events=new ArrayList<MEventEntry>();
			if(this.sbb.getEvent()!=null)
			{
				for(org.mobicents.slee.container.component.deployment.jaxb.slee.sbb.Event e:this.sbb.getEvent())
				{
					this.events.add(new MEventEntry(e));
				}
			}
			
			this.activityContextAttributeAliases=new ArrayList<MActivityContextAttributeAlias>();
			if(this.sbb.getActivityContextAttributeAlias()!=null)
			{
				for(org.mobicents.slee.container.component.deployment.jaxb.slee.sbb.ActivityContextAttributeAlias acaa:this.sbb.getActivityContextAttributeAlias())
				{
					this.activityContextAttributeAliases.add(new MActivityContextAttributeAlias(acaa));
				}
			}
			this.envEntries=new ArrayList<MEnvEntry>();
			if(this.sbb.getEnvEntry()!=null)
			{
				for(org.mobicents.slee.container.component.deployment.jaxb.slee.sbb.EnvEntry ee:this.sbb.getEnvEntry())
				{
					this.envEntries.add(new MEnvEntry(ee));
				}
			}
			
			this.resourceAdaptorTypeBindings=new ArrayList<MResourceAdaptorTypeBidning>();
			if(this.sbb.getResourceAdaptorTypeBinding()!=null)
			{
				for(org.mobicents.slee.container.component.deployment.jaxb.slee.sbb.ResourceAdaptorTypeBinding ratb: this.sbb.getResourceAdaptorTypeBinding())
				{
					this.resourceAdaptorTypeBindings.add(new MResourceAdaptorTypeBidning(ratb));
				}
			}
			
			this.ejbRefs=new ArrayList<MEjbRef>();
			if(this.sbb.getEjbRef()!=null)
			{
				for(org.mobicents.slee.container.component.deployment.jaxb.slee.sbb.EjbRef er:this.sbb.getEjbRef())
				{
					this.ejbRefs.add(new MEjbRef(er));
				}
			}
			
			
		}

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @seeorg.mobicents.slee.container.component.deployment.jaxb.descriptors.
	 * JAXBBaseUtilityClass#getJAXBDescriptor()
	 */
	@Override
	public Object getJAXBDescriptor() {
		if(isSlee11())
		{
			return this.llSbb;
		}else
		{
			return this.sbb;
		}
	}

	public SbbDescriptorImpl[] parseDocument(Document sbbJar,
			DeployableUnitID duID) throws DeploymentException {
		if (isDoctypeSlee11(sbbJar.getDoctype())) {
			try {
				org.mobicents.slee.container.component.deployment.jaxb.slee11.sbb.SbbJar psj = (org.mobicents.slee.container.component.deployment.jaxb.slee11.sbb.SbbJar) JAXBBaseUtilityClass
						.getUnmarshaller().unmarshal(sbbJar);
				if (psj.getSbb() == null || psj.getSbb().size() == 0) {
					// Akward
					throw new ParseException(
							"No elements to parse in sbb-jar descriptor", 0);
				}
				SbbDescriptorImpl[] table = new SbbDescriptorImpl[psj.getSbb()
						.size()];
				for (int i = 0; i < psj.getSbb().size(); i++) {
					table[i] = new SbbDescriptorImpl(sbbJar, psj, i);
				}
				return table;
			} catch (Exception e) {

				throw new DeploymentException(
						"Failed to parse xml descriptor of a sbb jar due to: ",
						e);
			}

		} else {
			try {
				org.mobicents.slee.container.component.deployment.jaxb.slee.sbb.SbbJar psj = (org.mobicents.slee.container.component.deployment.jaxb.slee.sbb.SbbJar) JAXBBaseUtilityClass
						.getUnmarshaller().unmarshal(sbbJar);
				if (psj.getSbb() == null || psj.getSbb().size() == 0) {
					// Akward
					throw new ParseException(
							"No elements to parse in sbb-jar descriptor", 0);
				}
				SbbDescriptorImpl[] table = new SbbDescriptorImpl[psj.getSbb()
						.size()];
				for (int i = 0; i < psj.getSbb().size(); i++) {
					table[i] = new SbbDescriptorImpl(sbbJar, psj, i);
				}
				return table;
			} catch (Exception e) {

				throw new DeploymentException(
						"Failed to parse xml descriptor of a sbb jar due to: ",
						e);
			}
		}
	}

	public void checkDeployment() throws DeploymentException {
		// TODO Auto-generated method stub

	}

	public DeployableUnitID getDeployableUnit() {
		return this.deployableUnitId;
	}

	public void setDeployableUnit(DeployableUnitID deployableUnitID) {
		this.deployableUnitId=deployableUnitID;

	}

	public int getIndex() {
		return index;
	}

	public String getDescription() {
		return description;
	}

	public ComponentKey getSbbComponentKey() {
		return sbbComponentKey;
	}

	public String getSbbAlias() {
		return sbbAlias;
	}

	public ArrayList<MSbbReference> getSbbRefs() {
		return sbbRefs;
	}

	public HashMap<String, ProfileSpecsReference> getProfileSpecReference() {
		return profileSpecRefs;
	}

	public MSbbAbstractClass getSbbAbstractClass() {
		return sbbAbstractClass;
	}

	public MSbbLocalInterface getSbbLocalInterface() {
		return sbbLocalInterface;
	}

	public MSbbActivityContextInterface getSbbActivityContextInterface() {
		return sbbActivityContextInterface;
	}

	public MSbbUsageParametersInterface getSbbUsageParametersInterface() {
		return sbbUsageParametersInterface;
	}

	public String getAddressProfileSpecAliasRef() {
		return addressProfileSpecAliasRef;
	}

	public ArrayList<MEventEntry> getEvents() {
		return events;
	}

	public ArrayList<MActivityContextAttributeAlias> getActivityContextAttributeAliases() {
		return activityContextAttributeAliases;
	}

	public ArrayList<MEnvEntry> getEnvEntries() {
		return envEntries;
	}

	public ArrayList<MResourceAdaptorTypeBidning> getResourceAdaptorTypeBindings() {
		return resourceAdaptorTypeBindings;
	}

	public ArrayList<ComponentKey> getLibraryRefs() {
		return libraryRefs;
	}

	public ArrayList<MEjbRef> getEjbRefs() {
		return ejbRefs;
	}


	public SecurityPermision getSecurityPermisions() {
		return securityPermisions;
	}

	public DeployableUnitID getDeployableUnitId() {
		return deployableUnitId;
	}

	
	
}

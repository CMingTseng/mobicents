package javax.slee.management;

import javax.slee.ComponentID;
import javax.slee.UnrecognizedComponentException;
import javax.slee.facilities.Level;

/**
 * The <code>TraceMBean</code> interface defines the management interface for the
 * {@link javax.slee.facilities.TraceFacility} (and other vendor-specific trace
 * generating interfaces).  Using the <code>TraceMBean</code> a management client
 * may get or set the trace filter level for trace notification generated from
 * various component sources.  The <code>TraceMBean</code> is also used as a
 * notification source in the generation of {@link TraceNotification Trace}
 * notifications.
 * <p>
 * The Object Name of a <code>TraceMBean</code> object can be obtained by
 * a management client via the {@link SleeManagementMBean#getTraceMBean}
 * method.
 * <p>
 * <b>Notifications</b><br>
 * Since <code>TraceMBean</code> objects can emit {@link TraceNotification Trace}
 * notifications, it is required that that <code>TraceMBean</code> object implement
 * the <code>javax.management.NotificationBroadcaster</code> interface.
 */
public interface TraceMBean {
    /**
     * The notification type of {@link TraceNotification Trace} notifications
     * emitted by this MBean.  The notification type is equal to the string
     * "javax.slee.management.trace".
     */
    public static final String TRACE_NOTIFICATION_TYPE = "javax.slee.management.trace";

    /**
     * Set the trace filter level for a particular component.  The <code>TraceMBean</code>
     * only generates trace notifications if the trace level of a trace message
     * generated by a component is equal to or greater than the trace filter level
     * set for that component.
     * <p>
     * The default trace filter level for a component is {@link Level#OFF},
     * ie. trace notifications are never generated for the component unless the trace
     * filter level is explicitly set to a different level.
     * @param id the identifier of the component.
     * @param traceLevel the new trace filter level for the component.
     * @throws NullPointerException if <code>id</code> is <code>null</code>.
     * @throws UnrecognizedComponentException if <code>id</code> is not a recognizable
     *        <code>ComponentID</code> object for the SLEE or it does not correspond
     *        with a component installed in the SLEE.
     * @throws ManagementException if the trace level could not be set due to a
     *        system-level failure.
     */
    public void setTraceLevel(ComponentID id, Level traceLevel)
        throws NullPointerException, UnrecognizedComponentException, ManagementException;

    /**
     * Get the trace filter level for a particular component.
     * <p>
     * The default trace filter level for a component is {@link Level#OFF},
     * ie. trace notifications are never generated for the component unless the trace
     * filter level is explicitly set to a different level.
     * @param id the identifier of the component.
     * @return the trace filter level for the component.
     * @throws NullPointerException if <code>id</code> is <code>null</code>.
     * @throws UnrecognizedComponentException if <code>id</code> is not a recognizable
     *        <code>ComponentID</code> object for the SLEE or it does not correspond
     *        with a component installed in the SLEE.
     * @throws ManagementException if the trace level could not be set due to a
     *        system-level failure.
     */
    public Level getTraceLevel(ComponentID id)
        throws NullPointerException, UnrecognizedComponentException, ManagementException;

}


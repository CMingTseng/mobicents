<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="Media Server" default="deploy-server" basedir=".">
	<description>Builds, tests, and runs the project Media server.</description>
	<!-- import file="nbproject/build-impl.xml"/ -->
	<!-- import file="nbproject/ide-file-targets.xml" / -->


	<!-- == PROPERTIES == -->
	<property name="build.classes.dir" value="build/classes" />
	<property name="dist.dir" value="dist" />
	<property name="src.dir" value="src" />
	<property name="src.test.dir" value="test" />
	<property name="build.test.dir" value="build/test" />
	<property name="build.test.classes" value="${build.test.dir}/WEB-INF/classes" />
	<property environment="sys" />

	<property name="jboss.home" value="${sys.JBOSS_HOME}" />

	<property name="libs.home" value="lib" />
	<property name="xml" value="xml" />

	<property name="verbose.compile" value="false" />
	<property name="verbose.compile.tests" value="false" />
	<property name="test.reports.dir" value="reports" />
	<property name="mscontrol.jar" value="${ant.file.Media Server}/../../mscontrol/msc/jars/mscontrol.jar" />

	<!-- == PATH DEFINITIONS == -->

	<path id="compile.class.path">
		<fileset dir="${libs.home}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${ant.file.Media Server}/../../mscontrol/msc/jars">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="test.class.path">
		<fileset dir="${dist.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="cactus.ant.tasks.classpath">
		<fileset dir="${libs.home}">
			<include name="cactus-*.jar" />
			<include name="commons-httpclient-*.jar" />
			<include name="commons-logging-*.jar" />
			<include name="aspectjrt-*.jar" />
			<include name="cargo-*.jar" />
		</fileset>
	</path>

	<path id="cactus.classpath">
		<path refid="cactus.ant.tasks.classpath" />
		<fileset dir="${libs.home}">
			<include name="geronimo-spec-j2ee-*.jar" />
			<include name="httpunit-*.jar" />
			<include name="jasper-compiler-*.jar" />
			<include name="jasper-runtime-*.jar" />
			<include name="jasper-runtime-*.jar" />
			<include name="nekohtml-*.jar" />
			<include name="junit-*.jar" />
			<include name="nekohtml-*.jar" />
			<include name="org.mortbay.jetty-*.jar" />
			<include name="servletapi-*.jar" />
		</fileset>
	</path>

	<!-- == TASKS DEFINITION == -->

	<!-- Define the Cactus tasks -->
	<taskdef resource="cactus.tasks">
		<classpath refid="cactus.ant.tasks.classpath" />
	</taskdef>

	<!-- == GENERAL TARGETS == -->
	<target name="init">
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="javacompile" depends="init" description="Compile">
		<javac debug="true" deprecation="true" verbose="${verbose.compile}" destdir="${build.classes.dir}" srcdir="${src.dir}" excludes="**/tests/*.java">
			<classpath refid="compile.class.path" />
		</javac>
	</target>

	<target name="clean" depends="clean-dist,clean-server,clean-tests" description="Does clean sweap over project dears.">
		<delete dir="${test.reports.dir}" />
	</target>

	<target name="clean-server">
		<delete dir="${build.classes.dir}" />
	</target>
	<target name="clean-dist">
		<delete dir="${dist.dir}" />
	</target>
	<target name="clean-tests">
		<delete dir="${build.test.dir}" />
		<delete dir="${test.reports.dir}" />
	</target>
	<target name="mgcp-control-sbb" depends="javacompile">
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.dir}/sbb-unit" />
		<mkdir dir="${dist.dir}/sbb-unit/META-INF" />

		<copy todir="${dist.dir}/sbb-unit/">
			<fileset dir="${build.classes.dir}">
				<include name="org/mobicents/media/sbb/" />
			</fileset>
		</copy>

		<copy todir="${dist.dir}/sbb-unit/META-INF">
			<fileset dir="xml/control">
				<include name="sbb-jar.xml" />
			</fileset>
		</copy>

		<jar basedir="${dist.dir}/sbb-unit/" compress="true" jarfile="${dist.dir}/mgcp-sbb.jar">
		</jar>

		<delete dir="${dist.dir}/sbb-unit" />
	</target>

	<target name="mgcp-control-du" depends="mgcp-control-sbb">
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.dir}/sbb-service" />
		<mkdir dir="${dist.dir}/sbb-service/META-INF" />
		<mkdir dir="${dist.dir}/sbb-service/library" />

		<copy todir="${dist.dir}/sbb-service/" overwrite="true" file="${dist.dir}/mgcp-sbb.jar" />
		<copy todir="${dist.dir}/sbb-service/library/" overwrite="true" file="lib/jain-sip-ri-1.2.1.jar" />
		<copy todir="${dist.dir}/sbb-service/" overwrite="true" file="xml/control/service.xml" />

		<copy todir="${dist.dir}/sbb-service/META-INF">
			<fileset dir="xml/control">
				<include name="deployable-unit.xml" />
			</fileset>
		</copy>

		<jar basedir="${dist.dir}/sbb-service/" compress="true" jarfile="${dist.dir}/mgcp-controller.jar">
		</jar>

		<delete dir="${dist.dir}/sbb-service" />
	</target>

    <target name="postcompile" description="Updates build number.">
	<buildnumber file="build.number" />
    </target>
    
	<target name="package" depends="javacompile,postcompile">
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.dir}/mediaserver" />

		<copy todir="${dist.dir}/mediaserver">
			<fileset dir="${build.classes.dir}">
				<include name="org/mobicents/media/" />
			</fileset>
		</copy>
		<copy todir="${dist.dir}/mediaserver/org/mobicents/media/server/impl" file="${ant.file.mobicents.jpx}/../version.properties" />
		<jar basedir="${dist.dir}/mediaserver" compress="true" jarfile="${dist.dir}/media-server.jar" />
		<delete dir="${dist.dir}/mediaserver" />
	</target>



	<target name="deploy-server" depends="package" description="Deploys MS into container">
		<mkdir dir="${jboss.home}/server/default/deploy/mediaserver.sar" />
		<copy todir="${jboss.home}/server/default/deploy/mediaserver.sar" file="${dist.dir}/media-server.jar" overwrite="true" />
		<copy todir="${jboss.home}/server/default/deploy/mediaserver.sar" file="${libs.home}/jainmgcp.jar" overwrite="true" />
		<copy todir="${jboss.home}/server/default/deploy/mediaserver.sar" file="${libs.home}/jmf.jar" overwrite="true" />
		<copy todir="${jboss.home}/server/default/deploy/mediaserver.sar" file="${libs.home}/jain-sip-ri-1.2.1.jar" overwrite="true" />
		<copy todir="${jboss.home}/server/default/conf" file="dtmf.properties" overwrite="true" />

		<mkdir dir="${jboss.home}/server/default/deploy/mediaserver.sar/META-INF" />
		<copy todir="${jboss.home}/server/default/deploy/mediaserver.sar/META-INF/" file="${xml}/server/jboss-service.xml" overwrite="true" />
	</target>

	<target name="undeploy-server">
		<delete dir="${jboss.home}/server/all/deploy/mediaserver.sar" />
	</target>



	<!-- == TESTS TARGETS == -->



	<target name="run-tests" depends="deploy-tests" description="Run testsuite for MS. NOTE: container has to be in running state when this is invoked.">


		<path id="src.fullpath">
			<pathelement location="${src.dir}" />
		</path>
		<property name="src.fullpath.property" refid="src.fullpath" />
		<cactus showoutput="true" printsummary="yes" failureproperty="tests.failed" warfile="${dist.dir}/test.war">

			<classpath>
				<path refid="cactus.classpath" />
				<path refid="compile.class.path" />
				<pathelement location="${build.test.dir}" />
				<pathelement location="${src.fullpath.property}" />
				<pathelement location="${build.test.classes}" />
				<pathelement location="${build.classes.dir}" />
				<pathelement location="${mscontrol.jar}" />
			</classpath>

			<containerset>
				<!--jboss3x dir="${jboss.home}" config="default" todir="${test.reports.dir}/jboss3x" /-->
				<generic name="JBoss 4.2.2GA" port="8080">
					<startup target="mycontainer.start" />
					<shutdown target="mycontainer.stop" />
				</generic>
			</containerset>

			<formatter type="xml" />
			<batchtest todir="${test.reports.dir}">
				<fileset dir="${src.fullpath.property}">
					<!-- THIS IS PATTERN FOR TESTS - each test will produce separate file, in order to have single file we should use AllTestsAgregator -->
					<include name="**/Z*Test.java" />
					<exclude name="**/AllTestsAgregator.java" />
				</fileset>
			</batchtest>
		</cactus>

		<ant target="undeploy-tests" />
	</target>

	<!-- FAKE TARGETS: COntianer should already be started -->
	<target name="mycontainer.start">
	</target>
	<target name="mycontainer.stop">
	</target>

	<target name="deploy-tests" depends="package">
		<mkdir dir="${build.test.dir}/WEB-INF" />
		<mkdir dir="${build.test.classes}" />
		<mkdir dir="${build.test.dir}/WEB-INF/lib" />
		<mkdir dir="${test.reports.dir}" />
		<javac debug="true" deprecation="true" verbose="true" destdir="${build.test.classes}" srcdir="${src.dir}" includes="**/tests/*.java">
			<classpath refid="compile.class.path" />
			<classpath refid="test.class.path" />
		</javac>
		<!--copy todir="${build.test.dir}/WEB-INF" file="${xml}/test/WEB-INF/jboss-web.xml" overwrite="true" /-->
		<copy todir="${build.test.dir}/WEB-INF" file="${xml}/test/WEB-INF/web.xml" overwrite="true" />
		<copy todir="${build.test.dir}" file="${xml}/test/WEB-INF/cactus-report.xsl" overwrite="true" />


		<copy todir="${build.test.dir}/WEB-INF/lib" file="${libs.home}/cactus-1.7.2.jar" overwrite="true" />
		<copy todir="${build.test.dir}/WEB-INF/lib" file="${libs.home}/aspectjrt-1.2.1.jar" overwrite="true" />
		<copy todir="${build.test.dir}/WEB-INF/lib" file="${libs.home}/junit-3.8.1.jar" overwrite="true" />
		<copy todir="${build.test.dir}/WEB-INF/lib" file="${libs.home}/commons-httpclient-2.0.2.jar" overwrite="true" />
		<copy todir="${build.test.dir}/WEB-INF/lib" file="${mscontrol.jar}" overwrite="true" />

		<jar basedir="${build.test.dir}" compress="true" jarfile="${dist.dir}/test.war" />
		<copy todir="${jboss.home}/server/default/deploy" file="${dist.dir}/test.war" overwrite="true" />
	</target>



	<target name="undeploy-tests">
		<delete verbose="true" file="${jboss.home}/server/default/deploy/test.war" />
	</target>








</project>

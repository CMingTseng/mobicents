<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<!-- chapter id nickname: sslb --><section id="sslb-MSS_Load_Balancer">
  <title>MSS Load Balancer</title>
<!--Removed star network image because it's also in the introductory section, and jdocbook can't shrink it or align the caption-->  <figure>
    <title>Star Cluster Topology.</title>
    <mediaobject id="sslb-mss-MSSSIPLoadBalancer-dia-StarNetworkTopology">
      <imageobject>
        <imagedata width="440" fileref="images/mss-MSSSIPLoadBalancer-dia-StarNetworkTopology.jpg" format="JPG"/>
      </imageobject>
    </mediaobject>
  </figure>
  <para>The Mobicents SIP load balancer is used to balance the load of SIP service requests and responses between nodes in a SIP Servlets Server cluster. Both MSS for JBoss and MSS for Tomcat servers can be used in conjunction with the SIP load balancer to increase the performance and availability of SIP services and applications. </para>
  <para>In terms of functionality, the Mobicents SIP load balancer is a simple proxy server that intelligently forwards SIP session requests and responses between User Agents (UAs) on a Wide Area Network (WAN), and SIP Servlets Server nodes, which are almost always located on a Local Area Network (LAN). All SIP requests and responses pass through the SIP load balancer.</para>
<!--<note>
  <title/>
  <para>Before reading further, you should ensure that you are familiar with the terminology employed across all sections of the Mobicents SIP Servlets High-Availability chapter: <xref
    linkend="section-Mobicents_SIP_Servlets_Server"/>.</para>
 </note>-->  <section id="sslb-SIP_Load_Balancing_Basics">
    <title>SIP Load Balancing Basics</title>
    <para>All User Agents send SIP messages, such as <literal>INVITE</literal> and  <literal>MESSAGE</literal>, to the same SIP URI (the IP address and port number of the SIP load balancer on the WAN). The load balancer then parses, alters, and forwards those messages to an available node in the cluster. If the message was sent as a part of an existing SIP session, it will be forwarded to the cluster node which processed that User Agent&apos;s original transaction request. </para>
    <para>The SIP Servlets Server that  receives the message  acts upon it and sends a response back to the SIP load balancer. The SIP load balancer reparses, alters and forwards the message back to the original User Agent. This entire proxying and provisioning process is carried out independent of  the User Agent, which is only concernd with the SIP service or application it is using.</para>
    <para>By using the load balancer, SIP traffic is balanced across a pool of available SIP Servlets Servers, increasing the overall throughput of the SIP service or application running on either individual nodes of the cluster.  In the case of   MSS for JBoss&apos;s <literal>&lt;/distributed&gt;</literal> capabilities, load balancing advantages are applied across the entire cluster.</para>
    <para>The SIP load balancer is also able to fail over requests mid-call from unavailable nodes to available ones, thus increasing the reliability of the SIP service or application.  The load balancer increases throughput and reliability by dynamically provisioning SIP service requests and responses across responsive nodes in a cluster.  This enables SIP applications to meet the real-time demand for SIP services.</para>
  </section>
  <section id="sslb-SIP_Servlets_Load_Balancer-Implementation">
    <title>Implementation of the Mobicents SIP Servlets Load Balancer</title>
    <para>Each individual Mobicents SIP Servlets Server in the cluster is responsible for contacting the SIP load balancer and relaying its health status and regular &quot;heartbeats&quot;.  <!--Issue #822 Editor Comment - would it be worthwhile describing heartbeats in more detail here?  Can you link to another area in the guide which discusses heartbeats in more detail (to avoid duplicating information)?--></para>
    <para>From these health status reports and heartbeats, the SIP load balancer creates and maintains a list of all available and healthy nodes in the cluster. The load balancer forwards SIP requests between these cluster nodes,  providing that the provisioning algorithm reports that each node is healthy and is still sending heartbeats. </para>
    <para>If an abnormality is detected, the  SIP load balancer removes the unhealthy or unresponsive node from the  list of available nodes. In addition, mid-session and mid-call messages are failed over to a healthy node. </para>
    <para>For more information about this aspect of the load balancer,  refer to <xref linkend="ssfjfs-SS_for_JBoss-Failover_Support"/>.</para>
    <para>The SIP load balancer first receives SIP requests from endpoints on a port that is specified in its Configuration Properties configuration file. The SIP load balancer, using a round-robin algorithm, then selects a node to which it forwards the SIP requests. The load balancer  forwards all same-session requests to the first node selected to initiate the session, providign that the  node is healthy and available.</para>
  </section>
  <section>
    <title>SIP Message Flow</title>
    <para>The Mobicents SIP load balancer appends  itself to the <literal>Via</literal> header of each request, so that returned responses are sent to the SIP Balancer before they are sent to the originating endpoint. </para>
    <para>The load balancer also adds itself to the path of subsequent requests by adding Record-Route headers. It can subsequenty handle mid-call failover by forwarding  requests to a different node in the cluster if the node that  originally handled the request   fails or becomes unavailable. The SIP load balancer  immediately fails over if it receives and unhealthy status, or irregular  heartbeats from a node.</para>
    <para>The SIP Servlets Server extends the <literal>SipStandardService</literal> class, which extends the Tomcat <literal>StandardService</literal> class.  The <literal>StandardService</literal> class is responsible for  implementing  the Tomcat <literal>Service</literal> interface. </para>
    <para>In  Tomcat architecture, a service is an intermediate component which resides inside a server,  and binds  one or more <literal>Connectors</literal> to exactly one <literal>Engine</literal>. When the service is started, the new <literal>SipStandardBalancerNodeService</literal> looks up its configuration information and obtains the SIP load balancer address.  The  heartbeat and health status is sent to the SIP load balancer address  to identify the service  as an available node of the cluster.</para>
    <para>The node parameters are configurable through their <literal>MBean</literal> interfaces; information on their configuration is provided in the following sections.</para>
    <para>In advanced configurations, it is possible to run more than one SIP load balancer.<!--Issue #822 Editor Comment - is there more information regarding how to enable this?--></para>
    <para><xref linkend="figure-mss-Basic_IP_and_Port_Cluster_Configuration"/> describes a basic  IP and Port Cluster Configuration.  In the diagram, the SIP load balancer is the server with the IP address of <literal>192.168.1.1</literal>.</para>
    <figure id="figure-mss-Basic_IP_and_Port_Cluster_Configuration">
      <title>Basic IP and Port Cluster Configuration</title>
      <mediaobject id="sslb-mss-MSSSIPLoadBalancer-dia-ClusterIPsAndPorts">
        <imageobject>
          <imagedata width="532" align="center" fileref="images/mss-MSSSIPLoadBalancer-dia-ClusterIPsAndPorts.jpg" format="JPG"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>
  <section id="sslb-binary-SIP_Load_Balancer-Installing_Configuring_and_Running">
    <title>SIP Load Balancer: Installing, Configuring and Running</title>
    <para>&nbsp;</para>
    <section id="sslb-binary-SIP_Load_Balancer-PreInstall_Requirements_and_Prerequisites">
      <title>Pre-Install Requirements and Prerequisites</title>
      <para>&nbsp;</para>
      <variablelist id="sslb-binary-SIP_Load_Balancer-Software_Prerequisites">
        <title>Software Prerequisites</title>
<!--Issue #822 Editor Comment - if I understand correctly, clustering won't work on Tomcat Servlet Containers.  If that is the case, it's probably easier to say:

1. Load balancing requires at least two Sip Servlet Servers.
2. Only SIP Servlet JBoss AS containers supported.  Tomcat Servlet Containers cannot be clustered.  

Or something similar to that.  Do you agree?-->        <varlistentry>
          <term>A SIP Servlet-Enabled JBoss Application Server or Tomcat Servlet Container</term>
          <listitem>
            <para>Running the SIP load balancer requires at least two SIP Servlets Servers as client nodes.  Therefore, before configuring the SIP load balancer, we should make sure we&apos;ve installed a SIP Servlets Server first. The Mobicents SIP load balancer will work with a SIP Servlets-enabled JBoss Application Server <emphasis>or</emphasis> a SIP Servlets-enabled Tomcat Container.</para>
            <para>However, if you intend to cluster multiple nodes for performance, reliability and failover purposes, then you will want to install and set up SIP Servlets-enabled JBoss AS nodes, because only they can be clustered, and not SIP-Servlet Tomcat Containers.</para>
            <itemizedlist>
              <listitem>
                <para>To install a SIP Servlet-enabled JBoss Application Server, follow the instructions here: <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running"/>.</para>
              </listitem>
              <listitem>
                <para>To install a SIP Servlet-enabled Tomcat Servlet Container, follow these instructions: <xref linkend="bssswticar-SIP_Servlets_Server_with_Tomcat-Installing_Configuring_and_Running"/>.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="sslb-binary-SIP_Load_Balancer-Downloading">
      <title>Downloading</title>
      <para>The load balancer is located in the <filename>sip-balancer</filename> top-level directory of the MSS distribution. You will find the following files in the directory:</para>
      <variablelist>
        <varlistentry>
          <term>SIP load balancer executable JAR file</term>
          <listitem>
            <para>This is the binary file with all dependencies</para>
          </listitem>
        </varlistentry>
        <varlistentry id="sslb-binary-SIP_Load_Balancer-Configuration_Properties_File">
          <term>SIP load balancer Configuration Properties file</term>
          <listitem>
            <para>This is the properties files with various settings</para>
          </listitem>
        </varlistentry>
<!-- Unnecessary, because the binary distribution has exact copies of these files
    <varlistentry>
     <term>Modified <filename>server.xml</filename> Configuration Files</term>
     <listitem>
      <para>You can use these sample modified <filename>server.xml</filename> configuration files to start either (or both) your SIP Servlet-customized <ulink
        url="http://code.google.com/p/mobicents/source/browse/trunk/servers/sip-servlets/sip-servlets-impl/docs/fialover-server-jboss.xml">JBoss</ulink> or <ulink
        url="http://code.google.com/p/mobicents/source/browse/trunk/servers/sip-servlets/sip-servlets-impl/docs/failover-server-tomcat-6.xml">Tomcat</ulink> container instances.</para>
     </listitem>
    </varlistentry>-->      </variablelist>
    </section>
    <section id="sslb-binary-SIP_Load_Balancer-Installing">
      <title>Installing</title>
      <para>The SIP load balancer executable JAR file can be placed anywhere in the file system.  It is recommended that the file is placed in the directory containing other JAR executables, so it can be easily located in the future.</para>
    </section>
    <section id="sslb-binary-SIP_Load_Balancer-Configuring">
      <title>Configuring</title>
      <para>Configuring the SIP load balancer and the two SIP Servlets-enabled Server nodes is described in <xref linkend="sslb-Configuring_the_SIP_Load_Balancer_and_Servlet_Server_Nodes"/>.</para>
      <procedure id="sslb-Configuring_the_SIP_Load_Balancer_and_Servlet_Server_Nodes">
        <title>Configuring the Mobicents SIP Load Balancer and Servlet Server Nodes</title>
        <step>
          <title>Configure lb.properties Configuration Properties File</title>
          <para>Configure the SIP load balancer&apos;s Configuration Properties file by substituting valid values for your personal setup.  <xref linkend="sslb-Complete_Sample_lb.properties_File"/>  shows a sample <filename>lb.properties</filename> file, with key element descriptions provided after the example.</para>
          <example id="sslb-Complete_Sample_lb.properties_File">
            <title>Complete Sample lb.properties File</title>
            <programlisting linenumbering="unnumbered"><![CDATA[
host=127.0.0.1
internalPort=5065
externalPort=5060
#JSIP stack configuration
javax.sip.STACK_NAME = SipBalancerForwarder
javax.sip.AUTOMATIC_DIALOG_SUPPORT = off
// You need 16 for logging traces. 32 for debug + traces.
// Your code will limp at 32 but it is best for debugging.
gov.nist.javax.sip.TRACE_LEVEL = 32
gov.nist.javax.sip.DEBUG_LOG = logs/sipbalancerforwarderdebug.txt
gov.nist.javax.sip.SERVER_LOG = logs/sipbalancerforwarder.xml
gov.nist.javax.sip.THREAD_POOL_SIZE = 64
gov.nist.javax.sip.REENTRANT_LISTENER = true
]]>
            </programlisting>
          </example>
          <variablelist>
            <varlistentry>
              <term>host</term>
              <listitem>
                <para>Local IP address, or interface, on which the SIP load balancer will listen for incoming requests.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>externalPort</term>
              <listitem>
                <para>Port on which the SIP load balancer listens for incoming requests from SIP User Agents.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>internalPort</term>
              <listitem>
                <para>Port on which the SIP load balancer forwards incoming requests to available, and healthy, SIP Servlets Server cluster nodes.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <note>
            <para>The remaining keys and properties in the configuration properties file can be used to tune the JAIN SIP stack, but are not specifically required for load balancing.  To assist with tuning, a comprehensive list of implementing classes for the SIP Stack is available from the <ulink url="http://snad.ncsl.nist.gov/proj/iptel/jain-sip-1.2/javadoc/javax/sip/SipStack.html">Interface SIP Stack page on nist.gov</ulink>.  For a comprehensive list of properties associated with the SIP Stack implementation, refer to <ulink url="http://snad.ncsl.nist.gov/proj/iptel/jain-sip-1.2/javadoc/gov/nist/javax/sip/SipStackImpl.html">Class SipStackImpl page on nist.gov</ulink>.</para>
          </note>
        </step>
        <step>
          <title>Configure the <filename>server.xml</filename> configuration files</title>
          <para>Ensure the following attributes are configured for the <literal>&lt;service&gt;</literal> element in <filename>server.xml</filename>.</para>
          <itemizedlist>
            <listitem>
              <para>The <literal>className</literal> attribute must have the value <literal>org.mobicents.servlet.sip.startup.failover.SipStandardBalancerNodeService</literal> instead of <literal>org.mobicents.servlet.sip.startup.SipStandardService.</literal></para>
            </listitem>
            <listitem>
              <para>The <literal>balancers</literal> attribute must contain a IP address (or list of addresses) of the SIP load balancer(s) to which heartbeat information will be sent.</para>
            </listitem>
          </itemizedlist>
        </step>
      </procedure>
      <note>
        <title>Configuration File Locations</title>
        <para>On MSS for Tomcat server installations, <filename>server.xml</filename> is located in <filename>&lt;install_directory&gt;/conf</filename>.</para>
        <para>On MSS for JBoss server installations, the default <filename>server.xml</filename> configuration file is located in <filename>server/default/deploy/jboss-web.deployer</filename>.</para>
        <para>On MSS for JBoss installations, with JBoss clustering support enabled, the &quot;all&quot; <filename>server.xml</filename> file must be configured.  It is located in <filename>server/all/deploy/jboss-web.deployer</filename>.</para>
        <para>To determine what profile should be altered for each MSS for JBoss installation, refer to <xref linkend="ssfjcs-SS_for_JBoss-Clustering_Support"/>.</para>
      </note>
      <formalpara>
        <title>Easy Node Configuration with JMX</title>
        <para>Both SIP Servlet-enabled JBoss and Tomcat have <acronym>JMX</acronym> (Java Management Extensions) interfaces that allow for easy server configuration. The JMX Console is available once the server has been started by navigating to <ulink url="http://localhost:8080/jmx-console/"/>.  </para>
      </formalpara>
      <para>Both the <literal>balancers</literal> and <literal>heartBeatInterval</literal> attribute values are available under <literal>serviceName=jboss.web,type=Service</literal> in the JMX Console.<variablelist>
          <varlistentry>
            <term>balancers</term>
            <listitem>
              <para>Host names of the SIP load balancer(s) with corresponding <literal>addBalancerAddress</literal> and <literal>removeBalancerAddress</literal> methods.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>heartBeatInterval</term>
            <listitem>
              <para>Interval at which each heartbeat is sent to the SIP load balancer(s).</para>
            </listitem>
          </varlistentry>
        </variablelist> </para>
      <section>
        <title>Converged Load Balancing</title>
        <para>The MSS SIP load balancer can work in concert  with HTTP load balancers such as  <literal>mod_jk</literal>. Whenever an HTTP session is bound to a particular node, an instruction is sent to the SIP load balancer to direct the SIP calls from the same application session to the same node. </para>
        <para>It is sufficient to configure <literal>mod_jk</literal> to work for HTTP in JBoss in order to enable cooperative load balancing. MSS will read the configuration and will use it without any extra configuration. You can read more about configuring <literal>mod_jk</literal> with JBoss in your JBoss Application Server documentation.</para>
      </section>
    </section>
    <section id="sslb-binary-SIP_Load_Balancer-Running">
      <title>Running</title>
      <procedure id="sslb-Running_the_SIP_Load_Balancer_and_Servlet_Server_Nodes">
        <title>Running the SIP Load Balancer and Servlet Server Nodes</title>
        <step>
          <title>Start the SIP Load Balancer</title>
          <para>Start the SIP load balancer, ensuring the Configuration Properties file (<filename>lb.properties</filename> in this example) is specified.  In the Linux terminal, or using the Windows Command Prompt, the SIP Load Balancer is started by issuing a command similar to this one:</para>
          <screen>java -jar sip-balancer-1.0-20080829.103906-21-jar-with-dependencies.jar lb-configuration.properties</screen>
          <para>Executing the SIP load balancer produces  output similar to the following example:</para>
          <screen>home]$ java -jar sip-balancer-1.0-20080829.103906-21-jar-with-dependencies.jar lb-configuration.properties 
Oct 21, 2008 1:10:58 AM org.mobicents.tools.sip.balancer.SIPBalancerForwarder start
INFO: Sip Balancer started on address 127.0.0.1, external port : 5060, port : 5065
Oct 21, 2008 1:10:59 AM org.mobicents.tools.sip.balancer.NodeRegisterImpl startServer
INFO: Node registry starting...
Oct 21, 2008 1:10:59 AM org.mobicents.tools.sip.balancer.NodeRegisterImpl startServer
INFO: Node expiration task created
Oct 21, 2008 1:10:59 AM org.mobicents.tools.sip.balancer.NodeRegisterImpl startServer
INFO: Node registry started</screen>
          <para>The output shows the IP address on which the SIP load balancer is listening, as well as the external and internal listener ports.</para>
        </step>
        <step>
          <title>Configure SIP Servlet Server Nodes</title>
          <para>SIP Servlets Server nodes can run on the JBoss Application Server, or the Tomcat Servlet Container.  The SIP Servlets Server binary distributions define the type of SIP Servlets Server nodes used, and should already be installed from <xref linkend="sslb-binary-SIP_Load_Balancer-Software_Prerequisites"/>.</para>
          <para>The <filename>server.xml</filename> file specifies the nodes used.  Because there is more then one client node specified, unique listener ports must be specified for each node to monitor HTTP and/or SIP connections.  <xref linkend="sslb-Changing_the_SIP_Connector_Port_for_Servlet_Server_Nodes"/> describes the affected element in the <filename>server.xml</filename> file.</para>
          <note>
            <title>Configuration File Location</title>
            <para>For the JBoss SIP Servlets Server binary distribution, <filename>server.xml</filename> is located in the <filename>&lt;install_directory&gt;/server/all/deploy/jboss-web.deployer/</filename> directory.  For the Tomcat binary distribution, <filename>server.xml</filename> is located in the <filename>&lt;install_directory&gt;/conf/</filename> directory.</para>
          </note>
          <example id="sslb-Changing_the_SIP_Connector_Port_for_Servlet_Server_Nodes">
            <title>Changing the SIP Connector Port for Servlet Server Nodes in server.xml</title>
            <programlisting linenumbering="unnumbered" role="XML">
<![CDATA[<!-- Define a SIP Connector -->
<Connector port="5080"]]>
            </programlisting>
          </example>
        </step>
        <step>
          <title>Start Load Balancer Client Nodes</title>
          <para>Start all SIP load balancer client nodes.</para>
<!--Issue #822 Editor Comment - What command would you execute to start all the client nodes?-->        </step>
      </procedure>
    </section>
<!--<section
   id="sslb-binary-SIP_Load_Balancer-Using">
   <title>Using</title>
   <para>&nbsp;</para>
  </section-->    <section id="sslb-binary-SIP_Load_Balancer-Testing">
      <title>Testing</title>
      <para>To test load balancing, the same application must be deployed manually on each node.  Two SIP Softphones must be installed.</para>
      <procedure>
        <title>Testing Load Balancing</title>
        <step>
          <title>Deploy an Application</title>
          <para>Ensure that for each node, the DAR file location is specified in the <filename>server.xml</filename> file.</para>
          <para>Deploy the Location service manually on both nodes.</para>
        </step>
        <step>
          <title>Start the &quot;Sender&quot; SIP softphone</title>
          <para>Start a SIP softphone client with the SIP address of <userinput>sip:sender@sip-servlets-com</userinput>, listening on port 5055.  The outbound proxy must be specified as the sip-balancer (http://127.0.0.1:5060)</para>
        </step>
        <step>
          <title>Start the &quot;Receiver&quot; SIP softphone</title>
          <para>Start a SIP softphone client with the SIP address of <userinput>sip:receiver-failover@sip-servlets-com</userinput>, listening on port 5090.</para>
        </step>
        <step>
          <title>Initiate two calls from &quot;Sender&quot; SIP softphone</title>
          <para>Initiate one call from <userinput>sip:sender@sip-servlets-com</userinput> to <userinput>sip:receiver-failover@sip-servlets-com</userinput>.  Tear down the call once completed.</para>
          <para>Initiate a second call using the same SIP address, and tear down the call once completed.  Notice that the call is handled by the second node.</para>
        </step>
      </procedure>
    </section>
    <section id="sslb-binary-SIP_Load_Balancer-Stopping">
      <title>Stopping</title>
      <para>Assuming that you started the JBoss Application Server as a foreground process in the Linux terminal, the easiest way to stop it is by pressing the <keycombo action="simul">
          <keycap>Ctrl</keycap>
          <keycap>C</keycap>
        </keycombo> key combination in the same terminal in which you started it.</para>
      <para>This should produce similar output to the following:</para>
      <screen>^COct 21, 2008 1:11:57 AM org.mobicents.tools.sip.balancer.SipBalancerShutdownHook run
INFO: Stopping the sip forwarder</screen>
    </section>
    <section id="sslb-binary-SIP_Load_Balancer-Uninstalling">
      <title>Uninstalling</title>
      <para>To uninstall the SIP load balancer,  delete the JAR file you installed.</para>
    </section>
  </section>
  <section>
    <title>IP Load Balancing</title>
    <section>
      <title>IP Load Balancers</title>
      <para>An IP load-balancer is a network appliance that distributes traffic to an application server (or actual servers) using a  load-balancing algorithm.  IP load-balancing is often used when the other load-balancers&apos; capacity is exceeded and can not scale further without hardware upgrades.</para>
      <para>Routing decisions are made  based on OSI Layer 2, 3 or 4 data. This type of load balancer only examines low-level TCP, UDP or ethernet packet structures including MAC addresses, IP addresses, ports, and protocol types (TCP or UDP or other). </para>
      <para>An IP  load balancer never reads the payload of the TCP/IP packets and therefore never parses SIP or HTTP (or any protocol above OSI Layer 4).  Because an IP load balancing device is not SIP or HTTP aware in any way, it is much more performant than <literal>mod_jk</literal> or the MSS SIP load-balancer.

</para>
    </section>
    <section>
      <title>Technical overview</title>
      <para>In its simplest form, the IP load-balancer usually &quot;owns&quot; the public-facing IP address (known as a VIP). <!--Issue #822 Editor Comment - VIP = Virtual IP?-->  The traffic is routed to actual servers in it&apos;s private network similar to NAT. It is also possible to not change the IP address and just work on the MAC address by assuming that all actual  servers are configured to accept packets for the VIP address. The features offered by the IP load balancer depend largely on the vendor. </para>
      <para>Some examples of  Linux-based  software load balancers include <ulink url="http://www.redhat.com/cluster_suite/">Red Hat Cluster Suite (RHCS)</ulink> and <ulink url="http://www.linuxvirtualserver.org/">Linux Virtual Server (LVS)</ulink>. There are many hardware vendors as well.</para>
      <para>One main drawback relating to  IP load balancers is that they can not make routing decisions based on SIP messages and (with some exceptions) they can not work cooperatively with HTTP or other load balancers.</para>
    </section>
    <section>
      <title>Configuring MSS Cluster with IP Load Balancers</title>
<!--Issue #822 Editor Comment - This paragraph block needs to be converted into a <procedure>.-->      <para>First you need to remove the SIP load balancers from any configuration in MSS. In particular the <literal>balancers</literal> attribute in <filename>server.xml</filename>.   and edit the jboss.web  engine tag. You should remove the balancers attribute from the Service tag of jboss.web service. This simply removes the default load balancer from the system and the traffic bypasses the SIP load-balancer. Next you must configure MSS to put the IP load balancer IP address in the <literal>Via</literal>, <literal>Contact</literal> and other system headers where the IP address of the server machine is required. This will ensure that any responses or subsequent SIP requests follow the same path, but always hit the load balancer instead of particular cluster node that may fail.  To specify the IP load balancer address in MSS your should edit this file <filename>JBOSS_HOME/server/all/deploy/jboss-web.deployer/server.xml</filename> and specify <literal>staticServerAddress</literal> such as: </para>
      <programlisting>&lt;Connector port=&quot;5080&quot; 
     ipAddress = &quot;${jboss.bind.address}&quot;
     ...
staticServerAddress=&quot;122.122.122.122&quot; staticServerPort=&quot;44&quot; 
useStaticAddress=&quot;true&quot;/&gt;
</programlisting>
      <note>
        <para>Depending on your reliability requirements you can omit the configation described in this section and let the servers use their own IP address in the SIP messages.</para>
      </note>
    </section>
  </section>
</section>

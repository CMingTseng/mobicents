import java.io.File;
import javax.management.ObjectName;
import javax.management.MBeanServer;
import javax.slee.management.DeployableUnitID;
import org.jboss.mx.util.MBeanProxyExt;
import org.jboss.system.ServiceMBeanSupport;
import org.jboss.util.StringPropertyReplacer;
import javax.slee.management.DeploymentMBean;
import javax.slee.management.ServiceManagementMBean;
import org.mobicents.slee.container.management.jmx.ResourceAdaptorMBean;
import org.mobicents.slee.container.management.jmx.SleeManagementMBeanImplMBean;
import org.mobicents.slee.container.management.ComponentKey;
import org.mobicents.slee.container.management.ResourceAdaptorIDImpl;
import org.mobicents.slee.container.management.ServiceIDImpl;

private String sleeManagementMBeanName = "slee:service=SleeManagement";

String raTypeURL = "${jboss.server.home.url}/deploy-mobicents/smpp-ratype-DU.jar";
String raURL = "${jboss.server.home.url}/deploy-mobicents/smpp-ra-DU.jar";
String raName = "0020";
//String ggsnURL = "${jboss.server.home.url}/deploy-mobicents/ggsn-radius-service.jar";

ResourceAdaptorIDImpl raID = new ResourceAdaptorIDImpl("SMPPRA", "org.mobicents", "3.4");
DeployableUnitID raTypeDID = null;
DeployableUnitID raDID = null;
//DeployableUnitID ggsnDID = null;

/**
 * Install and activate components in the correct order
 */
void start() {

  try {   
   ctx.log.info("Starting deployment of SMPP resource adaptor...");

   raTypeDID = sleeDeploymentMBean.install(StringPropertyReplacer.replaceProperties(raTypeURL)); 
   raDID = sleeDeploymentMBean.install(StringPropertyReplacer.replaceProperties(raURL)); 

   ctx.log.info("Create resource adaptor entity " + raName);
   resourceAdaptorMBean.createResourceAdaptorEntity(raID, raName, null);

   ctx.log.info("Activate resource adaptor entity " + raName);
   resourceAdaptorMBean.activateResourceAdaptorEntity(raName);

   ctx.log.info("Create entity link " + raName);
   resourceAdaptorMBean.createEntityLink(raName, raName);


  } catch (Exception e) {
    ctx.log.info("Exception while starting deployment of SMPP resource adaptor!", e);
  }
}

/**
 * Deactivate and uninstall components in the reverse order of start()
 */
void stop() {
  try {   

   ctx.log.info("Remove entity link " + raName);
   resourceAdaptorMBean.removeEntityLink(raName);

   ctx.log.info("Deactivate entity link " + raName);
   resourceAdaptorMBean.deactivateResourceAdaptorEntity(raName);

   ctx.log.info("Remove resource adaptor entity " + raName);
   resourceAdaptorMBean.removeResourceAdaptorEntity(raName);

   ctx.log.info("Uninstall resource adaptor " + raDID);
   sleeDeploymentMBean.uninstall(raDID); 

   ctx.log.info("Uninstall resource adaptor type " + raTypeDID);
   sleeDeploymentMBean.uninstall(raTypeDID); 

   ctx.log.info("Stopped successfully SMPP resource adaptor!");

  } catch (Exception e) {
    ctx.log.info("Exception while starting deployment of SMPP resource adaptor!", e);
  }
}


/*************************************************************
 * The rest of the script should be rarely modified.
 *************************************************************/


void create()
{
     ctx.log.debug("Creating SIP services deployer...");
     
     server = global.ctx.getServer();

     ObjectName sleeMgmt = new ObjectName(sleeManagementMBeanName);

     sleeManagementMBean = (SleeManagementMBeanImplMBean)
      	MBeanProxyExt.create(SleeManagementMBeanImplMBean.class,
   	         	sleeMgmt, server);

      sleeDeploymentMBean = (DeploymentMBean)
      	 MBeanProxyExt.create(DeploymentMBean.class,
      	         	sleeManagementMBean.getDeploymentMBean(), server);
      
      resourceAdaptorMBean  = (ResourceAdaptorMBean)
         MBeanProxyExt.create(ResourceAdaptorMBean.class,
                 sleeManagementMBean.getResourceAdaptorMBean(), server);

     ctx.log.debug("Creating SIP services deployer...- resourceAdaptorMBean " + resourceAdaptorMBean);
      
      serviceManagementMBean = (ServiceManagementMBean)
         MBeanProxyExt.create(ServiceManagementMBean.class,
                 sleeManagementMBean.getServiceManagementMBean(), server);

     ctx.log.info("Created successfully SIP services deployer!");
}

void destroy()
{
}


   /**
    * Returns the deployed SLEE jars.
    *
    */
   public Iterator getDeployedApplications()
   {
      return deployments.values().iterator();
   }

void setCtx(ServiceMBeanSupport wrapper)
{
   global.ctx = wrapper;
   System.out.println("setCtx: "+ctx);
}


/**
 * script variables
 */

ServiceMBeanSupport ctx = null;

/** reference to the standard SLEE deployment MBean */
private DeploymentMBean sleeDeploymentMBean;

/** reference to the SLEE Resource Adaptor MBean */
private ResourceAdaptorMBean  resourceAdaptorMBean;

/** A map of current deployments. */
private ArrayList deployments = new ArrayList();

/** reference to the Mobicents SLEE Management MBean */
private SleeManagementMBeanImplMBean sleeManagementMBean;

private ServiceManagementMBean serviceManagementMBean;

MBeanServer server;


package org.mobicents.servlet.sip.core.session;


import java.util.ArrayList;
import java.util.Collection;
import java.util.EventListener;
import java.util.Iterator;

import javax.servlet.ServletContextListener;
import javax.servlet.sip.*;

import org.apache.log4j.Logger;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : sip-servlets
//  @ File Name : SipListenersHolder.java
//  @ Date : 2007-09-27
//  @ Author : 
//
//




public class SipListenersHolder {
	
	private ArrayList<SipApplicationSessionAttributeListener> sipApplicationSessionAttributeListeners;
	private ArrayList<SipApplicationSessionBindingListener> sipApplicationSessionBindingListeners;
	private ArrayList<SipApplicationSessionListener> sipApplicationSessionListeners;
	private ArrayList<SipSessionActivationListener> sipSessionActivationListeners;
	private ArrayList<SipSessionAttributeListener> sipSessionAttributeListeners;
	private ArrayList<SipSessionBindingListener> sipSessionBindingListeners;
	private ArrayList<SipSessionListener> sipSessionListeners;
	private ArrayList<String> sipServletsWithListeners;
	private ArrayList<SipErrorListener> sipErrorListeners;
	private ArrayList<ServletContextListener> servletContextListeners;
	
	
	private TimerListener timerListener;

	
	
	private static Logger logger=Logger.getLogger(SipListenersHolder.class);
	
	
	public SipListenersHolder(Collection<String> listenerList,
			ClassLoader classLoader)
	{
		
		// Instantiate all the listeners
		Iterator<String> itr = listenerList.iterator();
		while (itr.hasNext()) {
			String className = (String) itr.next();
			try {
				EventListener listener = (EventListener) classLoader.loadClass(
						className).newInstance();

				if (listener instanceof SipServlet) {
					sipServletsWithListeners.add(className);
					continue;
				}
				
				addListener(listener);
				
			

			} catch (Exception e) {
				logger.fatal("Cannot instantiate listener class " + className,
						e);
			}
		}
	}
	
	private void addListener(EventListener listener) {
		
		if(listener instanceof SipApplicationSessionAttributeListener)
		{
			this.addListener((SipApplicationSessionAttributeListener)listener);
		}
		
		
		if(listener instanceof SipApplicationSessionBindingListener)
		{
			this.addListener((SipApplicationSessionBindingListener)listener);
		}
		
		if(listener instanceof SipApplicationSessionListener)
		{
			this.addListener((SipApplicationSessionListener)listener);
		}
		
		if(listener instanceof SipSessionActivationListener)
		{
			this.addListener((SipSessionActivationListener)listener);
		}
		
		if(listener instanceof SipSessionAttributeListener)
		{
			this.addListener((SipSessionAttributeListener)listener);
		}
		
		if(listener instanceof SipSessionBindingListener)
		{
			this.addListener((SipSessionBindingListener)listener);
		}
		
		if(listener instanceof SipSessionListener)
		{
			this.addListener((SipSessionListener)listener);
		}
		
	
		
		if(listener instanceof SipErrorListener)
		{
			this.addListener((SipErrorListener)listener);
		}
		
		if(listener instanceof ServletContextListener)
		{
			this.addListener((ServletContextListener)listener);
		}
		
		
		throw new IllegalArgumentException("Wrong type of LISTENER!!!["+listener+"]");
	}

	//this.sipApplicationSessionAttributeListeners.clear();
	public void addListener(SipApplicationSessionAttributeListener listener)
	{
		this.sipApplicationSessionAttributeListeners.add(listener);
	}
	//this.sipApplicationSessionBindingListeners.clear();
	public void addListener(SipApplicationSessionBindingListener listener)
	{
		this.sipApplicationSessionBindingListeners.add(listener);
	}
	//this.sipApplicationSessionListeners.clear();
	public void addListener(SipApplicationSessionListener listener)
	{
		this.sipApplicationSessionListeners.add(listener);
	}
	//this.sipSessionActivationListeners.clear();
	public void addListener(SipSessionActivationListener listener)
	{
		this.sipSessionActivationListeners.add(listener);
	}
	//this.sipSessionAttributeListeners.clear();
	public void addListener(SipSessionAttributeListener listener)
	{
		this.sipSessionAttributeListeners.add(listener);
	}
	//this.sipSessionBindingListeners.clear();
	public void addListener(SipSessionBindingListener listener)
	{
		this.sipSessionBindingListeners.add(listener);
	}
	//this.sipSessionListeners.clear();
	public void addListener(SipSessionListener listener)
	{
		this.sipSessionListeners.add(listener);
	}

	//this.sipErrorListeners.clear();
	public void addListener(SipErrorListener listener)
	{
		this.sipErrorListeners.add(listener);
	}
	//this.servletContextListeners.clear();
	public void addListener(ServletContextListener listener)
	{
		this.servletContextListeners.add(listener);
	}
	
	

	





	public ArrayList<SipApplicationSessionAttributeListener> getSipApplicationSessionAttributeListeners() {
		return sipApplicationSessionAttributeListeners;
	}

	public ArrayList<SipApplicationSessionBindingListener> getSipApplicationSessionBindingListeners() {
		return sipApplicationSessionBindingListeners;
	}

	public ArrayList<SipApplicationSessionListener> getSipApplicationSessionListeners() {
		return sipApplicationSessionListeners;
	}

	public ArrayList<SipSessionActivationListener> getSipSessionActivationListeners() {
		return sipSessionActivationListeners;
	}

	public ArrayList<SipSessionAttributeListener> getSipSessionAttributeListeners() {
		return sipSessionAttributeListeners;
	}

	public ArrayList<SipSessionBindingListener> getSipSessionBindingListeners() {
		return sipSessionBindingListeners;
	}

	public ArrayList<SipSessionListener> getSipSessionListeners() {
		return sipSessionListeners;
	}

	public ArrayList<String> getSipServletsWithListeners() {
		return sipServletsWithListeners;
	}

	public ArrayList<SipErrorListener> getSipErrorListeners() {
		return sipErrorListeners;
	}

	public ArrayList<ServletContextListener> getServletContextListeners() {
		return servletContextListeners;
	}

	public TimerListener getTimerListener() {
		return timerListener;
	}

	/**
	 * Empty vectors to allow garbage collection
	 */
	public void clean() {
		//TODO: This will be different since we propably will need to remove also 
		//all other listeners from Session for instance

		this.sipApplicationSessionAttributeListeners.clear();
		this.sipApplicationSessionBindingListeners.clear();
		this.sipApplicationSessionListeners.clear();
		this.sipSessionActivationListeners.clear();
		this.sipSessionAttributeListeners.clear();
		this.sipSessionBindingListeners.clear();
		this.sipSessionListeners.clear();
		this.sipServletsWithListeners.clear();
		this.sipErrorListeners.clear();
		this.servletContextListeners.clear();
		
		this.timerListener=null;
		
		
	}
	
	
	
}

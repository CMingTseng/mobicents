<?xml version="1.0" encoding="utf-8"?>
<project name="media.server.release" default="release" basedir=".">

	<property name="release.version" value="2.0.0.BETA3-SNAPSHOT" />

	<property name="release.dir" location="${ant.file.media.server.release}/../target/release" />
	<property name="release.dir.standalone" location="${ant.file.media.server.release}/../standalone" />
	<property name="release.dir.all" location="${ant.file.media.server.release}/../all" />

	<property name="jboss.version" value="5.1.0.GA" />
	<property name="jboss.config" value="default" />
	<property name="jboss.name" value="jboss-${jboss.version}" />
	<property name="jboss.home.relative.path" value="jboss-${jboss.version}/" />
	<property name="jboss.home" value="${release.dir.all}/${jboss.home.relative.path}" />
	<property name="jboss.distro.zip.path" value="jboss-${jboss.version}.zip" />
	<property name="jboss.download.url" value="http://downloads.sourceforge.net/jboss/jboss-${jboss.version}.zip" />

	<property name="mobicents.jainslee.version" value="1.2.5.GA" />
	<property name="mobicents.jainslee.zip.path" value="mobicents-jainslee-server-${mobicents.jainslee.version}.zip" />
	<property name="mobicents.jainslee.download.url" value="http://downloads.sourceforge.net/mobicents/mobicents-jainslee-server-${mobicents.jainslee.version}-jboss-${jboss.version}.zip" />

	<property name="core.location" location="${ant.file.media.server.release}/../../core" />
	<!-- property name="docs.stage.dir" location="${ant.file.mobicents.release}/../documentation" / -->
	<property name="docs.stage.dir" location="${core.location}/docs" />
	<property name="test.suite.location" location="${ant.file.media.server.release}/../../test-suite" />

	<condition property="mvn.executable" value="${sys.M2_HOME}\bin\mvn.bat" else="mvn">
		<os family="windows" />
	</condition>

	<condition property="default.jboss.config">
		<equals arg1="${jboss.config}" arg2="default" />
	</condition>

	<condition property="all.jboss.config">
		<equals arg1="${jboss.config}" arg2="all" />
	</condition>

	<!-- Media Server Checkout ############################################# -->

	<condition property="mobicents.media.server.checked.out">
		<and>
			<available file="${ant.file.media.server.release}/../target/servers/media/core/.svn/entries" />
			<available file="${ant.file.media.server.release}/../target/servers/media/controllers/.svn/entries" />
			<available file="${ant.file.media.server.release}/../target/servers/media/examples/.svn/entries" />
		</and>
	</condition>
	<target name="get-custom-media-server" depends="checkout-media-server,update-media-server" />

	<target name="checkout-media-server" unless="mobicents.media.server.checked.out">
		<echo>Checking out Mobicents Media Server</echo>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../">
			<arg line="-f internal-components-checkout.xml validate -P checkout" />
		</exec>
	</target>

	<target name="update-media-server">
		<echo>Updating Mobicents Media Server</echo>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../">
			<arg line="-f internal-components-checkout.xml validate -P update" />
		</exec>
	</target>

	<!-- Fetch and build documentation #################################### -->

	<condition property="media.docs.checked.out">
		<and>
			<!-- available file="${docs.stage.dir}/common/.svn/entries" />
			<available file="${docs.stage.dir}/media/.svn/entries" / -->
			<available file="${docs.stage.dir}/.svn/entries" />
		</and>
	</condition>
	<!-- target name="get-documentation" depends="checkout-documentation,update-documentation" / -->
	<target name="get-documentation" />

	<target name="checkout-documentation" unless="media.docs.checked.out">
		<echo>Checking out documentation</echo>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../">
			<arg line="-f documentation-checkout.xml validate -P checkout" />
		</exec>
	</target>

	<target name="update-documentation">
		<echo>Updating documentation</echo>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../">
			<arg line="-f documentation-checkout.xml validate -P update" />
		</exec>
	</target>

	<!-- target name="build-documentation" depends="get-documentation" -->
	<target name="build-documentation">
		<echo>Building documentation</echo>

		<exec executable="${mvn.executable}" dir="${docs.stage.dir}/">
			<arg line="clean compile" />
		</exec>
		<copy overwrite="true" todir="${documentation.target.dir}">
			<fileset dir="${docs.stage.dir}/target/docbook/publish/en-US/" />
		</copy>

	</target>

	<!-- Get and prepare JBoss AS ########################################## -->

	<available file="${ant.file.media.server.release}/../${jboss.distro.zip.path}" property="got.jboss" />
	<target name="get-jboss" unless="got.jboss">
		<echo>Downloading JBoss AS</echo>
		<get dest="${ant.file.media.server.release}/../${jboss.distro.zip.path}" src="${jboss.download.url}" />
	</target>

	<target name="unzip-jboss">
		<delete dir="${jboss.home}" failonerror="true" />
		<unzip src="${jboss.distro.zip.path}" dest="${jboss.home}/.." />
		<!--antcall target="cleanup-jboss" /-->
	</target>

	<target name="cleanup-jboss">
		<antcall target="delete-all-jboss-config" />
		<antcall target="delete-default-jboss-config" />
		<delete dir="${jboss.home}/server/minimal" />
		<delete dir="${jboss.home}/server/standard" />
		<delete dir="${jboss.home}/server/web" />
	</target>
	<target name="delete-all-jboss-config" unless="all.jboss.config">
		<delete dir="${jboss.home}/server/all" />
	</target>
	<target name="delete-default-jboss-config" unless="default.jboss.config">
		<delete dir="${jboss.home}/server/default" />
	</target>

	<!-- Release Mobicents-all ############################################# -->

	<target name="release-mobicents-all" depends="">
		<echo>${jboss.home}</echo>
		<!-- installs MMS into JBoss AS -->
		<!--exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../../core">
			<arg line="clean install -P set-svn-revision -Djboss.home=${jboss.home} -DJBOSS_HOME=${jboss.home} -Dnode=${jboss.config}" />
		</exec>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../../controllers/mms-console">
			<arg line="clean install -P set-svn-revision -Djboss.home=${jboss.home} -DJBOSS_HOME=${jboss.home} -Dnode=${jboss.config}" />
		</exec-->
		<!-- builds and moves media and mgcp RAs to resources -->
		<!--exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../../controllers/mgcp/mgcp-ra">
			<arg line="clean install -P set-svn-revision -Djboss.home=${release.dir}/tmp" />
		</exec>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../../controllers/mgcp/mgcp-ra">
			<arg line="-o install -P set-svn-revision,release -Djboss.home=${release.dir}/tmp -Djboss.path=../../${jboss.home.relative.path} -Drelease.dir=${release.dir}/resources/mgcp " />
		</exec>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../../controllers/msc">
			<arg line="clean install -P set-svn-revision -Djboss.home=${release.dir}/tmp" />
		</exec>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../../controllers/msc">
			<arg line="-o install -P set-svn-revision,release -Djboss.home=${release.dir}/tmp -Djboss.path=../../${jboss.home.relative.path} -Drelease.dir=${release.dir}/resources/media" />
		</exec-->
		<!-- builds and moves call-controller2, converged-demo and mms-demo to examples -->
		<!--exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../../examples/call-controller2">
			<arg line="clean install -P set-svn-revision -Djboss.home=${release.dir}/tmp" />
		</exec>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../../examples/call-controller2">
			<arg line="-o install -P set-svn-revision,release -Djboss.home=${release.dir}/tmp -Djboss.path=../../${jboss.home.relative.path} -Drelease.dir=${release.dir}/examples/call-controller2" />
		</exec>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../../examples/converged-demo">
			<arg line="clean install -P set-svn-revision -Djboss.home=${release.dir}/tmp" />
		</exec>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../../examples/converged-demo">
			<arg line="-o install -P set-svn-revision,release -Djboss.home=${release.dir}/tmp -Djboss.path=../../${jboss.home.relative.path} -Drelease.dir=${release.dir}/examples/converged-demo" />
		</exec>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../../examples/mms-demo">
			<arg line="clean install -P set-svn-revision -Djboss.home=${release.dir}/tmp" />
		</exec>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../../examples/mms-demo">
			<arg line="-o install -P set-svn-revision,release -Djboss.home=${release.dir}/tmp -Djboss.path=../../${jboss.home.relative.path} -Drelease.dir=${release.dir}/examples/mms-demo" />
		</exec>
		<delete dir="${release.dir}/tmp" /-->
	</target>

	<!-- Release MMS Standalone ############################################ -->

	<target name="release-standalone">
		<delete dir="${release.dir.standalone}" />

		<exec executable="${mvn.executable}" dir="${core.location}">
			<arg line="clean install -P set-svn-revision,standalone" />
		</exec>
		<copy overwrite="true" todir="${release.dir.standalone}">
			<fileset file="${core.location}/server-standalone/target/mms-standalone-pojo.dir/**" />
		</copy>

		<exec executable="${mvn.executable}" dir="${test.suite.location}">
			<arg line="clean install -P set-svn-revision,release -Ddest.dir=${release.dir.standalone}/test" />
		</exec>

		<antcall target="build-documentation">
			<param name="documentation.target.dir" location="${release.dir.standalone}/documentation" />
		</antcall>

		<copy overwrite="true" file="${ant.file.media.server.release}/../release-standalone-README.txt" tofile="${release.dir.standalone}/README.txt" />

		<zip destfile="${ant.file.media.server.release}/../${zip.filename}" basedir="${release.dir.standalone}" />
	</target>

	<!-- Release MMS All ################################################### -->

	<target name="release-all">
		<delete dir="${release.dir.all}" />

		<antcall target="get-jboss" />
		<antcall target="unzip-jboss" />

		<exec executable="${mvn.executable}" dir="${core.location}">
			<arg line="clean install -P set-svn-revision,jboss-5 -Dmaven.test.skip=true -Djboss.home=${jboss.home} -Dnode=${jboss.config}" />
		</exec>

		<exec executable="${mvn.executable}" dir="${test.suite.location}">
			<arg line="clean install -P set-svn-revision,release -Ddest.dir=${release.dir.all}/test" />
		</exec>
		<!--copy overwrite="true" todir="${release.dir.all}/test">
			<fileset file="${test.suite.location}/target/*.jar" />
		</copy-->

		<antcall target="build-documentation">
			<param name="documentation.target.dir" location="${release.dir.all}/documentation" />
		</antcall>
		<copy overwrite="true" file="${ant.file.media.server.release}/../release-all-README.txt" tofile="${release.dir.all}/README.txt" />

		<fixcrlf srcdir="${jboss.home}/bin" includes="*.sh" eol="lf" eof="remove" />
		<zip destfile="${ant.file.media.server.release}/../${zip.filename}" filesonly="false">
			<zipfileset dir="${jboss.home}/bin" filemode="755" prefix="jboss-${jboss.version}/bin">
				<include name="*.sh" />
			</zipfileset>
			<zipfileset dir="${jboss.home}/bin" prefix="jboss-${jboss.version}/bin">
				<exclude name="*.sh" />
			</zipfileset>
			<zipfileset dir="${release.dir.all}" prefix="" excludes="**/bin/** **/server/*/data/** **/server/*/log/** **/server/*/tmp/** **/server/*/work/** **/server/tmp/**" />
		</zip>
	</target>

	<!-- Release MMS src ################################################### -->

	<target name="set-src-excludes">
		<defaultexcludes add="**/target/**" />
		<defaultexcludes add="**/docs/**" />
		<defaultexcludes add="**/legacy/**" />
		<defaultexcludes add="**/release/**" />
		<defaultexcludes add="**/logs/**" />
		<defaultexcludes add="**/tests/**" />
		<defaultexcludes add="**/${*}/**" />
		<defaultexcludes add="**/*JBOSS_HOME*/**" />
		<defaultexcludes add="**/*CATALINA_HOME*/**" />
		<defaultexcludes add="**/.gwt-cache/**" />
		<defaultexcludes add="**/.settings/**" />
		<defaultexcludes add="**/.project" />
		<defaultexcludes add="**/.classpath" />
		<defaultexcludes add="**/*.class" echo="true" />
	</target>

	<target name="release-src" depends="set-src-excludes">
		<echo>Building src-zip from ${core.location} and ${test.suite.location}</echo>
		<copy todir="${release.dir}/src/mobicents/servers/media/core" includeEmptyDirs="false">
			<fileset dir="${core.location}" />
		</copy>
		<copy todir="${release.dir}/src/mobicents/servers/media/test-suite" includeEmptyDirs="false">
			<fileset dir="${test.suite.location}" />
		</copy>
		<zip destfile="${ant.file.media.server.release}/../${zip.filename}" basedir="${release.dir}/src" />
		<delete dir="${release.dir}/src" />

		<defaultexcludes default="true" />
	</target>

	<!-- Release MMS (Everything) ########################################## -->

	<target name="release">
		<tstamp>
			<format property="time.stamp" pattern="yyMMddHHmm" />
		</tstamp>
		<delete dir="." includes="mms-*${release.version}-*.zip" />

		<antcall target="release-standalone">
			<param name="zip.filename" value="mms-standalone-${release.version}-${time.stamp}.zip" />
		</antcall>
		<antcall target="release-all">
			<param name="zip.filename" value="mms-${jboss.name}-${release.version}-${time.stamp}.zip" />
		</antcall>
		<antcall target="release-src">
			<param name="zip.filename" value="mms-${release.version}-${time.stamp}-src.zip" />
			<param name="src.location" value="${ant.file.media.server.release}/../../" />
		</antcall>

		<antcall target="clean" />
	</target>

	<!-- Release MMS (Everything) from tagged content ###################### -->

	<target name="release-custom" depends="get-custom-media-server">
		<tstamp>
			<format property="time.stamp" pattern="yyMMddHHmm" />
		</tstamp>
		<delete dir="." includes="mms-*${release.version}-*.zip" />

		<antcall target="release-standalone">
			<param name="zip.filename" value="mms-standalone-${release.version}-${time.stamp}.zip" />
			<param name="core.location" location="${ant.file.media.server.release}/../target/servers/media/core" />
			<param name="test.suite.location" location="${ant.file.media.server.release}/../target/servers/media/test-suite" />

			<param name="release.dir.core" location="${ant.file.media.server.release}/../target/servers/media/release/core" />
			<param name="release.dir.all" location="${ant.file.media.server.release}/../target/servers/media/release/all" />
			<param name="docs.stage.dir" location="${ant.file.media.server.release}/../target/servers/media/core/docs" />			
		</antcall>

		<antcall target="release-all">
			<param name="zip.filename" value="mms-${jboss.name}-${release.version}-${time.stamp}.zip" />
			<param name="core.location" location="${ant.file.media.server.release}/../target/servers/media/core" />
			<param name="test.suite.location" location="${ant.file.media.server.release}/../target/servers/media/test-suite" />

			<param name="release.dir.standalone" location="${ant.file.media.server.release}/../target/servers/media/release/standalone" />
			<param name="release.dir.all" location="${ant.file.media.server.release}/../target/servers/media/release/all" />
			<param name="jboss.home" location="${ant.file.media.server.release}/../target/servers/media/release/all/${jboss.home.relative.path}/" />
			<param name="docs.stage.dir" location="${ant.file.media.server.release}/../target/servers/media/core/docs" />			
		</antcall>

		<antcall target="release-src">
			<param name="zip.filename" value="mms-${release.version}-${time.stamp}-src.zip" />
			<param name="src.location" location="${ant.file.media.server.release}/../target/servers/media/" />
		</antcall>

		<antcall target="clean">
			<param name="release.dir.standalone" location="${ant.file.media.server.release}/../target/servers/media/release/standalone" />
			<param name="release.dir.all" location="${ant.file.media.server.release}/../target/servers/media/release/all" />
		</antcall>
	</target>

	<!-- Clean ############################################################ -->

	<target name="clean">
		<delete dir="${release.dir}" />
		<delete dir="${release.dir.standalone}" />
		<delete dir="${release.dir.all}" />
		<!-- delete dir="${docs.stage.dir}" / -->
	</target>

</project>

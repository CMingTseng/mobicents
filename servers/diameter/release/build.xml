<?xml version="1.0"?>
<project name="diameter.release.sf" default="package" basedir=".">


	<!-- NOTE#1: THIS WILL WORK ONLY FOR 1.0.1GA+, since before resource did not exist
		 		 Put proper versions, and run "ant", after sip is created and upload is finished, to "ant clean"
		 NOTE#2: ./README.txt is used for / readme of zip
	
	 -->
	<property name="VERSION" value="1.0.0.GA" />
	<property name="JDIAM_VERSION" value="1.5.0.1-build187" />
	<property name="MUX_VERSION" value="1.0.0.GA" />
	<property name="base_VERSION" value="1.0.0.GA" />
	<property name="cca_VERSION" value="1.0.0.GA" />
	<property name="sh-client_VERSION" value="1.0.0.GA" />
	<property name="sh-server_VERSION" value="1.0.0.GA" />
	<property name="ro_VERSION" value="1.0.0.GA" />
	<property name="rf_VERSION" value="1.0.0.GA" />
	<property name="base_EXAMPLE_VERSION" value="1.0.0.GA" />
	<property name="openims_EXAMPLE_VERSION" value="1.0.0.GA" />

	<property name="JAINSLEE_VERSION" value="1.2.6.GA" />
	<property name="JBOSS_VERSION" value="4.2.3.GA" />

	<property name="ra_list" value="base,cca,sh-client,sh-server,ro,rf" />
	<property name="example_list" value="base,openims" />
	<property name="checkout_base_dir" value="${basedir}/diameter" />
	<property name="zip_dir" value="${basedir}/diameter/zip" />

	<property name="zip_file_name" value="mobicents-diameter-${VERSION}" />

	<property name="failoncopy" value="false" />
	
	<!-- Definition -->
	<property environment="sys">
	</property>
	<condition property="mvn.executable" value="${sys.M2_HOME}\bin\mvn.bat" else="mvn">
		<os family="windows" />
	</condition>

	<taskdef onerror="fail" resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${diameter.release.sf}/../ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>


	<target name="init">
	</target>


	<target name="clean" description="Remove everything that we created.">
		<delete dir="${checkout_base_dir}" verbose="false" />
	</target>

	<target name="package" description="Create zip file: ${checkout_base_dir}/${zip_file_name}.zip" depends="build-src-zip,build-src,copy-jars,prepare-text-content">
		<zip destfile="${checkout_base_dir}/${zip_file_name}.zip" basedir="${zip_dir}"/>
	</target>

	
	<target name="checkout" depends="init,checkout-core,checkout-resources,checkout-examples,checkout-jainslee" />
	<target name="build-src" depends="build-src-core,build-src-resources,build-src-examples,build-jainslee" />
	<target name="prepare-text-content" depends="prepare-text-content-core,prepare-text-content-resources,prepare-text-content-examples" />
	<target name="copy-jars" depends="copy-jars-core,copy-jars-resources,copy-jars-examples,copy-jars-additional-resources" />

	
	<target name="build-src-zip" depends="clean,checkout">
		<zip destfile="${checkout_base_dir}/${zip_file_name}-src.zip">
			<zipfileset dir="${checkout_base_dir}/core" prefix="core" excludes="release"></zipfileset>
			<zipfileset dir="${checkout_base_dir}/resources" prefix="resources" excludes="release"></zipfileset>
			<zipfileset dir="${checkout_base_dir}/examples" prefix="examples" excludes="release"></zipfileset>
		</zip>
	</target>

	<!--
		######################
		#  checkout section  #
		######################
		-->

	<target name="checkout-core">
		<echo>Checkout Diameter Core (jDiameter v${JDIAM_VERSION}, MUX v${MUX_VERSION})</echo>
		<exec executable="${mvn.executable}" dir="${ant.file.diameter.release}/../">
			<arg line="-f internal-components-checkout.xml validate -P checkout -Djdiam_version=${JDIAM_VERSION} -Dmux_version=${MUX_VERSION}" />
		</exec>
	</target>
	<target name="checkout-resources">

		<for delimiter="," param="ra.name" list="${ra_list}">
			<sequential>
				<echo>Checkout Diameter @{ra.name} Resource Adaptor v${@{ra.name}_VERSION}</echo>
				<exec executable="${mvn.executable}" dir="${ant.file.diameter.release}/../">
					<arg line="-f internal-components-checkout.xml validate -P checkout-resource -Dresource_name=@{ra.name} -Dresource_version=${@{ra.name}_VERSION}" />
				</exec>

			</sequential>
		</for>

	</target>
	<target name="checkout-examples">

		<for delimiter="," param="example.name" list="${example_list}">
			<sequential>
				<echo>Checkout Diameter Example @{example.name} v${@{example.name}_EXAMPLE_VERSION}</echo>
				<exec executable="${mvn.executable}" dir="${ant.file.diameter.release}/../">
					<arg line="-f internal-components-checkout.xml validate -P checkout-example -Dexample_name=@{example.name} -Dexample_version=${@{example.name}_EXAMPLE_VERSION}" />
				</exec>

			</sequential>
		</for>
	</target>

	<!--target name="checkout-jainslee">
		<echo>Checkout JAIN SLEE SIP11 Resource Adaptor v${JAINSLEE_VERSION}</echo>
		<exec executable="${mvn.executable}" dir="${ant.file.diameter.release}/../">
			<arg line="-f ${external.checkout.build} validate -P checkout -Djainslee_version=${JAINSLEE_VERSION} -Dcomponent=resources/sip11" />
		</exec>

		<echo>Checkout JAIN SLEE SIP-Services v${JAINSLEE_VERSION}</echo>
		<exec executable="${mvn.executable}" dir="${ant.file.diameter.release}/../">
			<arg line="-f ${external.checkout.build} validate -P checkout -Djainslee_version=${JAINSLEE_VERSION} -Dcomponent=examples/sip-services" />
		</exec>
	</target-->

	<!--
	#####################
	#  compile section  #
	#####################
	-->
	<target name="build-src-core">
		<exec executable="${mvn.executable}" dir="${checkout_base_dir}/core/jdiameter">
			<arg line="-f pom.xml install" />
		</exec>
		<exec executable="${mvn.executable}" dir="${checkout_base_dir}/core/mux">
			<arg line="-f pom.xml install" />
		</exec>
	</target>
	<target name="build-src-resources">
		<for delimiter="," param="ra.name" list="${ra_list}">
			<sequential>
				<echo>Build Diameter @{ra.name} Resource Adaptor</echo>
				<exec executable="${mvn.executable}" dir="${checkout_base_dir}/resources/@{ra.name}">
					<arg line="-f pom.xml install" />
				</exec>
			</sequential>
		</for>
	</target>
	<target name="build-src-examples">
		<for delimiter="," param="example.name" list="${example_list}">
			<sequential>
				<echo>Build Diameter @{example.name} Example</echo>
				<exec executable="${mvn.executable}" dir="${checkout_base_dir}/examples/@{example.name}">
					<arg line="-f pom.xml install" />
				</exec>
			</sequential>
		</for>
	</target>
	<!--target name="build-jainslee">
		<exec executable="${mvn.executable}" dir="${checkout_base_dir}/thirdparty/jain-slee/resources/sip11/du">
			<arg line="-f pom.xml install" />
		</exec>
		<exec executable="${mvn.executable}" dir="${checkout_base_dir}/thirdparty/jain-slee/examples/sip-services/proxy-with-initial-invite-services-DU">
			<arg line="-f pom.xml install" />
		</exec>
	</target-->


	<!--
			#######################
			#  copy jars section  #
			#######################
		-->

	<target name="copy-jars-core">
		<copy todir="${zip_dir}/core/jdiameter">
			<fileset dir="${checkout_base_dir}/core/jdiameter/api/target">
				<include name="jdiameter-api-${JDIAM_VERSION}.jar" />
			</fileset>
			<fileset dir="${checkout_base_dir}/core/jdiameter/impl/target">
				<include name="jdiameter-impl-${JDIAM_VERSION}.jar" />
			</fileset>
		</copy>

		<copy todir="${zip_dir}/core/mux">
			<fileset dir="${checkout_base_dir}/core/mux/jar/target">
				<include name="mobicents-diameter-mux-${MUX_VERSION}.jar" />
			</fileset>
		</copy>
		<unzip src="${checkout_base_dir}/core/mux/sar/target/mobicents-diameter-mux-${MUX_VERSION}.sar" dest="${zip_dir}/core/mux/mobicents-diameter-mux-${MUX_VERSION}.sar/"/>
	</target>
	<target name="copy-jars-resources">
		<for delimiter="," param="ra.name" list="${ra_list}">
			<sequential>
				<echo>Copy Diameter Resource: @{ra.name}</echo>

				<copy todir="${zip_dir}/resources/@{ra.name}">
					<fileset dir="${checkout_base_dir}/resources/@{ra.name}/du/target">
						<include name="diameter-@{ra.name}-ra-DU-${@{ra.name}_VERSION}.jar" />
					</fileset>
				</copy>
			</sequential>
		</for>
	</target>
	<target name="copy-jars-examples">
		<for delimiter="," param="example.name" list="${example_list}">
			<sequential>
				<echo>Copy Diameter Exampe: @{example.name} Version: ${@{example.name}_EXAMPLE_VERSION}</echo>

				<copy todir="${zip_dir}/examples/@{example.name}">
					<fileset dir="${checkout_base_dir}/examples/@{example.name}/du/target">
						<include name="diameter-@{example.name}-example-DU-${@{example.name}_EXAMPLE_VERSION}.jar" />
					</fileset>
				</copy>
			</sequential>
		</for>
	</target>
	<target name="copy-jars-additional-resources">
	  <copy todir="${zip_dir}/examples/openims/thirdparty/sip11" file="${mobicents.folder.path}/resources/sip11/sip11-ra-DU-${JAINSLEE_VERSION}.jar" failonerror="${failoncopy}" />
	  <copy todir="${zip_dir}/examples/openims/thirdparty/sip11" file="${mobicents.folder.path}/resources/sip11/du-management.xml" failonerror="${failoncopy}" />
	  <copy todir="${zip_dir}/examples/openims/thirdparty/sip11" file="${checkout_base_dir}/examples/openims/release/thirdparty/sip11/build.xml" failonerror="${failoncopy}" />

	  <copy todir="${zip_dir}/examples/openims/thirdparty/sip-services-proxy-with-initial-invite" file="${mobicents.folder.path}/examples/sip-services/sip-services-proxy-with-initial-invite-DU-${JAINSLEE_VERSION}.jar" failonerror="${failoncopy}" />
	  <copy todir="${zip_dir}/examples/openims/thirdparty/sip-services-proxy-with-initial-invite" file="${mobicents.folder.path}/examples/sip-services/proxy-with-initial-invite-du-management.xml" failonerror="${failoncopy}" />
	  <copy todir="${zip_dir}/examples/openims/thirdparty/sip-services-proxy-with-initial-invite" file="${checkout_base_dir}/examples/openims/release/thirdparty/sip-services-proxy-with-initial-invite/build.xml" failonerror="${failoncopy}" />
	</target>

	<!--
				##################################
				#  prepare text content section  #
				##################################
			-->


	<target name="prepare-text-content-core">
		<copy todir="${zip_dir}" file="${basedir}/README.txt" failonerror="${failoncopy}">
			<filterchain>
				<replacetokens>
					<token key="VERSION" value="${VERSION}" />
					<token key="JDIAM_VERSION" value="${JDIAM_VERSION}" />
					<token key="MUX_VERSION" value="${MUX_VERSION}" />
					<token key="base_VERSION" value="${base_VERSION}" />
					<token key="cca_VERSION" value="${cca_VERSION}" />
					<token key="sh-client_VERSION" value="${sh-client_VERSION}" />
					<token key="sh-server_VERSION" value="${sh-server_VERSION}" />
					<token key="ro_VERSION" value="${ro_VERSION}" />
					<token key="rf_VERSION" value="${rf_VERSION}" />
					<token key="base_EXAMPLE_VERSION" value="${base_EXAMPLE_VERSION}" />
					<token key="openims_EXAMPLE_VERSION" value="${openims_EXAMPLE_VERSION}" />
				</replacetokens>
			</filterchain>
		</copy>
		<copy todir="${zip_dir}/core/jdiameter" file="${checkout_base_dir}/core/jdiameter/release/README.txt" failonerror="${failoncopy}">
			<filterchain>
				<replacetokens>
					<token key="JDIAM_VERSION" value="${JDIAM_VERSION}" />
				</replacetokens>
			</filterchain>
		</copy>
		<copy todir="${zip_dir}/core/mux" file="${checkout_base_dir}/core/mux/release/README.txt" failonerror="${failoncopy}">
			<filterchain>
				<replacetokens>
					<token key="MUX_VERSION" value="${MUX_VERSION}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>
	<target name="prepare-text-content-resources">
		<for delimiter="," param="ra.name" list="${ra_list}">
			<sequential>
				<echo>Copy Diameter Resource: @{ra.name}</echo>

				<copy tofile="${zip_dir}/resources/@{ra.name}/du-management.xml" file="${checkout_base_dir}/resources/@{ra.name}/du/target/build.xml" failonerror="${failoncopy}" />
				<copy todir="${zip_dir}/resources/@{ra.name}" file="${checkout_base_dir}/resources/@{ra.name}/release/build.xml" failonerror="${failoncopy}" />
				<copy todir="${zip_dir}/resources/@{ra.name}" file="${checkout_base_dir}/resources/@{ra.name}/release/README.txt" failonerror="${failoncopy}">
					<filterchain>
						<replacetokens>
							<token key="@{ra.name}_VERSION" value="${@{ra.name}_VERSION}" />
						</replacetokens>
					</filterchain>
				</copy>
			</sequential>
		</for>
	</target>

	<target name="prepare-text-content-examples">
		<for delimiter="," param="example.name" list="${example_list}">
			<sequential>
				<echo>Copy Diameter Resource: @{example.name}</echo>

				<copy tofile="${zip_dir}/examples/@{example.name}/du-management.xml" file="${checkout_base_dir}/examples/@{example.name}/du/target/build.xml" failonerror="${failoncopy}" />
				<copy todir="${zip_dir}/examples/@{example.name}" file="${checkout_base_dir}/examples/@{example.name}/release/build.xml" failonerror="${failoncopy}" />
				<copy todir="${zip_dir}/examples/@{example.name}" file="${checkout_base_dir}/examples/@{example.name}/release/README.txt" failonerror="${failoncopy}">
					<filterchain>
						<replacetokens>
							<token key="@{example.name}_EXAMPLE_VERSION" value="${@{example.name}_EXAMPLE_VERSION}" />
						</replacetokens>
					</filterchain>
				</copy>
			</sequential>
		</for>
	</target>

  <!-- JAIN SLEE -->
  
	<property name="mobicents.distro.zip.path" value="mobicents-jainslee-server-${JAINSLEE_VERSION}.zip" />
	<property name="mobicents.folder.path" value="${checkout_base_dir}/mobicents-jainslee-server-${JAINSLEE_VERSION}" />

	<target name="build-jainslee">
		<unzip src="${checkout_base_dir}/${mobicents.distro.zip.path}" dest="${mobicents.folder.path}" />
	</target>
  
  <target name="checkout-jainslee">
		<echo>Downloading Mobicents JAIN SLEE Server v${JAINSLEE_VERSION}</echo>
		<get verbose="true" dest="${checkout_base_dir}/${mobicents.distro.zip.path}" src="http://downloads.sourceforge.net/mobicents/mobicents-jainslee-server-${JAINSLEE_VERSION}-jboss-${JBOSS_VERSION}.zip" />
	</target>

</project>

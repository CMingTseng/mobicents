<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Mobicents_Community_Documentation.ent">
<!ENTITY PRODUCT "Mobicents">
<!ENTITY BOOKID "Mobicents_Community_Documentation">
<!ENTITY YEAR "2009">
<!ENTITY HOLDER "Red Hat Inc.">
]>
<book lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><bookinfo id="Mobicents_Community_Documentation-Documentation" lang="en-US">
	<title>Mobicents Community Documentation</title>
	<subtitle>Self-Managing Mobicents Community Documentation</subtitle>
	<productname>Mobicents User Documentation</productname>
	<productnumber>0.1</productnumber>
	<edition>0</edition>
	<pubsnumber>0</pubsnumber>
	<abstract>
		<para>The guide contains information relating to the ongoing maintenance
of the Mobicents Community Documentation Suite. The guide discusses
the current state of the documentation, explains the writing
standards currently used in the guides, the structure of the guides
in the GCode SVN repository, and provides some quick-start help for
community authors in getting accustomed to XML authoring.</para></abstract>
			<corpauthor>
				<inlinemediaobject>
					<imageobject>
						<imagedata fileref="Common_Content/images/title_logo.svg" format="SVG"/>
					</imageobject>
					<textobject>
						<phrase>Logo</phrase>
					</textobject>
				</inlinemediaobject>
			</corpauthor>
			<copyright>
				<year>2009</year>
				<holder>Red Hat Inc.</holder>
			</copyright>
			<authorgroup lang="en-US">
	<author>
		<firstname>Jared</firstname>
		<surname>Morgan</surname>
		<affiliation>
			<orgname>Red Hat, Inc</orgname>
			<orgdiv>Engineering Content Service</orgdiv>
		</affiliation>
		<email>jmorgan@redhat.com</email>
	</author>
</authorgroup>
		</bookinfo>
	<preface id="Mobicents_Community_Documentation-Preface" lang="en-US">
	<title>Preface</title>
	<section lang="en-US" xml:base="fallback_content/Conventions.xml">
	<title>Document Conventions</title>
	<para>
		This manual uses several conventions to highlight certain words and phrases and draw attention to specific pieces of information.
	</para>
	<para>
		In PDF and paper editions, this manual uses typefaces drawn from the <ulink url="https://fedorahosted.org/liberation-fonts/">Liberation Fonts</ulink> set. The Liberation Fonts set is also used in HTML editions if the set is installed on your system. If not, alternative but equivalent typefaces are displayed. Note: Red Hat Enterprise Linux 5 and later includes the Liberation Fonts set by default.
	</para>
	<section>
		<title>Typographic Conventions</title>
		<para>
			Four typographic conventions are used to call attention to specific words and phrases. These conventions, and the circumstances they apply to, are as follows.
		</para>
		<para>
			<literal>Mono-spaced Bold</literal>
		</para>
		<para>
			Used to highlight system input, including shell commands, file names and paths. Also used to highlight key caps and key-combinations. For example:
		</para>
		<blockquote>
			<para>
				To see the contents of the file <filename>my_next_bestselling_novel</filename> in your current working directory, enter the <command>cat my_next_bestselling_novel</command> command at the shell prompt and press <keycap>Enter</keycap> to execute the command.
			</para>
		</blockquote>
		<para>
			The above includes a file name, a shell command and a key cap, all presented in Mono-spaced Bold and all distinguishable thanks to context.
		</para>
		<para>
			Key-combinations can be distinguished from key caps by the hyphen connecting each part of a key-combination. For example:
		</para>
		<blockquote>
			<para>
				Press <keycap>Enter</keycap> to execute the command.
			</para>
			<para>
				Press <keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap><keycap>F1</keycap></keycombo> to switch to the first virtual terminal. Press <keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap><keycap>F7</keycap></keycombo> to return to your X-Windows session.
			</para>
		</blockquote>
		<para>
			The first sentence highlights the particular key cap to press. The second highlights two sets of three key caps, each set pressed simultaneously.
		</para>
		<para>
			If source code is discussed, class names, methods, functions, variable names and returned values mentioned within a paragraph will be presented as above, in <literal>Mono-spaced Bold</literal>. For example:
		</para>
		<blockquote>
			<para>
				File-related classes include <classname>filesystem</classname> for file systems, <classname>file</classname> for files, and <classname>dir</classname> for directories. Each class has its own associated set of permissions.
			</para>
		</blockquote>
		<para>
			<application>Proportional Bold</application>
		</para>
		<para>
			This denotes words or phrases encountered on a system, including application names; dialogue box text; labelled buttons; check-box and radio button labels; menu titles and sub-menu titles. For example:
		</para>
		<blockquote>
			<para>
				Choose <guimenu>System &gt; Preferences &gt; Mouse</guimenu> from the main menu bar to launch <application>Mouse Preferences</application>. In the <guilabel>Buttons</guilabel> tab, click the <guilabel>Left-handed mouse</guilabel> check box and click <guibutton>Close</guibutton> to switch the primary mouse button from the left to the right (making the mouse suitable for use in the left hand).
			</para>
			<para>
				To insert a special character into a <application>gedit</application> file, choose <guimenu>Applications &gt; Accessories &gt; Character Map</guimenu> from the main menu bar. Next, choose <guimenu>Search &gt; Find…</guimenu> from the <application>Character Map</application> menu bar, type the name of the character in the <guilabel>Search</guilabel> field and click <guibutton>Next</guibutton>. The character you sought will be highlighted in the <guilabel>Character Table</guilabel>. Double-click this highlighted character to place it in the <guilabel>Text to copy</guilabel> field and then click the <guibutton>Copy</guibutton> button. Now switch back to your document and choose <guimenu>Edit &gt; Paste</guimenu> from the <application>gedit</application> menu bar.
			</para>
		</blockquote>
		<para>
			The above text includes application names; system-wide menu names and items; application-specific menu names; and buttons and text found within a GUI interface, all presented in Proportional Bold and all distinguishable by context.
		</para>
		<para>
			Note the <guimenu>&gt;</guimenu> shorthand used to indicate traversal through a menu and its sub-menus. This is to avoid the difficult-to-follow 'Select <guimenuitem>Mouse</guimenuitem> from the <guimenu>Preferences</guimenu> sub-menu in the <guimenu>System</guimenu> menu of the main menu bar' approach.
		</para>
		<para>
			<command><replaceable>Mono-spaced Bold Italic</replaceable></command> or <application><replaceable>Proportional Bold Italic</replaceable></application>
		</para>
		<para>
			Whether Mono-spaced Bold or Proportional Bold, the addition of Italics indicates replaceable or variable text. Italics denotes text you do not input literally or displayed text that changes depending on circumstance. For example:
		</para>
		<blockquote>
			<para>
				To connect to a remote machine using ssh, type <command>ssh <replaceable>username</replaceable>@<replaceable>domain.name</replaceable></command> at a shell prompt. If the remote machine is <filename>example.com</filename> and your username on that machine is john, type <command>ssh john@example.com</command>.
			</para>
			<para>
				The <command>mount -o remount <replaceable>file-system</replaceable></command> command remounts the named file system. For example, to remount the <filename>/home</filename> file system, the command is <command>mount -o remount /home</command>.
			</para>
			<para>
				To see the version of a currently installed package, use the <command>rpm -q <replaceable>package</replaceable></command> command. It will return a result as follows: <command><replaceable>package-version-release</replaceable></command>.
			</para>
		</blockquote>
		<para>
			Note the words in bold italics above — username, domain.name, file-system, package, version and release. Each word is a placeholder, either for text you enter when issuing a command or for text displayed by the system.
		</para>
		<para>
			Aside from standard usage for presenting the title of a work, italics denotes the first use of a new and important term. For example:
		</para>
		<blockquote>
			<para>
				When the Apache HTTP Server accepts requests, it dispatches child processes or threads to handle them. This group of child processes or threads is known as a <firstterm>server-pool</firstterm>. Under Apache HTTP Server 2.0, the responsibility for creating and maintaining these server-pools has been abstracted to a group of modules called <firstterm>Multi-Processing Modules</firstterm> (<firstterm>MPMs</firstterm>). Unlike other modules, only one module from the MPM group can be loaded by the Apache HTTP Server.
			</para>
		</blockquote>
	</section>
	
	<section>
		<title>Pull-quote Conventions</title>
		<para>
			Two, commonly multi-line, data types are set off visually from the surrounding text.
		</para>
		<para>
			Output sent to a terminal is set in <computeroutput>Mono-spaced Roman</computeroutput> and presented thus:
		</para>
		
<screen>
books        Desktop   documentation  drafts  mss    photos   stuff  svn
books_tests  Desktop1  downloads      images  notes  scripts  svgs
</screen>
		<para>
			Source-code listings are also set in <computeroutput>Mono-spaced Roman</computeroutput> but are presented and highlighted as follows:
		</para>
		
<programlisting language="java">
package org.jboss.book.jca.ex1;

import javax.naming.InitialContext;

public class ExClient
{
   public static void main(String args[]) 
       throws Exception
   {
      InitialContext iniCtx = new InitialContext();
      Object         ref    = iniCtx.lookup("EchoBean");
      EchoHome       home   = (EchoHome) ref;
      Echo           echo   = home.create();

      System.out.println("Created Echo");

      System.out.println("Echo.echo('Hello') = " + echo.echo("Hello"));
   }
   
}
</programlisting>
	</section>
	
	<section>
		<title>Notes and Warnings</title>
		<para>
			Finally, we use three visual styles to draw attention to information that might otherwise be overlooked.
		</para>
		<warning>
			<title>Warning</title>
			<para>
				A Warning should not be ignored. Ignoring warnings will most likely cause data loss.
			</para>
		</warning>
		<important>
			<title>Important</title>
			<para>
				Important boxes detail things that are easily missed: configuration changes that only apply to the current session, or services that need restarting before an update will apply. Ignoring Important boxes won't cause data loss but may cause irritation and frustration.
			</para>
		</important>
		<note>
			<title>Note</title>
			<para>
				A note is a tip or shortcut or alternative approach to the task at hand. Ignoring a note should have no negative consequences, but you might miss out on a trick that makes your life easier.
			</para>
		</note>
	</section>

</section>
	<section lang="en-US" xml:base="fallback_content/Feedback.xml">
	<title>We Need Feedback!</title>
	<para>
		If you find a typographical error in this manual, or if you have thought of a way to make this manual better, we would love to hear from you! Please submit a documentation issue using the Mobicents GCode Issue Tracker: <ulink url="http://code.google.com/p/mobicents/issues/list">http://code.google.com/p/mobicents/issues/list</ulink> against the product <application>Mobicents.</application>
	</para>
	<para>
		When submitting a bug report, be sure to mention the manual's identifier: <citetitle>Mobicents_Community_Documentation</citetitle>
	</para>
	<para>
		If you have a suggestion for improving the documentation, try to be as specific as possible when describing it. If you have found an error, please include the section number and some of the surrounding text so we can find it easily.
	</para>
</section>
</preface>
	<chapter id="Introduction" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Introduction</title>
	<para>
		The Mobicents User Documentation Suite (UDS) is the formalized source of product user documentation for the Mobicents Community Project. Within the UDS, a user can learn how to install the platform, or individual servers. Server-specific features are located within each server guide and include examples that can help new users become accustomed to the functionality offered by the product suite.
	</para>
	<para>
		The UDS is written in eXtensible Markup Language (XML) and uses the DocBook DTD to control guide structure. The documentation is published to HTML-Single format using the Publican Tool chain and Maven JDocBook, and hosted on the Hudson Build Server for public viewing and comment.
	</para>
	<formalpara>
		<title>UDS History</title>
		<para>
			Originally, the UDS was delivered to the user through multiple sources such as Wiki pages and static documents. The information was hosted in different locations.
		</para>
	</formalpara>
	<para>
		The separate information sources were merged into a single Wiki source, hosted on the mobicents-public Google group. Once the information was merged into mobicents-public, the developers had a single place to communicate with the end users of the platform.
	</para>
	<para>
		As the Mobicents product matured, the requirement for formalized single-source documentation became apparent. When Red Hat acquired the project, the process of merging the content into a single XML repository began.
	</para>
	<para>
		During the conversion process from Wiki to XML, the UDS was managed exclusively by Red Hat Technical Writers. Red Hat writers took the developer content and converted it into XML user documentation, adding to the existing content where the need existed. Those areas under development in the UDS were linked back to the mobicents-public forum, so readers did not encounter an information dead-end.
	</para>
	<para>
		The documentation suite evolved to a point where the Mobicents Community Project team expressed interest in self-managing the community documentation, and hosting it on the GCode SVN repository. This decision simplified the way the team controlled the versioning of user guide content, and allowed the documentation to be branched when the development cycle dictated. It also assisted the Red Hat Technical Writers in developing the product documentation for the JBoss Communication Platform.
	</para>
	<formalpara>
		<title>Current UDS Status</title>
		<para>
			Red Hat has productized the community project, and ships the JBoss Communications Platform (JBCP) to internal Red Hat customers. The Mobicents UDS forms the backbone of the JBCP Product Documentation. The community project and the Red Hat writers work closely to ensure the correct information appears in the Product User Documentation.
		</para>
	</formalpara>
</chapter>
	<chapter id="rs-Repository_Structure" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Documentation Repository</title>
	<para>
		The Mobicents User Documentation Suite (UDS) is stored in the <ulink url="http://code.google.com/p/mobicents/source/browse/">Mobicents Google Code Subversion repository(GCode SVN)</ulink> .
	</para>
	<para>
		Because the GCode SVN contains the source code for the Mobicents, and JBCP Platform, the repository is available to the public in read-only format. For contributors to make changes to the repository in any way, the Mobicents project must grant specific read-write permissions to the contributor's nominated Google account.
	</para>
	<note>
		<para>
			To obtain read-write access, notify one of the project owners listed on the Google Code Project Home Page. Ensure the Google account information is included in the request.
		</para>
	</note>
	<para>
		The most recent commit of the User Guide is located in the <filename>/trunk</filename> directory. Within this directory, each user guide is separated into the server folder to which it belongs. Click on the links in the list to inspect the document repository structure.
	</para>
	<itemizedlist>
		<listitem>
			<para>
				<ulink url="http://code.google.com/p/mobicents/source/browse/#svn/trunk/servers/jain-slee/jain-slee-docs">JAIN SLEE Server</ulink>
			</para>
		</listitem>
		<listitem>
			<para>
				<ulink url="http://code.google.com/p/mobicents/source/browse/#svn/trunk/servers/media/media-server-docs">Media Server</ulink>
			</para>
		</listitem>
		<listitem>
			<para>
				<ulink url="http://code.google.com/p/mobicents/source/browse/#svn/trunk/servers/sip-presence/sip-presence-docs">SIP Presence Server</ulink>
			</para>
		</listitem>
		<listitem>
			<para>
				<ulink url="http://code.google.com/p/mobicents/source/browse/#svn/trunk/servers/sip-servlets/sip-servlets-docs">SIP Servlets Server</ulink>
			</para>
		</listitem>
	</itemizedlist>
	<para>
		In all docs directories, there is an en-US folder. This folder contains all the XML files that are required for the User Guide.
	</para>
	<para>
		The exception to this is the single XML file prefixed with <filename>all-</filename>. For example, in the sip-servlets-docs repository, the file is named <filename>all-SIP_Servlets_Server_User_Guide.xml</filename>. This file is used by Maven JDocBook to produce the documentation that is hosted on the Hudson Build Server.
	</para>
	<important>
		<title>Do Not Update the all-*.xml File</title>
		<para>
			Never incorporate changes directly into the <filename>all-&lt;user guide name&gt;.xml</filename> file. Updating this file with documentation changes will result in lost work.
		</para>
		<para>
			Update the individual XML files that comprise the User Guide. The changes made in individual files will eventually be merged into the all-*.xml file.
		</para>
	</important>
</chapter>
	<chapter id="Book_Structure" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Book Structure</title>
	<para>
		The structure of each user guide in the Mobicents User Documentation Suite (UDS) is controlled by the DocBook XML Document Type Definition (DTD). Before updating any user guide in the GCode SVN, it is very important to understand the way each user guide is constructed.
	</para>
	<para>
		As previously discussed, the Publican Tool chain requires a set of XML files to be present in the directory in order to publish a book to an output format. <xref linkend="table-Book-Structure"/>describes the mandatory files that must be present, including a description of the file contents, and where the XML file is embedded into the finished user guide.
	</para>
	<table frame="all" id="table-Book-Structure" pgwide="1">
		<title>Book Components</title>
		<tgroup cols="3" colsep="1">
			<colspec align="left" colname="c0" colnum="1"/>
			<colspec align="left" colname="c1" colnum="2"/>
			<colspec align="left" colname="c2" colnum="3"/>
			<thead>
				<row>
					<entry align="center">
						XML Book Component
					</entry>
					<entry align="center">
						Description
					</entry>
					<entry>
						Order of Component in the Book
					</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>
						<filename><replaceable>[Book_Name]</replaceable>.xml</filename>
					</entry>
					<entry>
						Contains the structure of the user guide, represented by xi:include references to each chapter-<replaceable>[Chapter_Name]</replaceable>.xml component, and other mandatory components in this table.
					</entry>
					<entry>
						Top Level (or Parent) component of any user guide.
					</entry>
				</row>
				<row>
					<entry>
						<filename>Book_Info.xml</filename>
					</entry>
					<entry>
						Contains information about the book title, book version number, abstract and copyright information.
					</entry>
					<entry>
						1st Child. This is the opening information a reader will see in the user guide.
					</entry>
				</row>
				<row>
					<entry>
						<filename>Author_Group.xml</filename>
					</entry>
					<entry>
						Contains contact information about the authors that contributed to the content of the book.
					</entry>
					<entry>
						2nd Child. This component is included in the <filename>Book_Info.xml</filename> component.
					</entry>
				</row>
				<row>
					<entry>
						<filename>Preface.xml</filename>
					</entry>
					<entry>
						Contains pre-defined content explaining the typographical standards used in the guide, and other information that will assist the reader with using the guide.
					</entry>
					<entry>
						3rd Child. This component is included after the <filename>Book_Info.xml</filename> content.
					</entry>
				</row>
				<row>
					<entry>
						<filename>chapter-<replaceable>[Chapter_Name]</replaceable>.xml</filename>
					</entry>
					<entry>
						Contains XML markup and content included at a Chapter level in the document. The XML file is named only for human-readability.
					</entry>
					<entry>
						4th. This is the top level element for each chapter in the user guide. The order of these files in the <filename><replaceable>[Book_Name]</replaceable>.xml</filename> file determines the structure of the guide.
					</entry>
				</row>
				<row>
					<entry>
						<filename>section-<replaceable>[Section_Name]</replaceable>.xml</filename>
					</entry>
					<entry>
						Contains XML markup and content included at a Section level in the document. The XML file is named only for human-readability.
					</entry>
					<entry>
						5th. This component is included in <filename>chapter-<replaceable>[Chapter_Name]</replaceable>.xml</filename> files by xi:include reference.
					</entry>
				</row>
				<row>
					<entry>
						<filename>Revision History.xml</filename>
					</entry>
					<entry>
						Contains a record of the revisions made to the document over time. Top-level information about changes in the guide are provided to the reader.
					</entry>
					<entry>
						6th.
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<para>
		To ensure Maven JDocBook can publish the content generated by the Publican Tool chain, additional XML content is required. Maven JDocBook does not have access to the Publican Tool chain common_content directory, therefore, the required XML files must be included as xi:fallback references in the <filename>preface.xml</filename> and <filename>book_info.xml</filename> files.
	</para>
	<table frame="all" id="table-Maven_JDocBook_Content" pgwide="1">
		<title>Maven JDocBook Content</title>
		<tgroup cols="3" colsep="1">
			<colspec align="left" colname="c0" colnum="1"/>
			<colspec align="left" colname="c1" colnum="2"/>
			<colspec align="left" colname="c2" colnum="3"/>
			<thead>
				<row>
					<entry align="center">
						XML Component
					</entry>
					<entry align="center">
						Description
					</entry>
					<entry>
						Order of Component in the Book
					</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>
						<filename>Conventions.xml</filename>
					</entry>
					<entry>
						Contains typographical standards used within the guide.
					</entry>
					<entry>
						Inserted by xi:fallback reference at the end of the <filename>Preface.xml</filename> file.
					</entry>
				</row>
				<row>
					<entry>
						<filename>Feedback.xml</filename>
					</entry>
					<entry>
						Contains information about how to raise a bug against the user documentation.
					</entry>
					<entry>
						Inserted by xi:fallback reference at the end of the <filename>Preface.xml</filename> file.
					</entry>
				</row>
				<row>
					<entry>
						<filename>Legal_Notice.xml</filename>
					</entry>
					<entry>
						Contains standardized Red Hat legal information.
					</entry>
					<entry>
						Inserted by xi:fallback reference at the end of the <filename>Book_Info.xml</filename> file
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<para>
		The content is contained within XML files in the fallback_content directory of each user guide repository. The fallback_content directory contains copies of the XML files located in the <filename>/usr/share/publican/Common_Content</filename> directory.
	</para>
	<note>
		<title>Fallback Content Accuracy Check</title>
		<para>
			The front-matter information located in the fallback_content directory of each user guide repository, is not maintained by the Publican Tool chain Team, or upgraded when Publican updates are installed. Therefore, manually verify that the information contained in these files are kept current with the standards present in the latest Publican Tool chain version.
		</para>
	</note>
	<para>
		Fallback content is added to each xi:include element that Maven JDocBook does not have access to. The structure described in the following XML sample is for the <filename>Legal_Notice.xml</filename> information in the <filename>Book_Info.xml</filename> file.
	</para>
	<para>
		The xi:include element can have any number of xi:fallback elements defined. However, in the Mobicents UDS only one fallback is required.
	</para>
	
<programlisting role="XML">&lt;!--FOR PUBLICAN --&gt;
&lt;xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
 href="Common_Content/Legal_Notice.xml"&gt;
    &lt;!--FOR JDOCBOOK:--&gt;
    &lt;xi:fallback xmlns:xi="http://www.w3.org/2001/XInclude"&gt;
        &lt;xi:include href="fallback_content/Legal_Notice.xml"
         xmlns:xi="http://www.w3.org/2001/XInclude"&gt;&lt;/xi:include&gt;
    &lt;/xi:fallback&gt;
&lt;/xi:include&gt;
</programlisting>
</chapter>
	<chapter id="Language_Tips" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Language Tips</title>
	<para>
		To maintain language consistency within the source documentation, it is important for each content author to write in a similar tone. Maintaining consistent tone throughout the user guides will give the reader the illusion that both the Mobicents and JBCP User Documentation Suite (UDS) is maintained by one person.
	</para>
	<para>
		The reader will subconciously notice the consistency, will be able to easily process the information contained within the user guide, and will really appreciate the effort you have put in to keeping the writing style professional and consistent (even though they may not tell you directly).
	</para>
	<para>
		There are a few ways the team can achieve a consistent writing style. Some of the examples mentioned in the following sections are actual examples found in the user guides. Hopefully, instances of these language errors will begin to decrease as community content authors become more accustomed to writing to language standards.
	</para>
	<section>
		<title>Conversational Language</title>
		<para>
			It is often tempting to write like you are talking to someone face to face. It is an easy way of writing, and allows you to write using a stream of conciousness method.
		</para>
		<para>
			The problem with this type of writing style, is that it is very hard for the reader to quickly grasp a concept. They must read through the content and try to extract the information that is relevant to them from the concept you are writing about. The writing style often leads to verbosity (or wordiness) and this can quickly frustrate readers.
		</para>
		<para>
			The following examples will show you how pruning your writing can cut down the word count, and allow readers to easily understand the information they are reading.
		</para>
		<example>
			<title>Reordering and Restructuring for Readability</title>
			<para>
				This example shows how how you can increase the readability of the information by cutting out unnecessary words and restructuring content.
			</para>
			<formalpara>
				<title>Original Wording</title>
				<para>
					As the SIP Servlets Server employs JBoss Application Server as its servlet container and takes advantage of its capabilities, including clustering and failover, familiarity with the basics of JBoss Clustering is helpful. Refer to this chapter in the Clustering Guide for background or if you wish to dig further: JBoss Application Server Clustering Guide.
				</para>
			</formalpara>
			<formalpara>
				<title>Suggested Wording</title>
				<para>
					To further understand the complete clustering and failover capabilities of the JBoss Application Server, refer to the JBoss Application Server Clustering Guide.
				</para>
			</formalpara>
			<formalpara>
				<title>Result</title>
				<para>
					After the edit, notice how concise the 2nd paragraph is. Also notice how the colloquialism in the reference has been removed. Depending on the readers' language skills, the usage of "dig further" might not be understood. When this is translated to other languages, the meaning of this sentence might also be lost in translation.
				</para>
			</formalpara>
		</example>
		<example>
			<title>Writing Like You Are Speaking</title>
			<para>
				This example demonstrates how writing like you are speaking results in unordered concepts, and reduces the effectiveness of the information you are writing about.
			</para>
		</example>
		<formalpara>
			<title>Original Wording</title>
			<para>
				An important note here with regard to that second scenario that according to the SIP Servlets 1.1 specification, Sections 15.1.2 The Role of Applications and 15.1.4 Application Independence, the Call Blocking application cannot just do nothing with the request and expect the container to route the request in its place (either to a next application in chain if another one is present or to the outside world if none is present). The Application has to do something with request (either proxy it or act as a UAS)
			</para>
		</formalpara>
		<formalpara>
			<title>Suggested Wording</title>
			<para>
				For the second scenario, the Call Blocking application must be responsible for routing the request to the next chained application (internally) or to the outside world (externally). The application must either proxy, or act as a User Agent Server (UAS), for the request. This requirement is stated in greater detail within the SIP Servlets 1.1 specification's "The Role of Applications" and "Application Independence" sections.
			</para>
		</formalpara>
		<formalpara>
			<title>Result</title>
			<para>
				In the original wording, the main point (that the application must handle the routing, and how it must do this) was right at the end of the paragraph. In the suggested wording, the application requirement has been moved up to the front of the paragraph. This allows the reader to quickly decide whether the information relates to them. The references, which were interrupting the sentence flow, are now at the end of the paragraph.
			</para>
		</formalpara>
	</section>

</chapter>
	<chapter id="ap-Authoring_Procedures" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Authoring Procedures</title>
	<para>
		To ensure that multiple authors can work on different sections of a single guide, procedures governing the way authors contribute content to the guide must be clearly communicated and understood by all contributors.
	</para>
	<para>
		The following sections detail the procedures that must be followed by all community content authors. Failure to follow these procedures consistently will likely result in wasted writing effort and failed GCode SVN commits.
	</para>
	<para>
		The process of writing Mobicents documentation changes can be described in the following main phases:
	</para>
	<orderedlist>
		<listitem>
			<para>
				GCode Documentation Ticket
			</para>
		</listitem>
		<listitem>
			<para>
				Authoring
			</para>
		</listitem>
		<listitem>
			<para>
				Review
			</para>
		</listitem>
		<listitem>
			<para>
				Editing
			</para>
		</listitem>
		<listitem>
			<para>
				Fixed
			</para>
		</listitem>
	</orderedlist>
	<section>
		<title>GCode Documentation Ticket</title>
		<para>
			All documentation changes must originate from a documentation ticket. Documentation tickets allows changes associated with a product enhancement to be tracked easily from the origins of the enhancement to the completed changes.
		</para>
		<para>
			When a documentation ticket is closed in the final phase, the ticket remains in the GCode Ticket system for posterity.
		</para>
		<para>
			The following procedure details how to create a documentation ticket as a result of a product enhancement.
		</para>
		<procedure id="ap-procedure-Creating_A_Documentation_Ticket">
			<title>Creating a Documentation Ticket</title>
			<step>
				<title>Search Before Opening a New Issue</title>
				<para>
					On the <guilabel>Issues</guilabel> page, enter a search query that reflects the issue you have discovered.
				</para>
				<para>
					Search <guilabel>Open Issues</guilabel> for <replaceable>[search query]</replaceable>. Click <guibutton>Search</guibutton> to retrieve the results.
				</para>
				<para>
					If a suitable match is found, check with the person assigned to the ticket to see if the defect can be appended to the existing ticket.
				</para>
				<para>
					If the existing ticket has been closed, raise a new ticket to capture the information.
				</para>
				<para>
					Be thorough in your searches; it will save duplicating tickets and unnecessary admin time spent on ticket management.
				</para>
			</step>
			<step>
				<title>Open a New Issue</title>
				<para>
					If you can not find a duplicate ticket, navigate to the Mobicents GCode <guimenu>Issues</guimenu> tab, and click the <guibutton>New Issue</guibutton> link.
				</para>
			</step>
			<step>
				<title>Select the Docs Enhancement Template</title>
				<para>
					From the <guilabel>Issue Template</guilabel> field, select the <guimenuitem>Docs Enhancement</guimenuitem> template type.
				</para>
			</step>
			<step>
				<title>Complete the Summary field</title>
				<para>
					Prefix the summary with one of the following codes to clearly identify the affected user guide:
					<itemizedlist>
						<listitem>
							<para>
								[JSS Guide] - JAIN SLEE Server User Guide
							</para>
						</listitem>
						<listitem>
							<para>
								[MSS Guide] - SIP Servlets Server User Guide
							</para>
						</listitem>
						<listitem>
							<para>
								[MMS Guide] - Media Server User Guide
							</para>
						</listitem>
						<listitem>
							<para>
								[SPS Guide] - SIP Presence Service User Guide
							</para>
						</listitem>
						<listitem>
							<para>
								[PLAT Guide] - Platform User Guide
							</para>
						</listitem>
					</itemizedlist>
				</para>
				<para>
					Include a descriptive (but short) summary of the enhancement in the <guilabel>Summary</guilabel> field.
				</para>
			</step>
			<step>
				<title>Complete the Description Field</title>
				<para>
					The description field must contain specific details about the defect. The more detailed the information, the easier it will be for the assignee to complete the ticket with minimal assistance. Follow the headings in the Docs Enhancement template and provide the necessary information.
				</para>
				<para>
					Include website links to content for the enhancement.
				</para>
				<para>
					Include the developer ticket to which the enhancement relates. If the ticket isn't related to a code change, include a link to the forum discussion history surrounding the enhancement.
				</para>
				<para>
					Include a Chapter/Section reference (including the name) to the affected area in the user guide.
				</para>
			</step>
			<step>
				<title>Change the Initial Ticket Status</title>
				<para>
					If you are raising a ticket for another user guide, or you are not a developer, change the status to <userinput>New</userinput>.
				</para>
				<para>
					If you are raising a ticket for a development change you made, change the status to <userinput>Accepted</userinput>.
				</para>
			</step>
			<step>
				<title>Complete the Cc field.</title>
				<para>
					Add the email address of the current Red Hat Technical Writer (RHTW) assigned to the project. The RHTW will be required to edit your work in a later phase.
				</para>
				<para>
					If you know the email address of the people responsible for maintaining each guide, include them in the <guilabel>Cc</guilabel> field.
				</para>
			</step>
			<step>
				<title>Append Labels</title>
				<para>
					Labels are critical in a ticket, because they enable the ticket to be searched using consistent tags.
				</para>
				<para>
					You will notice that two labels are automatically added; <literal>Type-Enhancement</literal>, <literal>Priority-Medium </literal>and <literal>Component-Docs</literal>. These categories are acceptable by default.
				</para>
				<para>
					Append the following extra categories at a minimum to the <guilabel>Labels</guilabel> field:
					<itemizedlist>
						<listitem>
							<para>
								<literal>Component-&lt;server_name&gt;</literal> - specifies the server to which the ticket relates.
							</para>
						</listitem>
						<listitem>
							<para>
								<literal>Version-&lt;version_number&gt;</literal> - specifies the base version number affected by this ticket.
							</para>
						</listitem>
					</itemizedlist>
				</para>
			</step>
			<step>
				<title>Save the Ticket</title>
				<para>
					Click <guibutton>Save changes</guibutton>.
				</para>
			</step>
		</procedure>
		
		<para>
			The ticket is now saved in the system, and the people in the Owner and Cc fields have been sent a link to the ticket for comment.
		</para>
		<para>
			Part of effective ticket management requires the developers responsible for each server to review new tickets to approve the enhancement and add supplementary information to the ticket.
		</para>
		<procedure>
			<title>Developer Ticket Approval</title>
			<step>
				<title>Review Raised Tickets</title>
				<para>
					Developers must regularly check the GCode ticket queue for new issues. To do this, search for the server prefix (for example <userinput>[MSS Guide]</userinput> for the SIP Servlets Server User Guide) in the Summary field.
				</para>
				<para>
					For tickets that been incorrectly created, the previous search will not return the correct results. Search for the Component-<replaceable>[server name]</replaceable> Label, and ensure the server prefix is added to the ticket.
				</para>
			</step>
			<step>
				<title>Review Ticket Fields</title>
				<para>
					Ensure that the ticket contains the information specified in <xref linkend="ap-procedure-Creating_A_Documentation_Ticket"/> .
				</para>
			</step>
			<step>
				<title>Verify or Add Version Information</title>
				<para>
					Check that the affected product version number (if specified) is correct for the proposed documentation enhancement.
				</para>
				<para>
					Append the correct product version number, or change the version number and add a comment explaining why the version was incorrect.
				</para>
				<para>
					If the ticket was raised by a non-developer, ensure the ticket is changed from <userinput>New</userinput> to <userinput>Accepted</userinput> status.
				</para>
			</step>
		</procedure>

	</section>
	
	<section id="ap-Authoring">
		<title>Authoring</title>
		<para>
			Authoring can begin after the GCode ticket has been accepted by the developer/s responsible for the affected server. The Mobicents User Documentation Suite (UDS) is written in XML, and stored in the GCode SVN.
		</para>
		<para>
			The audience of this guide is primarily Mobicents developers who should already be familiar with SVN usage. The specifics of SVN operation are therefore not described in detail.
		</para>
		<section id="ap-Check_Out_GCode_SVN_Repository">
			<title>Check Out GCode SVN Repository</title>
			<para>
				The GCode SVN Documentation Repository must be checked out as a working copy prior to making any changes.
			</para>
			<procedure>
				<title>Check Out Server Repository</title>
				<step>
					<title>Trunk or Branch</title>
					<para>
						Determine what version of the server the enhancement relates to. The <filename>/trunk</filename> directory contains the latest version of the server currently in development.
					</para>
					<para>
						Most documentation changes will occur in <filename>/trunk</filename>, however there may be instances where an enhancement must be appended to previous server releases.
					</para>
					<para>
						The GCode Documentation Ticket will indicate which release the changes belongs to from the information added to the <guilabel>Labels</guilabel> section of the ticket.
					</para>
					<para>
						For GCode Repository Structure, refer to <xref linkend="rs-Repository_Structure"/>
					</para>
				</step>
				<step>
					<title>Check Out a Working Copy</title>
					<para>
						Check out a working copy of the affected server release to your local hard drive.
					</para>
					<note>
						<para>
							If you have a working copy of the directory checked-out in another working folder (for example, a server code repository working copy), execute SVN Update on the documentation folder in this directory before changing any XML content.
						</para>
					</note>
					<para>
						The working copy will usually be the <filename>/trunk</filename> version. If the ticket requires the change to be made in <filename>/trunk</filename> as well as a<filename> /branch</filename>, then make the changes in <filename>/trunk</filename> first and back-port into each affected <filename>/branch</filename>.
					</para>
				</step>
				<step>
					<title>Open the Working Directory</title>
					<para>
						Navigate to the en-US directory, and open the directory to display the files.
					</para>
				</step>
			</procedure>

		</section>
		
		<section id="ap-Update_XML">
			<title>Update XML</title>
			<para>
				Once a working copy is checked out of the GCode SVN repository, making the changes specified in the GCode Documentation Ticket can begin. <xref linkend="procedure-Updating_The_XML"/> details the steps to updating an existing section in a book. The process is the same for any documentation updates.
			</para>
			<procedure id="procedure-Updating_The_XML">
				<title>Updating the XML</title>
				<step>
					<title>Updated the GCode Ticket</title>
					<para>
						Change the <guilabel>Status</guilabel> field of the GCode Documentation Ticket to <userinput>Started</userinput>. This informs other content authors that the ticket is no longer available in the ticket queue.
					</para>
				</step>
				<step>
					<title>Open the Chapter or Section XML File</title>
					<para>
						Navigate to the <literal>en-US</literal> directory in the User Guide repository.
					</para>
					<para>
						Select the XML file to edit, and open it in your preferred XML Authoring Tool.
					</para>
				</step>
				<step>
					<title>Locate the Area to Update</title>
					<para>
						The easiest way to locate the area in an XML file is to search for keywords. Use the information in the GCode Ticket to search for the affected area that requires updating.
					</para>
				</step>
				<step>
					<title>Check the XML Comment for the Authoring Status</title>
					<para>
						To allow other content authors to see what sections of the guide can be edited, XML comments are used.
					</para>
					<para>
						Before making a change, you must ensure that the affected area is not being worked on (or 'claimed') by another author.
					</para>
					<para>
						Each content author is responsible for updating and maintaining the XML Comment Block at each stage of the authoring process.
					</para>
					<para>
						XML comments must be placed at the parent XML level. For example, if a change is required to content contained in a &lt;para&gt; tag within a &lt;section&gt;, the XML comment must be inserted at the &lt;section&gt; level. The XML comment uses the following structure:
					</para>
					
<programlisting role="XML">
&lt;!--GCODE TICKET: [Ticket Number] AUTHOR: [Author Name] DATE CHANGED: yyyymmdd STATUS:  Authoring|Review|Editing|Fixed  SUMMARY: [Brief summary of change] --&gt;
</programlisting>
				</step>
				<step>
					<title>Claim the Section for Editing </title>
					<para>
						If the section is not marked as being changed by another content author, you can proceed to 'claim' the section for editing.
					</para>
					<para>
						Change the XML comment to reflect the following information:
					</para>
					
<programlisting role="XML">&lt;!--GCODE TICKET: [Ticket Number] AUTHOR: [Author Name] DATE CHANGED: yyyymmdd STATUS:  Authoring|Review|Editing|Fixed  SUMMARY: [Brief summary of change]--&gt;
</programlisting>
					<variablelist>
						<varlistentry>
							<term>AUTHOR:</term>
							<listitem>
								<para>
									Your name must be consistent so you can search for other instances within the XML. Consider using your Red Hat email username for the AUTHOR. For example, jmorgan (for Jared Morgan).
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>STATUS:</term>
							<listitem>
								<para>
									Change the Status to Authoring.
								</para>
							</listitem>
						</varlistentry>
					</variablelist>
				</step>
				<step>
					<title>Make Changes</title>
					<para>
						Incorporate the information from the GCode Documentation Ticket. When making changes, follow these recommendations.
					</para>
					<variablelist>
						<title>Authoring Recommendations</title>
						<varlistentry>
							<term>Validate XML Regularly</term>
							<listitem>
								<para>
									It is easy to make XML structure errors if you are not using an XML Editing program that controls structure for you. Regularly validating your content will identify structure issues early. You will have a better idea about what section might contain the error, based on what section you have recently edited.
								</para>
								<para>
									If your XML does not validate, refer to <xref linkend="pam-Publican_and_Maven"/> for troubleshooting information.
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>Smaller Changes Result In Trouble-free Commits</term>
							<listitem>
								<para>
									Make smaller, consecutive changes to existing XML chapters, rather than large structural changes. Commit your validated changes regularly.
								</para>
								<para>
									GCode SVN can merge small changes from multiple authors effectively. However, larger changes may result in SVN mismatches. You must manually resolve the SVN mismatch conflict. This is often very time consuming, and annoying.
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>Strict Validation</term>
							<listitem>
								<para>
									If you are using an XML Authoring Tool to author changes, always enable "Strict Validation". Strict Validation will prevent the introduction of invalid mark-up to your work.
								</para>
							</listitem>
						</varlistentry>
					</variablelist>
				</step>
				<step>
					<title>Spell Check Changes</title>
					<para>
						All changes must be spell checked. The English (US) language is used throughout the Mobicents UDS. Ensure your XML Authoring Tool has the English (US) dictionary set as the default spell checker language.
					</para>
				</step>
				<step>
					<title>Publish and Review</title>
					<para>
						Publish your changes to HTML-Single using Publican and Maven JDocBook.
					</para>
					<para>
						Review your changes to check if the display and presentation meets the existing standards of the Mobicents UDS.
					</para>
					<note>
						<para>
							If you are not using the Publican Tool chain in your daily XML editing tasks, you can still test publish using your XML Authoring tool's <function>Publish</function> feature to get an idea of what the publish might look like.
						</para>
						<para>
							The operation will vary between editors, but the main thing is that the book will not publish if it is not structurally valid.
						</para>
					</note>
				</step>
				<step>
					<title>Commit Changes to GCode SVN</title>
					<para>
						Commit structurally valid XML back into the GCode SVN regularly throughout the day.
					</para>
					<para>
						For each commit, make a note of the SVN commit number so it can be added to the GCode Ticket at the end of the
					</para>
					<important>
						<title>Commit Regularly</title>
						<para>
							For documentation, the risk of SVN merge failure increases the longer you wait between commits. It is much easier to commit regularly than to manually merge your changes into someone else's changes.
						</para>
					</important>
				</step>
			</procedure>

		</section>
		
		<section id="ap-Update_GCode_Ticket">
			<title>Update GCode Ticket</title>
			<para>
				After the changes have been made to the affected XML file, the GCode Ticket must be updated with a summary of the changes.
			</para>
			<para>
				While this may seem like an administration overhead, it is vitally important that a history of changes is kept with the ticket.
			</para>
			<para>
				Often, questions are raised about why a feature was removed from user documentation. Having a thorough history in the ticket will help to justify the reason why the feature was removed, and help other content authors and project managers to understand the issue in greater detail.
			</para>
			<para>
				Update the GCode Documentation Ticket with the following information:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The GCode SVN commit numbers involved with the changes.
					</para>
				</listitem>
				<listitem>
					<para>
						A description of what has changed in the XML.
					</para>
				</listitem>
				<listitem>
					<para>
						Chapter-section references to the new content in the HTML Publish. For example:
					</para>
					<para>
						<userinput>Section 3.2. Procedure 3.2.1 - Steps 1 to 6 added to clarify process.</userinput>
					</para>
				</listitem>
			</itemizedlist>
		</section>

	</section>
	
	<section id="r-Review">
		<title>Review</title>
		<para>
			The Review phase involves another team member peer reviewing the changes made by the original content author. This important phase provides the opportunity to review the changes for technical accuracy.
		</para>
		<para>
			Additionally, it provides a chance for your peers to comment on how user-friendly the information is. After all, if the content is not user friendly, then a user probably won't use it.
		</para>
		<para>
			The Review phase involves the content author and the reviewer in that the content author must discuss and incorporate any feedback provided by the reviewer.
		</para>
		<section>
			<title>Review Preparation</title>
			<para>
				Before sending off the changes for review, there are a few administration tasks that must be attended to.
			</para>
			<procedure>
				<title>Update XML Comments to Review </title>
				<step>
					<title>Open Affected XML Files </title>
					<para>
						From the information contained in the GCode Ticket, open each affected XML file.
					</para>
				</step>
				<step>
					<title>Edit XML Comments</title>
					<para>
						In each affected section, update the XML Comment STATUS to <literal>Review</literal>.
					</para>
					<para>
						The information in the GCode Ticket should help you to determine which sections are changed.
					</para>
				</step>
				<step>
					<title>Save and Close</title>
					<para>
						Save and close all open XML files.
					</para>
				</step>
			</procedure>
			
			<para>
				<xref linkend="procedure-Create_Review_Document"/> requires the XML changes to be published to HTML-Single format using the mkbk script, the Publican Tool chain, and Maven JDocBook. For this procedure, you must have Publican and Maven JDocBook configured according to the information in <xref linkend="pam-Publican_and_Maven"/>.
			</para>
			<para>
				<xref linkend="procedure-Create_Review_Document"/> assumes that you are using Fedora or Red Hat Enterprise Linux, which are the currently supported Linux distributions for Publican.
			</para>
			<procedure id="procedure-Create_Review_Document">
				<title>Create Review Document</title>
				<step>
					<title>Navigate to the User Guide Directory</title>
					<para>
						Open a terminal, and navigate to the directory that contains the <filename>en-US</filename> documentation directory.
					</para>
				</step>
				<step>
					<title>Create Combined XML File</title>
					<para>
						Run the <literal>mkbk</literal> script and create the all-[server name].xml file.
					</para>
					<para>
						For command-line usage, refer to <xref linkend="pam-Publican_and_Maven"/>.
					</para>
				</step>
				<step>
					<title>Commit all-[server name].xml to GCode SVN</title>
					<para>
						Commit the file to GCode SVN, so the Hudson Build Server builds the doc from the correct file version.
					</para>
				</step>
				<step>
					<title>Request Hudson to Build a HTML-Single </title>
					<para>
						Generate the review document by instructing the Hudson Build Server to create a HTML-Single book.
					</para>
				</step>
				<step>
					<title>Record the Build ID Number</title>
					<para>
						After Hudson has successfully published the XML book to HTML-Single format, copy the direct link to the file and paste it into the ticket.
					</para>
				</step>
				<step>
					<title>Save and Close the GCode Ticket</title>
					<para>
						Click <guibutton>Save changes</guibutton> once the link to the review document has been appended to the ticket.
					</para>
				</step>
			</procedure>

		</section>
		
		<section>
			<title>Request Review</title>
			<para>
				After completing the review preparation tasks, you are ready to send your changes to a project member for review.
			</para>
			<para>
				The GCode Documentation Ticket contains the review request, and provides the reviewer with the information they need to complete the review.
			</para>
			<para>
				<xref linkend="procedure-Revew_Request_Using_GCode_Ticket"/> describes the process to request a documentation review.
			</para>
			<procedure id="procedure-Revew_Request_Using_GCode_Ticket">
				<title>Requesting Review using GCode Ticket</title>
				<step>
					<title>Open Original GCode Ticket</title>
					<para>
						If the ticket is not already open, navigate and open the GCode Documentation Ticket that relates to the documentation review.
					</para>
					<para>
						Click in the Comment box to display the full details of the ticket, including the Labels.
					</para>
				</step>
				<step>
					<title>Add the Request to the Ticket</title>
					<para>
						In the Comment field, request that the ticket is ready for review.
					</para>
					<para>
						Ensure the reviewer name, or email address, is specified in the <guilabel>Cc:</guilabel> field of the ticket.
					</para>
				</step>
				<step>
					<title>Provide Direct Links to All Published Changes</title>
					<para>
						Hudson allows you to copy and paste direct links to published sections of the online User Guide. Pasting direct links to the section will greatly assist the peer reviewer with locating your changes.
					</para>
					<orderedlist>
						<title>Including Direct Links</title>
						<listitem>
							<para>
								Navigate to the section you changed as part of the enhancement.
							</para>
						</listitem>
						<listitem>
							<para>
								Copy the absolute link to the section from the URL field of the Web browser.
							</para>
							<para>
								You will know it is an absolute link because it will have a #[chapter/section name] as the last part of the URL.
							</para>
						</listitem>
						<listitem>
							<para>
								Paste the direct link into the ticket.
							</para>
						</listitem>
						<listitem>
							<para>
								Repeat the procedure for all other changes.
							</para>
						</listitem>
					</orderedlist>
					<para>
						Be as specific as possible with the areas requiring review. The more information you provide your reviewer, the easier it will be to efficiently complete the review.
					</para>
				</step>
				<step>
					<title>Save and Close</title>
					<para>
						After ensuring all required information is present, save and close the ticket.
					</para>
				</step>
			</procedure>

		</section>
		
		<section>
			<title>Review Ticket</title>
			<para>
				After the review request has been sent, the peer reviewer is notified that a review is waiting through an email notification from GCode. Thorough ticket review is key contributor to fantastic user documentation because other team members can use the opportunity to read the changes from a customer perspective. The content can be evaluated for technical accuracy and readability before being sent to the editing phase.
			</para>
			<para>
				The goal of Peer Review is to discuss why your suggestions should be considered by the content author. The better your reasons for suggesting an improvement, the better the chances of having the content incorporated, or reaching a compromise.
			</para>
			<para>
				<xref linkend="procedure-Peer_Reviewing_Documentation_Changes"/> describes the process to follow when a review request is received from the GCode Ticket System.
			</para>
			<procedure id="procedure-Peer_Reviewing_Documentation_Changes">
				<title>Peer Reviewing Documentation Changes</title>
				<step>
					<title>Open the Ticket</title>
					<para>
						In the email notification, click the link in the ticket to take you to the GCode Documentation Ticket.
					</para>
				</step>
				<step>
					<title>Open the HTML Document</title>
					<para>
						The ticket should contain a direct link to the affected build version and section of the user guide hosted on the Hudson Build Server.
					</para>
					<para>
						Click each link to be taken to the closest section containing each enhancement.
					</para>
					<para>
						Refer to the details in the ticket to verify what you should be reviewing.
					</para>
				</step>
				<step>
					<title>Review the Enhancements</title>
					<para>
						For each specified enhancement, ask the following questions:
					</para>
					<variablelist>
						<title>Peer Review Questions</title>
						<varlistentry>
							<term>Does It Make Sense?</term>
							<listitem>
								<para>
									Look at readability of the documented enhancement. Does it make sense when you read it? If not, what needs to be changed?
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>Is the Information Structured Correctly?</term>
							<listitem>
								<para>
									Is the incorporated information included in the correct position in the User Guide? If not, where should the info be moved to?
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>Are the Identified Changes Correctly Incorporated?</term>
							<listitem>
								<para>
									Do the incorporated changes cover the details identified in the Enhancement? If not, what's missing and where should it be incorporated?
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>Is Information Missing?</term>
							<listitem>
								<para>
									Is all relevant information incorporated for the particular enhancement? If not, what's missing and where should it be incorporated?
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>Is a Diagram or Screenshot Really Needed?</term>
							<listitem>
								<para>
									Diagrams should be present only if the information contained within them is essential for the reader to grasp a concept, or user interface. Well written procedures generally don't require supporting screen shots if the procedure describes the fields a user must complete. Excluding unnecessary screenshots increases the maintainability of the UDS.
								</para>
							</listitem>
						</varlistentry>
					</variablelist>
				</step>
				<step>
					<title>Comment on the Enhancements</title>
					<para>
						When you encounter an area that requires improvement, you must document your suggestions in the XML file so the content author can review your suggestions in context.
					</para>
					<para>
						XML comments are used to document Peer Review comments.
					</para>
					
<programlisting role="XML">&lt;!--Issue #[GCode Issue Number] PR Comment - [describe what needs to be changed or clarified by the content author.]
</programlisting>
					<para>
						In the comment, be as detailed as possible so the content author can effectively evaluate your suggestions.
					</para>
					<note>
						<para>
							Feedback can sometimes be perceived as criticism. For this reason, it is important to provide only constructive feedback to the contributing content author.
						</para>
					</note>
				</step>
				<step>
					<title>Update the Review Block Information for the Section</title>
					<para>
						Update the XML Status Block for the Chapter or Section you are reviewing.
					</para>
					<para>
						Change STATUS to <userinput>Review</userinput>, and update the DATE CHANGED to the date of your review.
					</para>
				</step>
				<step>
					<title>Commit Comments to GCode SVN</title>
					<para>
						Once you have finished providing feedback, commit your changes to GCode SVN.
					</para>
					<para>
						Include a meaningful commit message to indicate what was done. For example:
					</para>
					<para>
						<userinput>Issue #666 - PR - Committed comments made as part of Peer Review for this ticket.</userinput>
					</para>
					<para>
						Make note of the commit number.
					</para>
				</step>
				<step>
					<title>Update the GCode Ticket</title>
					<para>
						Once the XML files are committed, you must update the GCode ticket with the following information:
					</para>
					<itemizedlist>
						<listitem>
							<para>
								GCode SVN commit number.
							</para>
						</listitem>
						<listitem>
							<para>
								Brief summary of suggestions for the content author.
							</para>
						</listitem>
						<listitem>
							<para>
								The Peer Review comment syntax you used to mark any changes.
							</para>
							<para>
								For example, "I've used "Issue #666 - PR" to mark my review comments"
							</para>
						</listitem>
						<listitem>
							<para>
								Indicate whether a re-review is required after the recommended changes have been incorporated, or if the changes can go straight to the Mobicents Editor for review.
							</para>
						</listitem>
					</itemizedlist>
					<note>
						<title>Re-review, or Straight to Editing?</title>
						<para>
							Generally, a re-review is required when large changes are suggested by the reviewer. It is important to verify that the content author has understood what you meant in your review comments, and has appropriately incorporated your suggestions.
						</para>
						<para>
							For smaller changes, you can recommend that the content author make the suggested changes, and forward the enhancement onto Editing.
						</para>
					</note>
				</step>
			</procedure>
			
			<para>
				The responsibility falls to the content author to discuss and incorporate the changes that were recommended by the Peer Reviewer.
			</para>
			<procedure>
				<title>Incorporate Changes from Peer Reviewer</title>
				<step>
					<title>Review Comments</title>
					<para>
						Open the XML User Guide, and review the comments made by the Peer Reviewer.
					</para>
				</step>
				<step>
					<title>Incorporate Changes or Discuss</title>
					<para>
						If the content author agrees with the feedback provided by the Peer Reviewer, the comments can be incorporated.
					</para>
					<para>
						It is the responsibility of the content author to discuss any review comments that may require further clarification. After the content author and peer reviewer have reached an agreement, the agreed changes can be documented.
					</para>
					<para>
						<note>
							<para>
								Ensure any discussions about content decisions are documented in the GCode Documentation Ticket.
							</para>
						</note>
					</para>
				</step>
				<step>
					<title>Update XML Comment Block</title>
					<para>
						Update the XML Comment Block to indicate the status of the chapter or section.
					</para>
					<para>
						If changes do not require a re-review, change the STATUS to <userinput>Editing</userinput>, and update the date.
					</para>
					<para>
						If changes require re-review, leave the STATUS as <userinput>Review</userinput>, and update the date.
					</para>
				</step>
				<step>
					<title>Create Combined XML File</title>
					<para>
						Run the <literal>mkbk</literal> script and create the <filename>all-[server name].xml</filename> file.
					</para>
					<para>
						For command-line usage, refer to <xref linkend="pam-Publican_and_Maven"/>.
					</para>
				</step>
				<step>
					<title>Commit all-[server name].xml to GCode SVN</title>
					<para>
						Commit the file to GCode SVN, so the Hudson Build Server builds the doc from the correct file version.
					</para>
				</step>
				<step>
					<title>Request Hudson to Build a HTML-Single </title>
					<para>
						Generate the review document by instructing the Hudson Build Server to create a HTML-Single book.
					</para>
				</step>
				<step>
					<title>Record the Build ID Number</title>
					<para>
						After Hudson has successfully published the XML book to HTML-Single format, copy the direct link to the file and paste it into the ticket.
					</para>
				</step>
				<step>
					<title>Update GCode Ticket</title>
					<para>
						Add a comment to the GCode Documentation Ticket, stating that all review comments have been incorporated and that the enhancement is read for editing.
					</para>
					<para>
						If the changes require a re-review, make a comment to this effect.
					</para>
				</step>
				<step>
					<title>Send GCode Ticket to Next Phase</title>
					<para>
						If a re-review is required, notify the Peer Reviewer that the content is ready for re-review.
					</para>
					<para>
						If a re-review is not required, the changes can be forwarded to the next phase: Editing.
					</para>
				</step>
			</procedure>

		</section>

	</section>
	
	<section>
		<title>Editing</title>
		<para>
			The role an editor plays in any documentation project is critical to maintaining consistency in the language and tone of the UDS. The Mobicents Editor (the Editor) is responsible for evaluating the content "as is", and is not responsible for the technical accuracy of the information. Therefore, the previous phases of Authoring and Review are essential to ensure that the information presented to the reader is as accurate as possible.
		</para>
		<para>
			After the Editing request has been sent by the content author, the Editor is notified that an editing review is waiting through an email notification from GCode. <xref linkend="procedure-Editing_Documentation_Changes"/> describes the process the Mobicents Editor (the Editor) must follow to ensure the existing standards of the Mobicents UDS are maintained.
		</para>
		<procedure id="procedure-Editing_Documentation_Changes">
			<title>Editing Documentation Changes</title>
			<step>
				<title>Open the Ticket</title>
				<para>
					In the email notification, click the link in the ticket to take you to the GCode Documentation Ticket.
				</para>
			</step>
			<step>
				<title>Open the HTML Document</title>
				<para>
					The ticket should contain a direct link to the affected build version and section of the user guide hosted on the Hudson Build Server.
				</para>
				<para>
					Click each link to be taken to the closest section containing each enhancement.
				</para>
				<para>
					Refer to the details in the ticket to verify what you should be reviewing.
				</para>
			</step>
			<step>
				<title>Make Editorial Changes</title>
				<para>
					For minor changes relating directly to spelling and punctuation, the Editor must contribute the changes directly to the XML User Guide.
				</para>
				<note>
					<title>No Spell Check, No Edit</title>
					<para>
						It is totally acceptable to send back a GCode Documentation Ticket that has not underdone a basic spelling and grammar check. Recommend to the content author that they spell check the changes before sending the ticket back.
					</para>
				</note>
				<variablelist>
					<title>Editorial Questions</title>
					<varlistentry>
						<term>Does It Make Sense?</term>
						<listitem>
							<para>
								Look at readability of the documented enhancement. Does it make sense when you read it? If not, what needs to be changed?
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Is the "tone" correct?</term>
						<listitem>
							<para>
								Is the content suitable for technical publications? Or does it fall into other genres, such as marketing, or white paper styles? Suggest ways of correcting the tone.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</step>
			<step>
				<title>Review the XML Structure</title>
				<para>
					For issues relating to the organization of the content, including display and general layout, ask the following questions:
				</para>
				<variablelist>
					<title>Structural Questions</title>
					<varlistentry>
						<term>Is the XML Structure The Best Choice?</term>
						<listitem>
							<para>
								Are instructions and work flow steps contained in a &lt;procedure&gt; element, with &lt;step&gt; titles?
							</para>
							<para>
								Are screenshots contained in a &lt;figure&gt; tag, with an appropriate caption?
							</para>
							<para>
								Are &lt;sections&gt; nested too deeply? If so, provide recommendations on how the problem can be fixed.
							</para>
							<para>
								Are paragraphs too long? Are there too many concepts per paragraph?
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Is a Diagram or Screenshot Really Needed?</term>
						<listitem>
							<para>
								Diagrams should be present only if the information contained within them is essential for the reader to grasp a concept, or user interface. Well written procedures generally don't require supporting screen shots if the procedure describes the fields a user must complete. Excluding unnecessary screenshots increases the maintainability of the UDS.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Is the Diagram or Screenshot Correctly Sized?</term>
						<listitem>
							<para>
								Does the image flow outside the boundaries of the page (whether it is a PDF or a HTML page)
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</step>
			<step>
				<title>Comment on the Enhancements</title>
				<para>
					When you encounter an area that requires improvement, you must document your suggestions in the XML file so the content author can review your suggestions in context.
				</para>
				<para>
					XML comments are used to document Editor comments.
				</para>
				
<programlisting role="XML">&lt;!--Issue #[GCode Issue Number] Editor Comment - [describe what needs to be changed or clarified by the content author.]
</programlisting>
				<para>
					In the comment, be as detailed as possible so the content author can effectively evaluate your suggestions.
				</para>
				<note>
					<para>
						Feedback can sometimes be perceived as criticism. For this reason, it is important to provide only constructive feedback to the contributing content author.
					</para>
				</note>
			</step>
			<step>
				<title>Update the Review Block Information for the Section</title>
				<para>
					Update the XML Status Block for the Chapter or Section you are reviewing.
				</para>
				<para>
					Change STATUS to <userinput>Closure</userinput>, and update the DATE CHANGED to the date of your review.
				</para>
			</step>
			<step>
				<title>Commit Comments to GCode SVN</title>
				<para>
					Once you have finished providing feedback, commit your XML comments and changes to GCode SVN.
				</para>
				<para>
					Include a meaningful commit message to indicate what was done. For example:
				</para>
				<para>
					<userinput>Issue #666 - Editing - Committed comments made as part of Editing for this ticket.</userinput>
				</para>
				<para>
					Make note of the commit number.
				</para>
			</step>
			<step>
				<title>Update the GCode Ticket</title>
				<para>
					Once the XML files are committed, you must update the GCode ticket with the following information:
				</para>
				<itemizedlist>
					<listitem>
						<para>
							GCode SVN commit number.
						</para>
					</listitem>
					<listitem>
						<para>
							Brief summary of suggestions for the content author.
						</para>
					</listitem>
					<listitem>
						<para>
							The Editor comment syntax you used to mark any changes.
						</para>
						<para>
							For example, "I've used "Issue #666 - Editor Comment" to mark my editorial comments"
						</para>
					</listitem>
					<listitem>
						<para>
							Indicate whether a re-review is required after the recommended changes have been incorporated, or if the changes can go straight to the Closure phase.
						</para>
					</listitem>
				</itemizedlist>
				<note>
					<title>Re-review, or Straight to Closure?</title>
					<para>
						Generally, a re-review is required when large changes are suggested by the Editor. It is important to verify that the content author has understood what you meant in your review comments, and has appropriately incorporated your suggestions.
					</para>
					<para>
						For smaller changes, you can recommend that the content author make the suggested changes, and forward the enhancement onto the Fixed phase.
					</para>
				</note>
			</step>
			<step>
				<title>Send GCode Ticket to Next Phase</title>
				<para>
					If a re-review is required, notify the Peer Reviewer that the content is ready for re-review.
				</para>
				<para>
					If a re-review is not required, the changes can be forwarded to the next phase: Fixed.
				</para>
			</step>
		</procedure>

	</section>
	
	<section>
		<title>Fixed</title>
		<para>
			This phase includes incorporating any changes from the Editor, and closing off the GCode Documentation Ticket.
		</para>
		<procedure>
			<title>Incorporate Changes from Peer Reviewer</title>
			<step>
				<title>Review Comments</title>
				<para>
					Open the XML User Guide, and review the comments made by the Editor.
				</para>
			</step>
			<step>
				<title>Incorporate Changes or Discuss</title>
				<para>
					If the content author agrees with the feedback provided by the Editor, the comments can be incorporated.
				</para>
				<para>
					It is the responsibility of the content author to discuss any review comments that may require further clarification. After the content author and Editor have reached an agreement, the agreed changes can be documented.
				</para>
				<para>
					<note>
						<para>
							Ensure any discussions about content decisions are documented in the GCode Documentation Ticket.
						</para>
					</note>
				</para>
			</step>
			<step>
				<title>Update XML Comment Block</title>
				<para>
					Update the XML Comment Block to indicate the status of the chapter or section.
				</para>
				<para>
					If changes do not require a re-review, change the STATUS to <userinput>Fixed</userinput>, and update the date.
				</para>
				<para>
					If changes require re-review, leave the STATUS as <userinput>Review</userinput>, and update the date.
				</para>
			</step>
			<step>
				<title>Create Combined XML File</title>
				<para>
					Run the <literal>mkbk</literal> script and create the <filename>all-[server name].xml</filename> file.
				</para>
				<para>
					For command-line usage, refer to <xref linkend="pam-Publican_and_Maven"/>.
				</para>
			</step>
			<step>
				<title>Commit all-[server name].xml to GCode SVN</title>
				<para>
					Commit the file to GCode SVN, so the Hudson Build Server builds the doc from the correct file version.
				</para>
			</step>
			<step>
				<title>Request Hudson to Build a HTML-Single </title>
				<para>
					Generate the review document by instructing the Hudson Build Server to create a HTML-Single book.
				</para>
			</step>
			<step>
				<title>Record the Build ID Number</title>
				<para>
					After Hudson has successfully published the XML book to HTML-Single format, copy the direct link to the file and paste it into the ticket.
				</para>
			</step>
			<step>
				<title>Update GCode Ticket</title>
				<para>
					Add a comment to the GCode Documentation Ticket, stating that all review comments have been incorporated and that the enhancement is ready for editing.
				</para>
				<para>
					If the changes require a re-review, make a comment to this effect.
				</para>
			</step>
			<step>
				<title>Send GCode Ticket to Next Phase</title>
				<para>
					If a re-review is required, notify the Editor that the content is ready for re-review.
				</para>
				<para>
					If a re-review is not required, the ticket can be closed off according to the procedures in <xref linkend="procedure-Ticket_Closure_Procedures"/>.
				</para>
			</step>
		</procedure>
		
		<procedure id="procedure-Ticket_Closure_Procedures">
			<title>Ticket Closure Procedures</title>
			<para>
				This procedure details how to close off the ticket after all phases are satisfactorily completed.
			</para>
			<step>
				<title>Create Combined XML File</title>
				<para>
					Run the <literal>mkbk</literal> script and create the <filename>all-[server name].xml</filename> file.
				</para>
				<para>
					For command-line usage, refer to <xref linkend="pam-Publican_and_Maven"/>.
				</para>
			</step>
			<step>
				<title>Commit all-[server name].xml to GCode SVN</title>
				<para>
					Commit the file to GCode SVN, so the Hudson Build Server builds the doc from the correct file version.
				</para>
			</step>
			<step>
				<title>Update GCode Ticket</title>
				<para>
					In the ticket, mention that the change has been completed and the all-[book name].xml file is generated and committed to GCode SVN.
				</para>
				<para>
					Update the status to Verified.
				</para>
				<para>
					Save and Close the ticket.
				</para>
			</step>
		</procedure>

	</section>

</chapter>
	<chapter id="pam-Publican_and_Maven" lang="en-US">
	<title>Publican and Maven</title>
	<para>
		The Mobicents community documentation is authored using XML DocBook 4.5. Because the XML content is also used to produce the JBCP product documentation, certain XML elements must not be used because the Publican Toolchain restricts some elements when validating content.
	</para>
	<para>
		If Publican is installed on your system, execute <userinput>xmlClean --banned</userinput> in a terminal to view the banned elements.
	</para>
	<para>
		If Publican is not available on your system, the list of elements and the reasons why they are banned is explained in <xref linkend="table-fpxe-Forbidden_Publican_XML_Elements"/>.
	</para>
	<para>
		<table frame="all" id="table-fpxe-Forbidden_Publican_XML_Elements" pgwide="1">
			<title>Forbidden Publican XML Elements</title>
			<tgroup cols="2" colsep="1">
				<colspec colname="c1"/>
				<colspec colname="c2"/>
				<thead>
					<row>
						<entry>
							Banned XML Element
						</entry>
						<entry>
							Why Can't I Use It?
						</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							&lt;caution&gt;
						</entry>
						<entry>
							This element is unnecessary. Use &lt;important&gt; or &lt;warning&gt;
						</entry>
					</row>
					<row>
						<entry>
							&lt;entrytbl&gt;
						</entry>
						<entry>
							Nested tables break PDF generation. Reconsider your data structure.
						</entry>
					</row>
					<row>
						<entry>
							&lt;glossdiv&gt;
						</entry>
						<entry>
							This element set imposes English-language order on glossaries, rendering them useless when translated.
						</entry>
					</row>
					<row>
						<entry>
							&lt;glosslist&gt;
						</entry>
						<entry>
							This element set imposes English-language order on glossaries, rendering them useless when translated.
						</entry>
					</row>
					<row>
						<entry>
							&lt;inlinegraphic&gt;
						</entry>
						<entry>
							This element breaks Section 508 accessibility standards and makes translation extremely difficult.
						</entry>
					</row>
					<row>
						<entry>
							&lt;link&gt;
						</entry>
						<entry>
							This element is undesirable. Use &lt;xref&gt; for internal links and &lt;ulink&gt; for external links.
						</entry>
					</row>
					<row>
						<entry>
							&lt;olink&gt;
						</entry>
						<entry>
							This element is undesirable. Use &lt;xref&gt; for internal links and &lt;ulink&gt; for external links.
						</entry>
					</row>
					<row>
						<entry>
							&lt;tip&gt;
						</entry>
						<entry>
							This element is unnecessary. Use &lt;note&gt; or &lt;important&gt;.
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</para>
	<para>
		In additon to the banned elements, there are two attributes that must not be used anywhere within the XML source:
	</para>
	<variablelist>
		<varlistentry>
			<term>endterm</term>
			<listitem>
				<para>
					Hides data from translators and, consequently, causes translation errors.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>xreflabel</term>
			<listitem>
				<para>
					Hides data from translators and, consequently, causes translation errors.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
</chapter>
	<chapter id="bs-XML_Authoring_Resources" lang="en-US">
	<title>XML Authoring Resources</title>
	<para>
		The Mobicents User Documentation Suite is authored entirely in XML. For someone starting out with XML, there are many things to consider. What is the best authoring tool to use? What elements, and structure is definitely valid in Publican? How do I create screenshots that scale correctly?
	</para>
	<para>
		This chapter discusses a number of helpful tips that will get a new content author up to speed quickly.
	</para>
	<section id="at-Authoring_Tools">
		<title>Authoring Tools</title>
		<para>
			While you can write XML using a basic text editor, the easiest way to author XML is by using an XML Authoring Tool. A good XML Authoring Tool can auto-complete structure for you, and most importantly, validate the XML content you have written to ensure it is well-formed and valid to the standard.
		</para>
		<para>
			The number of XML authoring tools available can seem daunting to a first-time content author. The following applications will help you to get started with XML authoring, and ease your transition into the world of structured authoring.
		</para>
		<formalpara>
			<title>Syntext Serna Free XML Editor</title>
			<para>
				Syntext offer a What You See Is What You Get (WYSIWYG) XML editor called <ulink url="http://www.syntext.com/products/serna-free/">Serna Free</ulink> .
			</para>
		</formalpara>
		<para>
			This editor hides much of the complexity of XML authoring, and lets you focus on authoring the content. You still must have good knowledge of XML structure, because the application still requires you to select the right parent tag before it can auto-complete subsequent selections. It is not aware of the specific tag requirements that Publican demands.
		</para>
		<para>
			Serna is a cross-platform editor. By far, the best feature of this editor is the fact that you can open up the root XML file (for example, at the &lt;book&gt; level), and all xi:include links, cross-references, and graphics are opened up in the editor as one seamless file. This really helps with validation, and makes linking between chapters and sections easy.
		</para>
		<para>
			Serna Free can introduce invalid XML structure into a user guide, even though the document is valid according to the Serna XML validator. This often happens when dragging and dropping large sections of XML structure, or when commenting sections back into the XML structure. If other authors are using programs other than Serna Free, the way they have commented out XML sections may not be supported by Serna.
		</para>
		<formalpara>
			<title>XML Copy Editor</title>
			<para>
				XML Copy Editor is a text-based editor, that has no WYSIWYG functionality. You must know your XML rules very well to use this editor.
			</para>
		</formalpara>
		<para>
			XML Copy Editor contains a DocBook XML Parser, which will validate your XML. What it can't do is open all the xi:includes and resolve internal &lt;xref&gt; declarations that are not in the same file. This will result in a lot of validation errors, that may mask the real issue.
		</para>
		<para>
			The advantage that XML Copy Editor offers is the ability to edit the XML structure in a basic text interface. This can be very useful when you are trying to debug your XML documentation. You can use a program such as xmllint to output a full XML file, and then revalidate it using XML Copy Editor. For more information about this technique, refer to
		</para>
	</section>
	
	<section>
		<title id="xst-XML_Structure_Tips">XML Structure Tips</title>
		<para>
			In DocBook, the content that is being documented often benefits from advanced XML tagging. There are certain additions to structure that can be useful to help the reader in quickly grasping information. The following sections are grouped into common areas that you will use regularly in XML authoring.
		</para>
		<section>
			<title>Lists - Bulleted and Numbered</title>
			<para>
				The two most common list types in DocBook are not named according to such programs as Microsoft Word, or Open Office. You would think that for a bulleted list, you would start the list using &lt;bullets&gt; or &lt;bulletedlist&gt;. Likewise, for a numbered list, you might consider using &lt;numlist&gt; or &lt;numberedlist&gt;.
			</para>
			<para>
				In DocBook, these types of lists are referred to according to the following nomenclature:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						Bulleted List - &lt;itemizedlist&gt;
					</para>
				</listitem>
				<listitem>
					<para>
						Numbered List - &lt;orderedlist&gt;
					</para>
				</listitem>
			</itemizedlist>
			<formalpara>
				<title>&lt;itemizedlist&gt;</title>
				<para>
					An itemized list is used to replace a semi-colon separated list in a sentence.
				</para>
			</formalpara>
			<para>
				The XML form of an itemized list has a number of mandatory elements. For a complete list, refer to the <ulink url="http://www.docbook.org/tdg/en/html/itemizedlist.html">DocBook.org &lt;itemizedlist&gt; page</ulink>.
			</para>
			<example>
				<title>&lt;itemizedlist&gt; Mandatory Elements</title>
				
<programlisting>&lt;itemizedlist&gt;
  &lt;listitem&gt;
    &lt;para&gt;Item One.&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;Item Two.&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;Item Three.&lt;/para&gt;
  &lt;/listitem&gt;
&lt;/itemizedlist&gt;
</programlisting>
			</example>
			<para>
				The XML Structure looks like this when published:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						Item One.
					</para>
				</listitem>
				<listitem>
					<para>
						Item Two.
					</para>
				</listitem>
				<listitem>
					<para>
						Item Three.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				You can further enhance the &lt;itemizedlist&gt; by adding in a &lt;title&gt; tag after the opening &lt;itemizedlist&gt; element. A title might assist the reader with understanding what a large list contains. It might be useful if The XML structure looks like this when published:
			</para>
			<itemizedlist>
				<title>&lt;itemizedlist&gt; Title</title>
				<listitem>
					<para>
						Item One.
					</para>
				</listitem>
				<listitem>
					<para>
						Item Two.
					</para>
				</listitem>
				<listitem>
					<para>
						Item Three.
					</para>
				</listitem>
			</itemizedlist>
			<formalpara>
				<title>&lt;orderedlist&gt;</title>
				<para>
					An &lt;orderedlist&gt; is just like an &lt;itemizedlist&gt;, except it displays the content in number order. This type of list is better suited to listing small substeps in &lt;procedure&gt; lists.
				</para>
			</formalpara>
			<para>
				The XML form of an itemized list has a number of mandatory elements. For a complete list, refer to the <ulink url="http://www.docbook.org/tdg/en/html/orderedlist.html">DocBook.org &lt;itemizedlist&gt; page</ulink>.
			</para>
			<example>
				<title>&lt;orderedlist&gt; Mandatory Elements</title>
				
<programlisting>&lt;orderedlist&gt;
  &lt;listitem&gt;
    &lt;para&gt;Item One.&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;Item Two.&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;Item Three.&lt;/para&gt;
  &lt;/listitem&gt;
&lt;/orderedlist&gt;
</programlisting>
			</example>
			<para>
				You can further enhance the &lt;orderedlist&gt; by adding in a &lt;title&gt; tag after the opening &lt;orderedlist&gt; element. A title might assist the reader with understanding what a large list contains. The XML structure looks like this when published:
			</para>
			<orderedlist>
				<title>&lt;orderedlist&gt; Title</title>
				<listitem>
					<para>
						Item One.
					</para>
				</listitem>
				<listitem>
					<para>
						Item Two.
					</para>
				</listitem>
				<listitem>
					<para>
						Item Three.
					</para>
				</listitem>
			</orderedlist>
			<important>
				<title>&lt;orderedlist&gt; is no substitute for &lt;procedure&gt;</title>
				<para>
					If you are documenting a complex set of steps, it is better to use a &lt;procedure&gt; to contain the steps. Procedures can contain multiple steps, and offer greater content flexibility. For more information about &lt;procedure&gt;, refer to
				</para>
			</important>
		</section>
		
		<section>
			<title>Procedural Steps</title>
			<para>
				When it is necessary to document a complex set of installation instructions, an &lt;orderedlist&gt; is usually not the best XML element to choose. It has limitations regarding what level of detail each &lt;listitem&gt; tag can contain.
			</para>
			<para>
				The best option for large workflows, or detailed steps, is the &lt;procedure&gt; element.
			</para>
			<para>
				You may not be aware, but this element is used extensively throughout this user guide to capture the steps involved in the Authoring Process.
			</para>
			<para>
				The biggest advantage to using a &lt;procedure&gt; element is that it uses the &lt;step&gt; element. &lt;step&gt; elements are classed as 'top-level' elements, and can contain a much wider variety of child elements than the &lt;listitem&gt; element used in &lt;itemizedlist&gt; and &lt;orderedlist&gt;.
			</para>
			<para>
				The XML form of a procedure has a number of mandatory elements. For a complete list, refer to the <ulink url="http://www.docbook.org/tdg/en/html/procedure.html">DocBook.org &lt;procedure&gt; page</ulink>. Be sure to visit the pages of the child elements that the &lt;procedure&gt; tag supports, particularly the <ulink url="http://www.docbook.org/tdg/en/html/procedure.html">&lt;step&gt; element</ulink>.
			</para>
			<para>
				The minimum set of elements required for all procedure lists in the Mobicents UDS are described in the following example:
			</para>
			<example>
				<title>&lt;procedure&gt; Mandatory Elements</title>
				
<programlisting>&lt;procedure&gt;
  &lt;title&gt;&lt;procedure&gt; Title&lt;/title&gt;
  &lt;step&gt;
    &lt;title&gt;Step One Title&lt;/title&gt;
    &lt;para&gt;Step one info.&lt;/para&gt;
  &lt;/step&gt;
  &lt;step&gt;
    &lt;title&gt;Step Two Title&lt;/title&gt;
    &lt;para&gt;Step two info.&lt;/step&gt;
&lt;/procedure&gt;
</programlisting>
			</example>
			<para>
				The XML structure looks like this when published:
			</para>
			<procedure>
				<title>&lt;procedure&gt; Title</title>
				<step>
					<title>Step One Title</title>
					<para>
						Step one info.
					</para>
				</step>
				<step>
					<title>Step Two Title</title>
					<para>
						Step two info.
					</para>
				</step>
			</procedure>
			
			<para>
				You can further enhance the &lt;procedure&gt; by adding in any number of supported child elements into each &lt;step&gt;. Each &lt;step&gt; can contain any number of &lt;para&gt; tags, and also permits &lt;itemizedlist&gt; and &lt;orderedlist&gt; tags. Be sure that the tags inserted are compatible with the Publican Toolchain.
			</para>
			<example>
				<title>&lt;procedure&gt; Extra Elements</title>
				
<programlisting>&lt;procedure&gt;
  &lt;title&gt;&lt;procedure&gt; Title&lt;/title&gt;
  &lt;step&gt;
    &lt;title&gt;Step 1 Title&lt;/title&gt;
    &lt;para&gt;Step one info.  You can have multiple &lt;para&gt; elements, in one step.&lt;/para&gt;
    &lt;para&gt;Second para to further describe step.  &lt;/para&gt;
  &lt;/step&gt;
  &lt;step&gt;
    &lt;title&gt;Step 2 Title&lt;/title&gt;
    &lt;para&gt;If you find you need substeps, use an &lt;orderedlist&gt; to capture these:&lt;/para&gt;
    &lt;orderedlist&gt;
      &lt;title&gt;&lt;orderedlist&gt; instead of &lt;substeps&gt;&lt;/title&gt;
      &lt;listitem&gt;
        &lt;para&gt;Substep one.&lt;/para&gt;
      &lt;/listitem&gt;
      &lt;listitem&gt;
        &lt;para&gt;Substep two, etc.&lt;/para&gt;
      &lt;/listitem&gt;
    &lt;/orderedlist&gt;
  &lt;/step&gt;
&lt;/procedure&gt;
</programlisting>
			</example>
			<procedure>
				<title>&lt;procedure&gt; Title</title>
				<step>
					<title>Step 1 Title</title>
					<para>
						Step one info. You can have multiple &lt;para&gt; elements, in one step.
					</para>
					<para>
						Second para to further describe step.
					</para>
				</step>
				<step>
					<title>Step 2 Title</title>
					<para>
						If you find you need substeps, use an &lt;orderedlist&gt; to capture these:
					</para>
					<orderedlist>
						<title>&lt;orderedlist&gt; instead of &lt;substeps&gt;</title>
						<listitem>
							<para>
								Substep one.
							</para>
						</listitem>
						<listitem>
							<para>
								Substep two, etc.
							</para>
						</listitem>
					</orderedlist>
				</step>
			</procedure>

		</section>
		
		<section>
			<title>Graphics and Screenshots</title>
			<para>
				There are a number of graphical tags that are supported in DocBook. For consistency, the best tag to use is the &lt;figure&gt; tag.
			</para>
			<para>
				The &lt;figure&gt; tag has the advantage of containing a well-formatted title for the figure. It is suitable for both diagrams, and screenshots.
			</para>
			<example>
				<title>&lt;figure&gt; tag structure</title>
				
<programlisting>&lt;figure&gt;
  &lt;title&gt;Mobicents Icon&lt;/title&gt;
  &lt;mediaobject&gt;
    &lt;imageobject&gt;
      &lt;imagedata fileref="images/mcd-mobicents_icon_64x64.png"/&gt;
    &lt;/imageobject&gt;
  &lt;/mediaobject&gt;
&lt;/figure&gt;
</programlisting>
			</example>
			<para>
				The XML structure looks like this when published:
			</para>
			<figure>
				<title>Mobicents Icon</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/mcd-mobicents_icon_64x64.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
			<note>
				<title>Is a Screen shot Really Required?</title>
				<para>
					Screenshots increase the maintenance of a user guide. What happens if the interface changes? What happens if the product logo is updated? These situations require the screenshot to be recaptured again.
				</para>
				<para>
					Think carefully before inserting a screenshot. Often, you can explain what fields a user must complete in the user interface without a screenshot. If you can, you will save a lot of maintenance in the future.
				</para>
			</note>
			<para>
				The &lt;imagedata&gt; tag defines the image path, and sets the way the image is displayed in the published output. Use the following recommendations when inserting &lt;figure&gt; tags:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						To scale large diagrams or screenshots to fit within page boundaries, set <userinput>width="450"</userinput> to scale the screenshot within the boundaries of an A4 page.
					</para>
				</listitem>
				<listitem>
					<para>
						If you need to include a screenshot of a user interface, consider including only the area that relates to what you are discussing. You can get a much better result if you capture a small section of a user interface, because the user can easily see the detail of the area referred to in the procedure or concept.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<section>
			<title>Important, Caution, and Note</title>
			<para>
				To alert readers to information that might otherwise be overlooked, DocBook supports a number of elements you can use to highlight concepts for readers. The supported options are limited to:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						Warning
					</para>
				</listitem>
				<listitem>
					<para>
						Important
					</para>
				</listitem>
				<listitem>
					<para>
						Note
					</para>
				</listitem>
			</itemizedlist>
			<para>
				The options are listed in order of priority, and alert the reader to the following conditions:
			</para>
			<variablelist>
				<varlistentry>
					<term>Warning</term>
					<listitem>
						<para>
							Warnings contain information that must not be ignored. Ignoring recommendations in Warnings may result in data loss, or other catastrophic issues.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Important</term>
					<listitem>
						<para>
							Includes information that might be easily overlooked and may cause unnecessary frustration when using the software. For example, configuration changes that only apply to the current session, or services that need restarting before an update will apply
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Note</term>
					<listitem>
						<para>
							Contains information that may be useful to the reader. Ignoring a note should have no negative consequences for the reader, but may result in the reader missing out on usability tips, or a shortcut that may help them complete a task.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				The way these elements are formatted depends on what publishing system you use to produce a user guide. The JBCP user guide style (produced using Publican) formats this information in a conspicuous way; lots of colour, bold graphics, and a slightly different typeface to the normal content. In the Mobicents documentation, JDocBook formats the information slighly less agressively by using softer colours, but it is still quite conspicuous to the reader.
			</para>
			<para>
				When writing information for any of these elements, you can maximize the effectiveness of the information by keeping the structure of the information consistent. Consider the following examples to see how effective this is.
			</para>
			<example>
				<title>Warnings and Importants</title>
				<para>
					Use the following XML structure when creating a Warning or Important annotation. See the sample Warning and Inportant in this example as a reference.
				</para>
				
<programlisting role="XML">&lt;warning&gt;
  &lt;title&gt;Warning Summary&lt;/title&gt;
  &lt;para&gt;Imperetive instruction to the user.  Reason why the user should obey the instruction.&lt;/para&gt;
&lt;/warning&gt;
</programlisting>
				
<programlisting role="XML">&lt;important&gt;
  &lt;title&gt;Important Summary&lt;/title&gt;
  &lt;para&gt;Information that will save the reader unnecessary frustration.&lt;/para&gt;
&lt;/important&gt;
</programlisting>
			</example>
			<warning>
				<title>Open Office Package Dependencies</title>
				<para>
					Do not uninstall Open Office from Gnome Desktop systems. Open Office package dependencies may result in critical system files, including X Windows System files, being unintentionally removed.
				</para>
			</warning>
			<important>
				<title>Install MSS for JBoss 0.7 or Later</title>
				<para>
					Only MSS for JBoss v0.7 bundles the Diameter JBoss Service (the Diameter SAR, or Servlet Archive), which is required to run the Diameter Event-Charging Service.
				</para>
			</important>
		</section>

	</section>
	
	<section>
		<title>Fixing Validation Errors</title>
		<para>
			Sometimes XML structure errors can still creep into the document you're working on. It may not be your fault, but you may be required to correct the errors before your user guide can be published.
		</para>
		<para>
			Often, the easiest way to diagnose a structure error is to assemble all the chapters and sections into one large file, and open this up in an alternative validation tool to the one you're using. By doing this, structure errors that occur between chapter or sections are easily identified.
		</para>
	</section>

</chapter>
	<appendix id="app-Revision_History" lang="en-US">
	<title>Revision History</title>
	<simpara>
		<revhistory>
			<revision>
				<revnumber>1.0</revnumber>
				<date/>
				<author>
					<firstname>Jared</firstname>
					<surname>Morgan</surname>
					<email>jmorgan@redhat.com</email>
				</author>
				<revdescription>
					<simplelist>
						<member/>
					</simplelist>
				</revdescription>
			</revision>
		</revhistory>
	</simpara>
</appendix>
</book>

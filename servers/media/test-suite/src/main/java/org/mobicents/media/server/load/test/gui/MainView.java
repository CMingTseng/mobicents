/*
 * MainView.java
 */
package org.mobicents.media.server.load.test.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.List;
import java.util.concurrent.TimeUnit;

import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.Timer;
import javax.swing.filechooser.FileFilter;

import org.jdesktop.application.Action;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.Task;
import org.jdesktop.application.TaskMonitor;
import org.mobicents.media.server.load.test.EchoLoadTest;

/**
 * The application's main frame.
 */
public class MainView extends FrameView {

    public MainView(SingleFrameApplication app) {
        super(app);
        this.app = app;
        fileFilter = new WavFileFilter("wav");
        appResourceMap = getContext().getResourceMap();
        initComponents();

        // status bar initialization - message timeout, idle icon and busy
        // animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = Main.getApplication().getMainFrame();
            aboutBox = new MainAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        Main.getApplication().show(aboutBox);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLayeredPaneEchoTest = new javax.swing.JLayeredPane();
        jLabelHeader = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabelJBossBindAdd = new javax.swing.JLabel();
        jTextFieldJBossBindAdd = new javax.swing.JTextField();
        jTextFieldUACount = new javax.swing.JTextField();
        jLabelServerMGCPPort = new javax.swing.JLabel();
        jTextFieldServerMGCPPort = new javax.swing.JTextField();
        jLabelPlayAudioFile = new javax.swing.JLabel();
        jTextFieldAudioFilePlay = new javax.swing.JTextField();
        jLabelRecordDirectory = new javax.swing.JLabel();
        jTextFieldAudioFileRecord = new javax.swing.JTextField();
        jLabelTestMachineIPAdd = new javax.swing.JLabel();
        jTextFieldTestIP = new javax.swing.JTextField();
        jButtonStart = new javax.swing.JButton();
        jLabelUACounts = new javax.swing.JLabel();
        jButtonStop = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabelActiveConcurrentTask = new javax.swing.JLabel();
        jTextFieldCompletedTask = new javax.swing.JTextField();
        jLabelCompletedTask = new javax.swing.JLabel();
        jTextFieldActiveCount = new javax.swing.JTextField();
        jLabelTaskScheduled = new javax.swing.JLabel();
        jTextFieldTaskScheduled = new javax.swing.JTextField();
        jLabelResultUACounts = new javax.swing.JLabel();
        jTextFieldPoolSize = new javax.swing.JTextField();
        jButtonIncreaseLoad = new javax.swing.JButton();
        jButtonDecreaseLoad = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldSuccessfulTask = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldErrorTask = new javax.swing.JTextField();
        jLabelClientMGCPPort = new javax.swing.JLabel();
        jTextFieldClientMGCPPort = new javax.swing.JTextField();
        jButtonOpenRTP = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.mobicents.media.server.load.test.gui.Main.class).getContext().getResourceMap(MainView.class);
        jLayeredPaneEchoTest.setBackground(resourceMap.getColor("jLayeredPaneEchoTest.background")); // NOI18N
        jLayeredPaneEchoTest.setName("jLayeredPaneEchoTest"); // NOI18N

        jLabelHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelHeader.setText(resourceMap.getString("jLabelHeader.text")); // NOI18N
        jLabelHeader.setName("jLabelHeader"); // NOI18N
        jLabelHeader.setBounds(0, 0, 540, 20);
        jLayeredPaneEchoTest.add(jLabelHeader, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jSeparator2.setName("jSeparator2"); // NOI18N
        jSeparator2.setBounds(15, 22, 530, 10);
        jLayeredPaneEchoTest.add(jSeparator2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabelJBossBindAdd.setText(resourceMap.getString("jLabelJBossBindAdd.text")); // NOI18N
        jLabelJBossBindAdd.setToolTipText(resourceMap.getString("jLabelJBossBindAdd.toolTipText")); // NOI18N
        jLabelJBossBindAdd.setName("jLabelJBossBindAdd"); // NOI18N
        jLabelJBossBindAdd.setBounds(20, 60, 140, 15);
        jLayeredPaneEchoTest.add(jLabelJBossBindAdd, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTextFieldJBossBindAdd.setText(resourceMap.getString("jTextFieldJBossBindAdd.text")); // NOI18N
        jTextFieldJBossBindAdd.setName("jTextFieldJBossBindAdd"); // NOI18N
        jTextFieldJBossBindAdd.setBounds(180, 60, 180, 19);
        jLayeredPaneEchoTest.add(jTextFieldJBossBindAdd, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTextFieldUACount.setText(resourceMap.getString("jTextFieldUACount.text")); // NOI18N
        jTextFieldUACount.setName("jTextFieldUACount"); // NOI18N
        jTextFieldUACount.setBounds(180, 30, 100, 19);
        jLayeredPaneEchoTest.add(jTextFieldUACount, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabelServerMGCPPort.setText(resourceMap.getString("jLabelServerMGCPPort.text")); // NOI18N
        jLabelServerMGCPPort.setToolTipText(resourceMap.getString("jLabelServerMGCPPort.toolTipText")); // NOI18N
        jLabelServerMGCPPort.setName("jLabelServerMGCPPort"); // NOI18N
        jLabelServerMGCPPort.setBounds(20, 150, 150, 15);
        jLayeredPaneEchoTest.add(jLabelServerMGCPPort, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTextFieldServerMGCPPort.setText(resourceMap.getString("jTextFieldServerMGCPPort.text")); // NOI18N
        jTextFieldServerMGCPPort.setName("jTextFieldServerMGCPPort"); // NOI18N
        jTextFieldServerMGCPPort.setBounds(180, 150, 100, 19);
        jLayeredPaneEchoTest.add(jTextFieldServerMGCPPort, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabelPlayAudioFile.setText(resourceMap.getString("jLabelPlayAudioFile.text")); // NOI18N
        jLabelPlayAudioFile.setName("jLabelPlayAudioFile"); // NOI18N
        jLabelPlayAudioFile.setBounds(20, 180, 140, 15);
        jLayeredPaneEchoTest.add(jLabelPlayAudioFile, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTextFieldAudioFilePlay.setName("jTextFieldAudioFilePlay"); // NOI18N
        jTextFieldAudioFilePlay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldAudioFilePlayMouseClicked(evt);
            }
        });
        jTextFieldAudioFilePlay.setBounds(180, 180, 400, 19);
        jLayeredPaneEchoTest.add(jTextFieldAudioFilePlay, javax.swing.JLayeredPane.DEFAULT_LAYER);
        java.io.File file = new java.io.File(".");
        try{
            jTextFieldAudioFilePlay.setText(file.getCanonicalPath());
        }catch(IOException IOex){
            //Ignore
        }

        jLabelRecordDirectory.setText(resourceMap.getString("jLabelRecordDirectory.text")); // NOI18N
        jLabelRecordDirectory.setName("jLabelRecordDirectory"); // NOI18N
        jLabelRecordDirectory.setBounds(20, 210, 140, 20);
        jLayeredPaneEchoTest.add(jLabelRecordDirectory, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTextFieldAudioFileRecord.setText(resourceMap.getString("jTextFieldAudioFileRecord.text")); // NOI18N
        jTextFieldAudioFileRecord.setName("jTextFieldAudioFileRecord"); // NOI18N
        jTextFieldAudioFileRecord.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldAudioFileRecordMouseClicked(evt);
            }
        });
        jTextFieldAudioFileRecord.setBounds(180, 210, 400, 19);
        jLayeredPaneEchoTest.add(jTextFieldAudioFileRecord, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabelTestMachineIPAdd.setText(resourceMap.getString("jLabelTestMachineIPAdd.text")); // NOI18N
        jLabelTestMachineIPAdd.setName("jLabelTestMachineIPAdd"); // NOI18N
        jLabelTestMachineIPAdd.setBounds(20, 90, 160, 15);
        jLayeredPaneEchoTest.add(jLabelTestMachineIPAdd, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTextFieldTestIP.setText(resourceMap.getString("jTextFieldTestIP.text")); // NOI18N
        jTextFieldTestIP.setName("jTextFieldTestIP"); // NOI18N
        jTextFieldTestIP.setBounds(180, 90, 180, 19);
        jLayeredPaneEchoTest.add(jTextFieldTestIP, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButtonStart.setText(resourceMap.getString("jButtonStart.text")); // NOI18N
        jButtonStart.setName("jButtonStart"); // NOI18N
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });
        jButtonStart.setBounds(180, 240, 150, 25);
        jLayeredPaneEchoTest.add(jButtonStart, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabelUACounts.setText(resourceMap.getString("jLabelUACounts.text")); // NOI18N
        jLabelUACounts.setName("jLabelUACounts"); // NOI18N
        jLabelUACounts.setBounds(20, 30, 160, 15);
        jLayeredPaneEchoTest.add(jLabelUACounts, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButtonStop.setText(resourceMap.getString("jButtonStop.text")); // NOI18N
        jButtonStop.setEnabled(false);
        jButtonStop.setName("jButtonStop"); // NOI18N
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });
        jButtonStop.setBounds(180, 500, 140, 25);
        jLayeredPaneEchoTest.add(jButtonStop, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jSeparator3.setName("jSeparator3"); // NOI18N
        jSeparator3.setBounds(70, 300, 500, 10);
        jLayeredPaneEchoTest.add(jSeparator3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabelActiveConcurrentTask.setText(resourceMap.getString("jLabelActiveConcurrentTask.text")); // NOI18N
        jLabelActiveConcurrentTask.setName("jLabelActiveConcurrentTask"); // NOI18N
        jLabelActiveConcurrentTask.setBounds(30, 350, 150, 15);
        jLayeredPaneEchoTest.add(jLabelActiveConcurrentTask, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTextFieldCompletedTask.setEditable(false);
        jTextFieldCompletedTask.setText(resourceMap.getString("jTextFieldCompletedTask.text")); // NOI18N
        jTextFieldCompletedTask.setName("jTextFieldCompletedTask"); // NOI18N
        jTextFieldCompletedTask.setBounds(180, 380, 150, 19);
        jLayeredPaneEchoTest.add(jTextFieldCompletedTask, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabelCompletedTask.setText(resourceMap.getString("jLabelCompletedTask.text")); // NOI18N
        jLabelCompletedTask.setName("jLabelCompletedTask"); // NOI18N
        jLabelCompletedTask.setBounds(30, 380, 130, 15);
        jLayeredPaneEchoTest.add(jLabelCompletedTask, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTextFieldActiveCount.setEditable(false);
        jTextFieldActiveCount.setText(resourceMap.getString("jTextFieldActiveCount.text")); // NOI18N
        jTextFieldActiveCount.setName("jTextFieldActiveCount"); // NOI18N
        jTextFieldActiveCount.setBounds(180, 350, 150, 19);
        jLayeredPaneEchoTest.add(jTextFieldActiveCount, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabelTaskScheduled.setText(resourceMap.getString("jLabelTaskScheduled.text")); // NOI18N
        jLabelTaskScheduled.setName("jLabelTaskScheduled"); // NOI18N
        jLabelTaskScheduled.setBounds(30, 410, 130, 15);
        jLayeredPaneEchoTest.add(jLabelTaskScheduled, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTextFieldTaskScheduled.setEditable(false);
        jTextFieldTaskScheduled.setText(resourceMap.getString("jTextFieldTaskScheduled.text")); // NOI18N
        jTextFieldTaskScheduled.setName("jTextFieldTaskScheduled"); // NOI18N
        jTextFieldTaskScheduled.setBounds(180, 410, 150, 19);
        jLayeredPaneEchoTest.add(jTextFieldTaskScheduled, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabelResultUACounts.setText(resourceMap.getString("jLabelResultUACounts.text")); // NOI18N
        jLabelResultUACounts.setName("jLabelResultUACounts"); // NOI18N
        jLabelResultUACounts.setBounds(30, 320, 140, 15);
        jLayeredPaneEchoTest.add(jLabelResultUACounts, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTextFieldPoolSize.setEditable(false);
        jTextFieldPoolSize.setText(resourceMap.getString("jTextFieldPoolSize.text")); // NOI18N
        jTextFieldPoolSize.setName("jTextFieldPoolSize"); // NOI18N
        jTextFieldPoolSize.setBounds(180, 310, 150, 19);
        jLayeredPaneEchoTest.add(jTextFieldPoolSize, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButtonIncreaseLoad.setText(resourceMap.getString("jButtonIncreaseLoad.text")); // NOI18N
        jButtonIncreaseLoad.setEnabled(false);
        jButtonIncreaseLoad.setName("jButtonIncreaseLoad"); // NOI18N
        jButtonIncreaseLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIncreaseLoadActionPerformed(evt);
            }
        });
        jButtonIncreaseLoad.setBounds(330, 500, 50, 25);
        jLayeredPaneEchoTest.add(jButtonIncreaseLoad, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButtonDecreaseLoad.setText(resourceMap.getString("jButtonDecreaseLoad.text")); // NOI18N
        jButtonDecreaseLoad.setEnabled(false);
        jButtonDecreaseLoad.setName("jButtonDecreaseLoad"); // NOI18N
        jButtonDecreaseLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDecreaseLoadActionPerformed(evt);
            }
        });
        jButtonDecreaseLoad.setBounds(390, 500, 50, 25);
        jLayeredPaneEchoTest.add(jButtonDecreaseLoad, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        jLabel3.setBounds(30, 440, 150, 15);
        jLayeredPaneEchoTest.add(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTextFieldSuccessfulTask.setEditable(false);
        jTextFieldSuccessfulTask.setText(resourceMap.getString("jTextFieldSuccessfulTask.text")); // NOI18N
        jTextFieldSuccessfulTask.setName("jTextFieldSuccessfulTask"); // NOI18N
        jTextFieldSuccessfulTask.setBounds(180, 440, 150, 19);
        jLayeredPaneEchoTest.add(jTextFieldSuccessfulTask, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        jLabel4.setBounds(30, 470, 130, 15);
        jLayeredPaneEchoTest.add(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTextFieldErrorTask.setEditable(false);
        jTextFieldErrorTask.setText(resourceMap.getString("jTextFieldErrorTask.text")); // NOI18N
        jTextFieldErrorTask.setName("jTextFieldErrorTask"); // NOI18N
        jTextFieldErrorTask.setBounds(180, 470, 150, 19);
        jLayeredPaneEchoTest.add(jTextFieldErrorTask, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabelClientMGCPPort.setText(resourceMap.getString("jLabelClientMGCPPort.text")); // NOI18N
        jLabelClientMGCPPort.setToolTipText(resourceMap.getString("jLabelClientMGCPPort.toolTipText")); // NOI18N
        jLabelClientMGCPPort.setName("jLabelClientMGCPPort"); // NOI18N
        jLabelClientMGCPPort.setBounds(20, 120, 150, 15);
        jLayeredPaneEchoTest.add(jLabelClientMGCPPort, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTextFieldClientMGCPPort.setText(resourceMap.getString("jTextFieldClientMGCPPort.text")); // NOI18N
        jTextFieldClientMGCPPort.setName("jTextFieldClientMGCPPort"); // NOI18N
        jTextFieldClientMGCPPort.setBounds(180, 120, 100, 19);
        jLayeredPaneEchoTest.add(jTextFieldClientMGCPPort, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButtonOpenRTP.setText(resourceMap.getString("jButtonOpenRTP.text")); // NOI18N
        jButtonOpenRTP.setEnabled(false);
        jButtonOpenRTP.setName("jButtonOpenRTP"); // NOI18N
        jButtonOpenRTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenRTPActionPerformed(evt);
            }
        });
        jButtonOpenRTP.setBounds(450, 500, 150, 25);
        jLayeredPaneEchoTest.add(jButtonOpenRTP, javax.swing.JLayeredPane.DEFAULT_LAYER);

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLayeredPaneEchoTest, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLayeredPaneEchoTest, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 544, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLayeredPaneEchoTest.setVisible(false);

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        fileMenu.add(jMenu1);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(org.mobicents.media.server.load.test.gui.Main.class).getContext().getActionMap(MainView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        org.jdesktop.layout.GroupLayout statusPanelLayout = new org.jdesktop.layout.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
            .add(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(statusMessageLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 498, Short.MAX_VALUE)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelLayout.createSequentialGroup()
                .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(statusMessageLabel)
                    .add(statusAnimationLabel)
                    .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

private void jButtonOpenRTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenRTPActionPerformed

    showOpenRTP();
}//GEN-LAST:event_jButtonOpenRTPActionPerformed

    @Action
    public void showOpenRTP() {
        if (openRTP == null) {
            JFrame mainFrame = Main.getApplication().getMainFrame();
            openRTP = new MainOpenRTP(mainFrame, jTextFieldTestIP.getText());
            openRTP.setLocationRelativeTo(mainFrame);
        }
        Main.getApplication().show(openRTP);
    }

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:

        System.out.println("Testing configuration for Loop Endpoint");
        
        testIdentifier = EchoLoadTest.ECHO_LOAD_TEST;

        jLabelHeader.setText("Loop End Point Load Test");
        jLabelPlayAudioFile.setVisible(true);
        jTextFieldAudioFilePlay.setVisible(true);
        jLabelRecordDirectory.setVisible(true);
        jTextFieldAudioFileRecord.setVisible(true);
        jButtonOpenRTP.setVisible(false);

        jLayeredPaneEchoTest.setVisible(true);

    }// GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:

        System.out.println("Testing configuration for Announcement Endpoint");
        
        testIdentifier = EchoLoadTest.ANNOUNCEMENT_LOAD_TEST;
        
        jLabelHeader.setText("Announcement End Point Load Test");
        jLabelPlayAudioFile.setVisible(false);
        jTextFieldAudioFilePlay.setVisible(false);
        jLabelRecordDirectory.setVisible(false);
        jTextFieldAudioFileRecord.setVisible(false);
        jButtonOpenRTP.setVisible(true);


        jLayeredPaneEchoTest.setVisible(true);

    }// GEN-LAST:event_jMenuItem1ActionPerformed

    private void jTextFieldAudioFilePlayMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jTextFieldAudioFilePlayMouseClicked
        // TODO add your handling code here:

        JFileChooser fc = createFileChooser("openFileChooser", this.fileFilter);
        int option = fc.showOpenDialog(getFrame());
        if (JFileChooser.APPROVE_OPTION == option) {
            File file = fc.getSelectedFile();
            jTextFieldAudioFilePlay.setText(file.getAbsolutePath());
        }

    }// GEN-LAST:event_jTextFieldAudioFilePlayMouseClicked

    private void jTextFieldAudioFileRecordMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jTextFieldAudioFileRecordMouseClicked

        JFileChooser chooser = new JFileChooser();
        chooser.setName("Directory");

        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);

        int option = chooser.showOpenDialog(getFrame());
        if (JFileChooser.APPROVE_OPTION == option) {
            File file = chooser.getSelectedFile();
            jTextFieldAudioFileRecord.setText(file.getAbsolutePath());
        }
    }// GEN-LAST:event_jTextFieldAudioFileRecordMouseClicked

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonStartActionPerformed
        // TODO add your handling code here:

        System.out.println("Start the test here baby");

        jTextFieldUACount.setEditable(false);
        jTextFieldJBossBindAdd.setEditable(false);
        jTextFieldTestIP.setEnabled(false);
        jTextFieldServerMGCPPort.setEditable(false);

        jTextFieldAudioFilePlay.setEditable(false);
        jTextFieldAudioFileRecord.setEditable(false);

        test = new EchoLoadTest(testIdentifier);

        test.setNumberOfUA(Integer.parseInt(jTextFieldUACount.getText()));
        try {
            InetAddress clientMachineIPAddress = InetAddress.getByName(jTextFieldTestIP.getText());
            test.setClientMachineIPAddress(clientMachineIPAddress);
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }

        test.setJbossBindAddress(jTextFieldJBossBindAdd.getText());
        test.setServerMGCPStackPort(Integer.parseInt(jTextFieldServerMGCPPort.getText()));
        test.setClientMGCPStackPort(Integer.parseInt(jTextFieldClientMGCPPort.getText()));
        test.setAudioFileToPlay(jTextFieldAudioFilePlay.getText());

        jButtonStart.setEnabled(false);
        jButtonStop.setEnabled(true);
        jButtonIncreaseLoad.setEnabled(true);
        jButtonDecreaseLoad.setEnabled(true);
        jButtonOpenRTP.setEnabled(true);

        myPeriodicTask = new MyPeriodicTask(500L);
        getContext().getTaskService().execute(myPeriodicTask);

        test.test();

    }// GEN-LAST:event_jButtonStartActionPerformed

    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonStopActionPerformed
        // TODO add your handling code here:

        myPeriodicTask.cancel(false);
        System.out.println("Stop the test here baby");

        jTextFieldUACount.setEditable(true);
        jTextFieldJBossBindAdd.setEditable(true);
        jTextFieldTestIP.setEnabled(true);
        jTextFieldServerMGCPPort.setEditable(true);

        jTextFieldAudioFilePlay.setEditable(true);
        jTextFieldAudioFileRecord.setEditable(true);

        test.cancel();

        jButtonStart.setEnabled(true);
        jButtonStop.setEnabled(false);
        jButtonIncreaseLoad.setEnabled(false);
        jButtonDecreaseLoad.setEnabled(false);
        jButtonOpenRTP.setEnabled(false);

    }// GEN-LAST:event_jButtonStopActionPerformed

    private void jButtonIncreaseLoadActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonIncreaseLoadActionPerformed
        // TODO add your handling code here:

        test.add();
    }// GEN-LAST:event_jButtonIncreaseLoadActionPerformed

    private void jButtonDecreaseLoadActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonDecreaseLoadActionPerformed
        // TODO add your handling code here:

        test.reduce();
    }// GEN-LAST:event_jButtonDecreaseLoadActionPerformed

    private JFileChooser createFileChooser(String name, FileFilter fileFilter) {
        JFileChooser fc = new JFileChooser();
        fc.setName(name);
        if (fileFilter != null) {
            fc.setFileFilter(fileFilter);
        }
        appResourceMap.injectComponents(fc);
        return fc;
    }
    private EchoLoadTest test = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDecreaseLoad;
    private javax.swing.JButton jButtonIncreaseLoad;
    private javax.swing.JButton jButtonOpenRTP;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelActiveConcurrentTask;
    private javax.swing.JLabel jLabelClientMGCPPort;
    private javax.swing.JLabel jLabelCompletedTask;
    private javax.swing.JLabel jLabelHeader;
    private javax.swing.JLabel jLabelJBossBindAdd;
    private javax.swing.JLabel jLabelPlayAudioFile;
    private javax.swing.JLabel jLabelRecordDirectory;
    private javax.swing.JLabel jLabelResultUACounts;
    private javax.swing.JLabel jLabelServerMGCPPort;
    private javax.swing.JLabel jLabelTaskScheduled;
    private javax.swing.JLabel jLabelTestMachineIPAdd;
    private javax.swing.JLabel jLabelUACounts;
    private javax.swing.JLayeredPane jLayeredPaneEchoTest;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField jTextFieldActiveCount;
    private javax.swing.JTextField jTextFieldAudioFilePlay;
    private javax.swing.JTextField jTextFieldAudioFileRecord;
    private javax.swing.JTextField jTextFieldClientMGCPPort;
    private javax.swing.JTextField jTextFieldCompletedTask;
    private javax.swing.JTextField jTextFieldErrorTask;
    private javax.swing.JTextField jTextFieldJBossBindAdd;
    private javax.swing.JTextField jTextFieldPoolSize;
    private javax.swing.JTextField jTextFieldServerMGCPPort;
    private javax.swing.JTextField jTextFieldSuccessfulTask;
    private javax.swing.JTextField jTextFieldTaskScheduled;
    private javax.swing.JTextField jTextFieldTestIP;
    private javax.swing.JTextField jTextFieldUACount;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;
    private JDialog openRTP;
    WavFileFilter fileFilter;
    private ResourceMap appResourceMap;
    private SingleFrameApplication app;
    private MyPeriodicTask myPeriodicTask;
    private int testIdentifier = 0;

    private class MyPeriodicTask extends Task<Void, Void> {

        private final long period;

        MyPeriodicTask(long period) {
            super(app);
            this.period = period;
        }

        public Void doInBackground() throws InterruptedException {
            while (!isCancelled()) {
                Thread.sleep(period);
                publish((Void) null);
            }
            return (Void) null;
        }

        public void process(List<Void> ignored) {
            long dt = getExecutionDuration(TimeUnit.MILLISECONDS);
            jTextFieldActiveCount.setText(String.valueOf(test.getScheduler().getActiveCount()));
            jTextFieldCompletedTask.setText(String.valueOf(test.getScheduler().getCompletedTaskCount()));
            jTextFieldTaskScheduled.setText(String.valueOf(test.getScheduler().getTaskCount()));
            jTextFieldPoolSize.setText(String.valueOf(test.getNumberOfUA()));

            jTextFieldSuccessfulTask.setText(String.valueOf(test.getTaskCompletedSuccessfully()));
            jTextFieldErrorTask.setText(String.valueOf(test.getTaskCompletedFailure()));
        }
    }

    /*
     * This is a substitute for FileNameExtensionFilter, which is only available
     * on Java SE 6.
     */
    private static class WavFileFilter extends FileFilter {

        private final String description;

        WavFileFilter(String description) {
            this.description = description;
        }

        @Override
        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }
            String fileName = f.getName();
            int i = fileName.lastIndexOf('.');
            if ((i > 0) && (i < (fileName.length() - 1))) {
                String fileExt = fileName.substring(i + 1);
                if ("wav".equalsIgnoreCase(fileExt)) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public String getDescription() {
            return description;
        }
    }
}
